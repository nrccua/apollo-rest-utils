#!/usr/bin/env node

// This file is NOT meant to be imported.
// It is a helper file to generate @rest endpoint definitions
// from a swagger.json file

/* eslint-disable import/no-extraneous-dependencies, no-console */

import fs from 'fs';
import path from 'path';

import SwaggerParser from '@apidevtools/swagger-parser';
import _ from 'lodash';
import { OpenAPI, OpenAPIV3 } from 'openapi-types';
import openapiTS from 'openapi-typescript';
import prettier from 'prettier';

import { RestEndpointSchema } from '../types';

export function addArgsToPath(endpointPath: string, parameters: OpenAPIV3.ParameterObject[] | undefined): string {
  const queryParams = parameters?.filter(p => p.in === 'query').map(p => `${p.name}={args.${p.name}}`) ?? [];
  return !_.includes(endpointPath, '{') && queryParams.length > 0
    ? `${endpointPath.substr(1)}?{args}`
    : endpointPath.substr(1).replace(/{/g, '{args.') + (queryParams.length > 0 ? `?${queryParams.join('&')}` : '');
}

export function getResponseSchema(properties?: { [name: string]: OpenAPIV3.ReferenceObject | OpenAPIV3.SchemaObject }): RestEndpointSchema | undefined {
  if (!properties) {
    return undefined;
  }
  // eslint-disable-next-line @typescript-eslint/no-unsafe-return
  const result = Object.keys(properties)
    .map((p: string) =>
      // eslint-disable-next-line no-nested-ternary
      'properties' in properties[p]
        ? { [p]: getResponseSchema((properties[p] as OpenAPIV3.SchemaObject).properties) } // eslint-disable-this-line @typescript-eslint/no-unsafe-assignment
        : 'items' in properties[p]
        ? { [p]: getResponseSchema(((properties[p] as OpenAPIV3.ArraySchemaObject).items as OpenAPIV3.SchemaObject).properties) }
        : p,
    )
    .filter(p =>
      p !== undefined && _.isObject(p)
        ? Object.keys(p)
            .map(key => p[key] !== undefined)
            .reduce((a, v) => a && v, true)
        : true,
    );
  return result;
}

export function normalizeName(name: string): string {
  const normalized = name.trim().replace(/[/-]/g, '_').toUpperCase().replace(/{/g, 'BY_').replace(/}/g, '');
  return normalized.startsWith('_') ? normalized.substr(1) : normalized;
}

export function pathToType(endpointPath: string, isArray = false): string {
  const result = `${_.camelCase(normalizeName(endpointPath))}Response`;
  return `${isArray ? '[' : ''}${result.replace(result[0], result[0].toUpperCase())}${isArray ? ']' : ''}`;
}

export async function generateTypes(apiPath: string, filePath: string): Promise<string> {
  const typeOutput = await openapiTS(apiPath, { prettierConfig: '.prettierrc.js' });
  fs.writeFileSync(filePath, typeOutput);
  return `./${path.basename(filePath.replace(/[.]ts$/, ''))}`;
}

export function generateTypescript(api: OpenAPI.Document, typeImportLocation: string): string {
  let generatedTSEndpoints =
    '/**\n* This file was auto-generated by the generateRoutes endpoint generator.\n* Do not make direct changes to the file.\n' +
    `* To update this file run \`npx apollo-rest-utils <swagger_definition> <directory_of_this_file>\`\n*/\n\n`;
  generatedTSEndpoints += `import {operations} from '${typeImportLocation}'\n\nimport { IRestEndpoint} from 'apollo-rest-utils';\n\n\n`;
  // Create an object representing routes by method, e.g., { 'get': {}, ... }
  // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access
  const routes = Object.entries(OpenAPIV3.HttpMethods).reduce(
    (a, v) => ({
      ...a,
      [v[1]]: {},
    }),
    {},
  ) as unknown as Record<Uppercase<OpenAPIV3.HttpMethods>, Record<string, string>>;
  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
  const paths = api.paths as Record<string, OpenAPIV3.PathItemObject>;
  Object.keys(paths).forEach(endpointPath => {
    // eslint-disable-next-line @typescript-eslint/ban-types
    const pathObject = paths[endpointPath] as Record<string, OpenAPIV3.OperationObject<{}>>;
    Object.keys(pathObject).forEach(method => {
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
      const endpointObject = pathObject[method];
      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
      let responseBody = `operations['${endpointObject.operationId as string}']['responses']`;
      let responseSchema;
      let isArray = false;
      const okResponse = _.first(Object.keys(endpointObject.responses).sort());
      if (okResponse && parseInt(okResponse, 10) < 300) {
        responseBody += `['${okResponse}']`;
        const responseObject = endpointObject.responses[okResponse] as OpenAPIV3.ResponseObject;
        if (responseObject?.content) {
          responseBody += `['content']`;
          if (responseObject?.content?.['application/json']) {
            responseBody += `['application/json']`;
            const schema = responseObject.content['application/json'].schema as OpenAPIV3.ReferenceObject | OpenAPIV3.SchemaObject;
            if ('properties' in schema) {
              responseSchema = getResponseSchema(schema.properties);
            } else if ('items' in schema && 'properties' in schema.items) {
              isArray = true;
              responseSchema = getResponseSchema(schema.items.properties);
            }
          }
        }
      }
      const requestBodyObject = endpointObject.requestBody as OpenAPIV3.RequestBodyObject;
      const requestBody = Object.keys(requestBodyObject?.content ?? {}).includes('application/json')
        ? `operations['${endpointObject.operationId as string}']['requestBody']['content']['application/json']`
        : undefined;
      const headers = endpointObject.parameters?.filter(p => 'in' in p && p.in === 'header').map(p => p as OpenAPIV3.ParameterObject) ?? [];
      routes[method as Uppercase<OpenAPIV3.HttpMethods>][
        normalizeName(endpointPath)
      ] = `${`{ gql: '@rest(method: "${method.toUpperCase()}", path: "${addArgsToPath(
        endpointPath,
        endpointObject.parameters as OpenAPIV3.ParameterObject[] | undefined,
      )}", type: "${pathToType(endpointPath, isArray)}")', `}${
        headers?.length > 0
          ? `headers: [${headers.map(h => JSON.stringify({ description: h.description, name: h.name, required: h.required, schema: h.schema })).join(',\n')}],`
          : ''
      }${responseSchema ? `responseSchema: ${JSON.stringify(responseSchema)},\n` : ''}} as IRestEndpoint<${responseBody}${
        requestBody ? `,${requestBody}` : ''
      }>,`;
    });
  });
  generatedTSEndpoints += 'const ROUTES = {\n';
  Object.keys(routes)
    .sort()
    .forEach(method => {
      generatedTSEndpoints += `${method.toUpperCase()}: {\n`;
      Object.keys(routes[method as Uppercase<OpenAPIV3.HttpMethods>])
        .sort()
        .forEach(endpoint => {
          generatedTSEndpoints += `${endpoint}: ${routes[method as Uppercase<OpenAPIV3.HttpMethods>][endpoint]}\n`;
        });
      generatedTSEndpoints += `},\n`;
    });
  generatedTSEndpoints += '};\n\nexport default ROUTES;';

  return generatedTSEndpoints;
}

// NO TEST COVERAGE FOR THE CLI TOOL AT THIS TIME
// istanbul ignore next
async function main(): Promise<void> {
  if (require.main === module) {
    const usage = 'apollo-rest-utils <swagger_file_or_url> <output_directory>';
    if (process.argv.length < 3) {
      console.log(usage);
      throw new Error('No swagger file/URL provided as an argument');
    }
    if (process.argv.length < 4) {
      console.log(usage);
      throw new Error('No output directory provided as an argument');
    }
    const swaggerUrl = process.argv[2];
    const outputDirectory = process.argv[3];
    const typesFilename = path.join(outputDirectory, '__generatedSwaggerTypes.ts');
    const endpointsFilename = path.join(outputDirectory, '__generatedRestEndpoints.ts');
    const swaggerTypes = await generateTypes(swaggerUrl, typesFilename);
    console.log(`Types file written to ${typesFilename}`);
    const api = await SwaggerParser.validate(swaggerUrl);
    const generatedTSEndpoints = generateTypescript(api, swaggerTypes);
    const prettierTSEndpoints = prettier.format(generatedTSEndpoints, { filepath: endpointsFilename });
    fs.writeFileSync(endpointsFilename, prettierTSEndpoints);
    console.log(`Endpoint definition file written to ${endpointsFilename}`);
  }
}

// NO TEST COVERAGE FOR THE CLI TOOL AT THIS TIME
// istanbul ignore next
main().catch((unkErr: unknown) => {
  console.error(unkErr);
  process.exit(1);
});
