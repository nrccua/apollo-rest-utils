{
    "swagger": "2.0",
    "info": {
        "version": "2.2.4",
        "title": "Data Lab Service API",
        "termsOfService": "",
        "contact": {
            "email": "support@encoura.org"
        },
        "description": "\"API end points to be used for Data Lab application\"\n"
    },
    "host": "api.dev-datalab.nrccua.org",
    "basePath": "/v1",
    "tags": [
        {
            "name": "Authorization",
            "description": "Authorization"
        },
        {
            "name": "User",
            "description": "User"
        },
        {
            "name": "Organization",
            "description": "Organization"
        },
        {
            "name": "Ticket",
            "description": "Ticket"
        },
        {
            "name": "Logger",
            "description": "Logger"
        },
        {
            "name": "Files",
            "description": "Upload Legacy or Enrollment Files"
        },
        {
            "name": "Restricted Files",
            "description": "Restricted Files"
        },
        {
            "name": "Enrollment Lens",
            "description": "Enrollment Lens visualization charts"
        },
        {
            "name": "CollegeProfile",
            "description": "College Profile Editor"
        },
        {
            "name": "Searches",
            "description": "Searches"
        },
        {
            "name": "Tags",
            "description": "Tags"
        },
        {
            "name": "Filters",
            "description": "Filters"
        },
        {
            "name": "LRO",
            "description": "Long Run Operations"
        },
        {
            "name": "Carts",
            "description": "Carts"
        },
        {
            "name": "PurchaseGroups",
            "description": "Purchase Groups"
        },
        {
            "name": "Orders",
            "description": "Orders"
        },
        {
            "name": "Payment",
            "description": "Payment Profile"
        },
        {
            "name": "Fulfillment",
            "description": "Fulfillments"
        },
        {
            "name": "Delivery",
            "description": "Deliveries"
        },
        {
            "name": "ContractVolume",
            "description": "Contract Volume"
        },
        {
            "name": "Product",
            "description": "Products"
        },
        {
            "name": "FulfillmentSchedule",
            "description": "FulfillmentSchedule"
        },
        {
            "name": "Researches",
            "description": "Research Library"
        },
        {
            "name": "AOS",
            "description": "AOS"
        },
        {
            "name": "ScoreReporter",
            "description": "Student Score Reports"
        },
        {
            "name": "Exports",
            "description": "Exports"
        },
        {
            "name": "StudentCredentials",
            "description": "Student Credentials"
        }
    ],
    "schemes": [
        "http",
        "https"
    ],
    "securityDefinitions": {
        "JWT": {
            "description": "For accessing the API a valid JWT token must be passed in all the queries in the 'Authorization' header.\n\n\nA valid JWT token is generated by the API and returned as answer of a call to the route /authenticate giving a valid user & password.\n\n\nThe following syntax must be used in the 'Authorization' header :\n\n    JWT xxxxxx.yyyyyyy.zzzzzz\n",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "AWS": {
            "description": "AWS API Key for development enviroment\n",
            "type": "apiKey",
            "name": "x-api-key",
            "in": "header"
        },
        "Organization": {
            "description": "Organization UID\n",
            "type": "apiKey",
            "name": "Organization",
            "in": "header"
        }
    },
    "paths": {
        "/login": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "login",
                "security": [
                    {
                        "AWS": []
                    }
                ],
                "summary": "Authenticates user",
                "description": "Authenticates user",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "userName and password to be used in the authentication process & acceptedTerms flag if the user is authenticating by accepting terms",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userName": {
                                    "type": "string",
                                    "example": "Sample University-0"
                                },
                                "password": {
                                    "type": "string",
                                    "example": "password"
                                },
                                "acceptedTerms": {
                                    "type": "boolean",
                                    "example": true
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User authenticated",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "user": {
                                    "type": "object",
                                    "properties": {
                                        "uid": {
                                            "type": "string",
                                            "example": "1e6c6d8e-af30-43ca-a519-395734701eba"
                                        },
                                        "type": {
                                            "type": "string",
                                            "example": "User"
                                        },
                                        "userName": {
                                            "type": "string"
                                        },
                                        "firstName": {
                                            "type": "string"
                                        },
                                        "lastName": {
                                            "type": "string"
                                        },
                                        "email": {
                                            "type": "string"
                                        },
                                        "status": {
                                            "type": "string",
                                            "example": "Active"
                                        },
                                        "organizations": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "uid": {
                                                        "type": "string",
                                                        "example": "1e6c6d8e-af30-43ca-a519-395734701eba"
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Sample University"
                                                    },
                                                    "fice": {
                                                        "type": "string",
                                                        "example": "SAMPLE"
                                                    },
                                                    "stateCode": {
                                                        "type": "string",
                                                        "example": "MO"
                                                    }
                                                }
                                            }
                                        },
                                        "attributes": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/AttributeSmall"
                                            }
                                        }
                                    }
                                },
                                "sessionToken": {
                                    "type": "string",
                                    "example": "Base64 string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/refresh-token": {
            "get": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "refresh-token",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Refresh JWT",
                "description": "Return a new Json Web Token with a refreshed expiration time",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "JWT successfully refreshed",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "sessionToken": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/activate-user": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "activateUser",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Activate user",
                "description": "Verifies user e-mail and if e-mail is valid, activate user and set userName and passname as provided on body if the terms were accepted.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains the user e-mail to be verified and the verificationCode, which corresponds to the authToken in the user model; the userName to be set; the password; and user uid.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ActivateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully verified",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "user": {
                                    "$ref": "#/definitions/User"
                                },
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/forgot-password": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "forgotPassword",
                "security": [
                    {
                        "AWS": []
                    }
                ],
                "summary": "Send forgot password e-mail",
                "description": "Requests a password change. An e-mail with instructions on how to change the password will be sent to the configured user e-mail\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Send-Email",
                        "in": "header",
                        "description": "Indicates whether an actual email should be sent or not. For security reasons the default behavior is to not send any email.\n",
                        "type": "string",
                        "enum": [
                            "not-allowed",
                            "allowed"
                        ]
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body should have the e-mail or userName of the user that forgot his password",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "E-mail with password change information sent successfully",
                        "schema": {
                            "$ref": "#/definitions/PasswordResponse"
                        }
                    },
                    "204": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/reset-password": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "resetPassword",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Changes user password",
                "description": "Changes user password to a new password provided in the request body\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body must always contains the new password field. The uid or e-mail to identify the user is only necessary for LdapUsers trying to change some other user password, or for UMS users that are logged off, in this case it should also contains the verification code.\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password successfully modified",
                        "schema": {
                            "$ref": "#/definitions/PasswordResponse"
                        }
                    },
                    "204": {
                        "description": "User not found"
                    },
                    "401": {
                        "description": "Info doesn't match"
                    }
                }
            }
        },
        "/authorize-module/{moduleIndentifier}": {
            "get": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "checkModuleAuthorization",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Check authorization to module",
                "description": "Check authorization to module by moduleIndentifier (it could be both uid or key)",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "moduleIndentifier",
                        "in": "path",
                        "description": "Module indentifier (can be uid or key)",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "overwrites",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            true,
                            false
                        ],
                        "description": "Send it as 'true' to receive attibute overwrites. Default is false."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User has access to module",
                        "schema": {
                            "$ref": "#/definitions/Credentials"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/validate-email": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "validateEmail",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Validate Email",
                "description": "Return a flag indicating if e-mails is valid (not used yet) or invalid.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body must contain the e-mail to be validated, in other words, an e-mail that uniqueness will be verified.\n",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string",
                                    "example": "son.goku@capsule-corp.org"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email validated",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "isEmailUnique": {
                                    "type": "boolean",
                                    "example": true
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/validate-username": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "validateUsername",
                "security": [
                    {
                        "AWS": []
                    }
                ],
                "summary": "Validate Email",
                "description": "Return flags indicating if username is valid (not used yet) or invalid.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body must contain the username to be validated",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userName": {
                                    "type": "string",
                                    "example": "son.goku"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Username validated",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "isUsernameUnique": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "isUsernameValid": {
                                    "type": "boolean",
                                    "example": true
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users": {
            "post": {
                "tags": [
                    "User"
                ],
                "operationId": "createUser",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Creates new user",
                "description": "Creates a new User passing user data. Not all user model fields are required, check its description for reference. When making an user inactive, it also removes its Admin status\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Send-Email",
                        "in": "header",
                        "description": "Indicates whether an actual email should be sent or not. For security reasons the default behavior is to not send any email.\n",
                        "type": "string",
                        "enum": [
                            "not-allowed",
                            "allowed"
                        ]
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body is a JSON describing the user to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfuly",
                        "schema": {
                            "$ref": "#/definitions/CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "User"
                ],
                "operationId": "readUserList",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Gets list of Users by Organization",
                "description": "Gets a list of Users from Organization. Query parameters can be provided into the url to filter the returned users\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "Active",
                            "Inactive",
                            "Pending",
                            "Disabled"
                        ],
                        "description": "User status Check \"Try it out\" for possible options, can user ',' to send multiple status"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter users list by type Example: type=LdapUser (can user ',' to send multiple types)\n",
                        "type": "string"
                    },
                    {
                        "name": "firstName",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by user firstName"
                    },
                    {
                        "name": "lastName",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by user lastName"
                    },
                    {
                        "name": "userName",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by userName"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by email"
                    },
                    {
                        "name": "createdAt",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by createdAt. Example 2020-03-26T17:16:46.872Z"
                    },
                    {
                        "name": "verifiedDate",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by verifiedDate. Example 2020-03-26T17:19:04.723Z"
                    },
                    {
                        "name": "searchStr",
                        "in": "query",
                        "description": "Filter users list by searchStr Example: searchStr=Abbott This will get all users with Abbott at some important field (firstName, lastName, userName, etc ...)\n",
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of Users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GetUsersResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/{userUid}": {
            "get": {
                "tags": [
                    "User"
                ],
                "operationId": "readUser",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Finds user by UID",
                "description": "Returns a single user by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userUid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "204": {
                        "description": "No user found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "operationId": "updateUser",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Updates an user",
                "description": "Updates user identified by UID. Parameters to be updated are provided in the requested body and correspond to the fields described in user model. Valid user fields not shown in the model will be ignored in update (createAt, lastUpdated, ...) All parameters are optional, but at least one parameter must be provided in the request body for the request to succeed. The UID field can be provided but must match the one provided in path\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userUid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fields and values to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User update successfully",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "204": {
                        "description": "User not found"
                    },
                    "400": {
                        "description": "Wrong field format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "operationId": "deleteUser",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Deletes an user",
                "description": "Sets an user as inactive in the database",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userUid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully deleted",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Success"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "User not found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users/{uid}/impersonate": {
            "post": {
                "tags": [
                    "User"
                ],
                "operationId": "impersonateUser",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Impersonates a user",
                "description": "Impersonates a user by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID of the user you want to impersonate",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Impersonation successful",
                        "schema": {
                            "$ref": "#/definitions/ImpersonateResponse"
                        }
                    },
                    "204": {
                        "description": "No User with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "operationId": "stopImpersonateUser",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Stops impersonating an user",
                "description": "Stops impersonating an user by its UID and JWT payload. JWT should be the same as the one created in the POST impersonate route. An JWT obtained from the login route won't work on this route\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID of the user you want to stop impersonating (should match payload)",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stopped impersonation successful",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    },
                    "204": {
                        "description": "No User with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{uid}/resend-email": {
            "post": {
                "tags": [
                    "User"
                ],
                "operationId": "resendEmail",
                "security": [
                    {
                        "AWS": []
                    }
                ],
                "summary": "Resend Email",
                "description": "Sends an email to activate or invite a user again\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "E-mail sent successfully",
                        "schema": {
                            "$ref": "#/definitions/CreateUserResponse"
                        }
                    },
                    "204": {
                        "description": "User not found"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/tableu/ticket": {
            "get": {
                "tags": [
                    "Ticket"
                ],
                "operationId": "ticket",
                "security": [
                    {
                        "AWS": []
                    }
                ],
                "summary": "Get a trusted Tableau Ticket",
                "description": "Get a trusted Tableau Ticket. This endpoint is taken directly from Tableu server thtough AWS API Gateway.\n",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Trusted ticket successfully obtained",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "ticket": {
                                    "type": "string",
                                    "example": "hah4nm3292kakxchf9"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organizations": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "readOrgList",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets list of organization",
                "description": "Gets a list of organizations Query parameters can be provided to filter the returned organizations\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "Active",
                            "Inactive",
                            "Pending"
                        ],
                        "description": "Organization status Check \"Try it out\" for possible options"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter organizations list by name Example: name=Org1|Org2 This will get all organizations with Org1 or Org2 as the name\n",
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter organizations list by type Example: type=Business This will get all organizations with orgType field pointing to an organization named 'Business'\n",
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of Organizations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GetOrganizationsResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/organizations/{uid}": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "readOrg",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Finds organization by UID",
                "description": "Returns an organization by the provided UID, the organization will contain only the granted modules",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the organization to be returned",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An Organization object",
                        "schema": {
                            "$ref": "#/definitions/GetOrganizationByIdResponse"
                        }
                    },
                    "204": {
                        "description": "No organization found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "Organization"
                ],
                "operationId": "updateOrg",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Updates an organization",
                "description": "Updates organization identified by UID if your user is authorized to do that. Currently it is possible to update only the permissions.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the organization to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fields and values to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization update successfully",
                        "schema": {
                            "$ref": "#/definitions/GetOrganizationByIdResponse"
                        }
                    },
                    "204": {
                        "description": "Organization not found"
                    },
                    "400": {
                        "description": "Wrong field format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/organizations/cache/{uid}": {
            "delete": {
                "tags": [
                    "Organization"
                ],
                "operationId": "clearOrgCacheDataForAllOpts",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Clear organization cache data",
                "description": "Clear organization cache data for specific organization for all possible opts parameters\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cache cleared"
                    },
                    "204": {
                        "description": "No organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations/{uid}/attributes": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "readOrgAttributes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets organization attributes",
                "description": "Returns the attributes from an organization by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations/{uid}/attributes/keys": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "readOrgAttributesKeys",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets organization attributes keys",
                "description": "Returns the keys from organization attributes",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes keys retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "204": {
                        "description": "No organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations/{uid}/attributes/keys/{key}": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "readOrgAttributesByKey",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets organization attributes by key",
                "description": "Returns the attributes from an organization by its key",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "204": {
                        "description": "No organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations/{uid}/settings": {
            "put": {
                "tags": [
                    "Organization"
                ],
                "operationId": "updateOrganizationSettings",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Update Organization settings",
                "description": "Update a particular Organization settings for example an SuperScore delivery schedule",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body containing settings to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/OrganizationSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The upserted Organization",
                        "schema": {
                            "$ref": "#/definitions/OrganizationSettings"
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "readOrganizationSettings",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Read Organization settings",
                "description": "Read a particular Organization settings regarding SuperScore delivery schedule and sensitive information",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The Organization settings",
                        "schema": {
                            "$ref": "#/definitions/OrganizationSettings"
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/colleges/{fice}/profiles": {
            "get": {
                "tags": [
                    "CollegeProfile"
                ],
                "operationId": "readCollegeProfile",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Read College Profile",
                "description": "Read a particular MyOption's College Profile by Fice",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "fice",
                        "in": "path",
                        "description": "College Fice",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The College Profile",
                        "schema": {
                            "$ref": "#/definitions/CollegeProfile"
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "patch": {
                "tags": [
                    "CollegeProfile"
                ],
                "operationId": "patchCollegeProfile",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Patch College Profile",
                "description": "Patch (partial update) a particular MyOption's College Profile by Fice",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "fice",
                        "in": "path",
                        "description": "College Fice",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body containing profile fields",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CollegeProfile"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The patched College Profile",
                        "schema": {
                            "$ref": "#/definitions/CollegeProfile"
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/colleges/{fice}/profiles/images/urls": {
            "post": {
                "tags": [
                    "CollegeProfile"
                ],
                "operationId": "createCollegeProfileImagePreSignedUrl",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Create a College Profile Pre Signed Url",
                "description": "Create a College Profile Pre Signed Url",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "fice",
                        "in": "path",
                        "description": "College Fice",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body containing image type",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "imageType": {
                                    "type": "string",
                                    "example": "LOGO or MOBILE or BACKGROUND"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "preSignedUrl": {
                                    "type": "string",
                                    "example": "https://media-myoptions-org.s3.amazonaws.com/development/schools/logos/810.png?AWSAccessKeyId=AKIA"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/colleges/{fice}/profiles/images/invalidations": {
            "post": {
                "tags": [
                    "CollegeProfile"
                ],
                "operationId": "createCollegeProfileImageInvalidation",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Create a College Profile Image Invalidation",
                "description": "Create a College Profile Image Invalidation",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "fice",
                        "in": "path",
                        "description": "College Fice",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body containing image type",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "imageType": {
                                    "type": "string",
                                    "example": "LOGO or MOBILE or BACKGROUND"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Invalidation successufully created"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/classplanner/searches": {
            "post": {
                "tags": [
                    "Searches"
                ],
                "operationId": "createSearch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Creates a new search",
                "description": "Creates a new ClassPlanner search connected with a specific organization\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "search content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SearchRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created Search and a message of success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Success"
                                },
                                "search": {
                                    "$ref": "#/definitions/SearchResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "Searches"
                ],
                "operationId": "readSearchesList",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Gets list of searches",
                "description": "Gets a list of searches Query parameters can be provided to filter the returned searches. Regex can be passed in all string parameters (case insensitive).\nThe new searches are calculated according to the last time the enpoint was called.\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "title",
                        "in": "query",
                        "type": "string",
                        "description": "Search title"
                    },
                    {
                        "name": "labels",
                        "in": "query",
                        "type": "string",
                        "description": "Any label that search could have"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "Active",
                            "Disable"
                        ],
                        "description": "The search status"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "Prospect",
                            "Legacy",
                            "Declared",
                            "Ematch"
                        ],
                        "description": "The search type"
                    },
                    {
                        "name": "created.name",
                        "in": "query",
                        "type": "string",
                        "description": "The search creator's name"
                    },
                    {
                        "name": "recommended",
                        "in": "query",
                        "type": "boolean",
                        "description": "Use true for recommended searches and false to saved searches, don't use if both searches are required"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of Searches",
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of possible searches to be returned (excluding limit and offset)"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            },
                            "last-access": {
                                "type": "integer",
                                "description": "Last access timestamp, should be send together with the limit and offset for subsequent requests"
                            },
                            "new-searches": {
                                "type": "integer",
                                "description": "Total of new searches (excluding limit and offset)"
                            },
                            "new-recommended-searches": {
                                "type": "integer",
                                "description": "Total of new searches - to be deprecated prefer to use new-searches instead"
                            },
                            "new-saved-searches": {
                                "type": "integer",
                                "description": "Total of new searches - to be deprecated prefer to use new-searches instead"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ListSearchResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/classplanner/searches/run-counts": {
            "post": {
                "tags": [
                    "Searches"
                ],
                "operationId": "runCounts",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Run a counts query",
                "description": "Run a big data counts query in background (LRO), the result needs to be pulled from another endpoint (if not cached).",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Run counts parameters, if 'type' is omitted from the body 'Prospect' will be used as default value. Possible values - Prospect, Legacy, Ematch or Declared",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RunCountsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The response will be always a LRO object, but sometimes it can have the result already (cached)",
                        "schema": {
                            "$ref": "#/definitions/LROCached"
                        }
                    },
                    "202": {
                        "description": "The response will be always a LRO object, most of the time results won't be available instantly",
                        "schema": {
                            "$ref": "#/definitions/LRO"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/classplanner/searches/run-deduplication": {
            "post": {
                "tags": [
                    "Searches"
                ],
                "operationId": "runDeduplication",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Run a deduplication query",
                "description": "Run a big data deduplication query in background (LRO), the result needs to be pulled from another endpoint (if not cached). Set dedupPrevious to true/false to deduplicate (or not) against previous orders. Default is 'false'. Set dedupGroup to true/false to deduplicate within the same purchase group. Default is 'false'.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The Purchase Group that should be deduplicated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeduplicationRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "The response will be a LRO object",
                        "schema": {
                            "$ref": "#/definitions/LRO"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/classplanner/searches/{uid}": {
            "get": {
                "tags": [
                    "Searches"
                ],
                "operationId": "readSearch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Finds a ClassPlanner search by UID",
                "description": "Returns a search by the provided UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the search to be returned",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "upgrade",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "true",
                            "false"
                        ],
                        "description": "Use this flag to retrieve an upgraded version of the search. Defaults to false"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An Search object",
                        "schema": {
                            "$ref": "#/definitions/SearchResponse"
                        }
                    },
                    "204": {
                        "description": "No search found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Searches"
                ],
                "operationId": "updateSearch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Update a ClassPlanner search by the provided UID",
                "description": "Returns a search updated object\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the search to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "update content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SearchRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/SearchResponse"
                        }
                    },
                    "204": {
                        "description": "No search found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Searches"
                ],
                "operationId": "deleteSearch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Soft delete (change status as Disabled) a ClassPlanner search by the provided UID",
                "description": "Returns a search updated object with status changed to Disabled. This will also delete any tags associated with the search that are not being used by any other searches.\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the search to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/DeleteSearchResponse"
                        }
                    },
                    "204": {
                        "description": "No search found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/classplanner/searches/tags": {
            "get": {
                "tags": [
                    "Tags"
                ],
                "operationId": "readTagsList",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Gets list of tags",
                "description": "Gets a list of tags. Query parameters can be provided to filter the returned tags.\n",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "An array of tags",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TagResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/classplanner/searches/{searchUid}/tags": {
            "put": {
                "tags": [
                    "Tags"
                ],
                "operationId": "createTag",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Creates a new tag",
                "description": "Creates a new Tag connected with a specific search\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "searchUid",
                        "in": "path",
                        "description": "Search uid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Tag content",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "label": {
                                    "type": "string",
                                    "description": "Tag label",
                                    "example": "Tag 1"
                                },
                                "type": {
                                    "type": "string",
                                    "enum": [
                                        "Recommended",
                                        "Saved",
                                        "Both"
                                    ]
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns the search updated with the new tag",
                        "schema": {
                            "$ref": "#/definitions/SearchResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Tags"
                ],
                "operationId": "deleteTag",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "deletes a new tag",
                "description": "deletes a tag connected with a specific search\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "searchUid",
                        "in": "path",
                        "description": "Search uid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Tag content",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "label": {
                                    "type": "string",
                                    "description": "Tag label",
                                    "example": "Tag 2"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Tag successfully deleted from the search",
                        "schema": {
                            "$ref": "#/definitions/SearchResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/classplanner/filters": {
            "post": {
                "tags": [
                    "Filters"
                ],
                "operationId": "createFilter",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Creates a new filter",
                "description": "Creates a new ClassPlanner filter\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "filter content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FilterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The created Filter and a message of success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Success"
                                },
                                "filter": {
                                    "$ref": "#/definitions/FilterResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "Filters"
                ],
                "operationId": "readFiltersList",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Gets list of filters",
                "description": "Gets a list of filters. Query parameters can be provided to filter the returned filters. Regex can be passed in all string parameters (case insensitive).\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "displayName",
                        "in": "query",
                        "type": "string",
                        "description": "Filter display name"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "range",
                            "list",
                            "singleSelect",
                            "bool"
                        ],
                        "description": "The filter type"
                    },
                    {
                        "name": "searchTypes",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "Prospect",
                            "Legacy",
                            "Declared",
                            "Ematch"
                        ],
                        "description": "The search type this filter can be associated to"
                    },
                    {
                        "name": "overrideVersion",
                        "in": "query",
                        "type": "integer",
                        "description": "Use this to override the org classPlanner version"
                    },
                    {
                        "name": "allowAll",
                        "in": "query",
                        "type": "boolean",
                        "description": "True or false, if filter has allow all option"
                    },
                    {
                        "name": "top",
                        "in": "query",
                        "type": "boolean",
                        "description": "True or false, if filter is a top filter or not"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of Filters",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FilterResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/classplanner/filters/mappings": {
            "get": {
                "tags": [
                    "Filters"
                ],
                "operationId": "readMappings",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Gets list of all mappings",
                "description": "Get a full list of all available DB mappings",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "An array of mappings",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/SimpleMapping"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/classplanner/filters/{uid}": {
            "get": {
                "tags": [
                    "Filters"
                ],
                "operationId": "readFilter",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Finds a ClassPlanner filter by UID",
                "description": "Returns a filter by the provided UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the filter to be returned",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An Filter object",
                        "schema": {
                            "$ref": "#/definitions/FilterResponse"
                        }
                    },
                    "204": {
                        "description": "No filter found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Filters"
                ],
                "operationId": "updateFilter",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Update a ClassPlanner filter by the provided UID",
                "description": "Returns a filter updated object\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the filter to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "update content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FilterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/FilterResponse"
                        }
                    },
                    "204": {
                        "description": "No filter found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Filters"
                ],
                "operationId": "deleteFilter",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Delete a ClassPlanner filter by the provided UID",
                "description": "Returns a message of success\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the filter to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "success"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No filter found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/classplanner/filters/{uid}/options": {
            "get": {
                "tags": [
                    "Filters"
                ],
                "operationId": "readFilterOptions",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Finds all options of a ClassPlanner filter or all possible locations for a Geo filter.",
                "description": "ClassPlanner filter: Returns a list of a filter's options.\nGeo filter: Returns a list of a filter's valid geo locations. (parameter: searchString)\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the filter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "searchString",
                        "in": "query",
                        "type": "string",
                        "description": "If the filter type is a Geo, this parameter returns a list of valid geo locations that include the searchString.\nExample: searchString='787'\nIf the filter type is not Geo, this parameter is ignored.\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of Filter options",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FilterOptionsResponse"
                            }
                        }
                    },
                    "204": {
                        "description": "No filter found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/classplanner/filters/{uid}/options/{optionKey}": {
            "get": {
                "tags": [
                    "Filters"
                ],
                "operationId": "readFilterOptionsByKey",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Finds a specific filter option",
                "description": "Returns a option object",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the filter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "optionKey",
                        "in": "path",
                        "description": "Key of the specific option",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An Filter option object",
                        "schema": {
                            "$ref": "#/definitions/FilterOptionsResponse"
                        }
                    },
                    "204": {
                        "description": "No filter or option found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/classplanner/filters/{uid}/mappings": {
            "post": {
                "tags": [
                    "Filters"
                ],
                "operationId": "createFilterMapping",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Create a database mapping entity for a specific filter",
                "description": "Returns the db mapping object",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the filter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "mapping content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/MappingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A database mapping object",
                        "schema": {
                            "$ref": "#/definitions/MappingResponse"
                        }
                    },
                    "204": {
                        "description": "No filter found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/classplanner/filters/{uid}/validate": {
            "post": {
                "tags": [
                    "Filters"
                ],
                "operationId": "validateGeoFilterValues",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Validate an array of geo filter values for a specific filter.",
                "description": "Returns an array of valid filter values and an array of invalid filter values.\nThe valid filter values are an object with key and displayName elements.\nIf the filter type is county, fips is also in the valid filter object.\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the filter",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "mapping content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ValidateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A valid/invalid values object",
                        "schema": {
                            "$ref": "#/definitions/ValidateResponse"
                        }
                    },
                    "204": {
                        "description": "No filter found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/lro/processes": {
            "post": {
                "tags": [
                    "LRO"
                ],
                "operationId": "createLRO",
                "security": [
                    {
                        "AWS": []
                    }
                ],
                "summary": "Create LRO process",
                "description": "Create a new long run operation process that can be latter updated with the final result",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body should contains only the callbackUrl field, this url will be used by the clients to fetch the completed LRO process.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LRORequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "LRO object successfully verified",
                        "schema": {
                            "$ref": "#/definitions/LRO"
                        }
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/lro/processes/{lroUid}": {
            "get": {
                "tags": [
                    "LRO"
                ],
                "operationId": "getLRO",
                "security": [
                    {
                        "AWS": []
                    }
                ],
                "summary": "Get a LRO process",
                "description": "Retrieve a long run operation process",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "lroUid",
                        "in": "path",
                        "description": "UID of the LRO process to be returned",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "LRO object successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/LRO"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "LRO"
                ],
                "operationId": "updateLRO",
                "security": [
                    {
                        "AWS": []
                    }
                ],
                "summary": "Updates a LRO process",
                "description": "Updates a long run operation process with his final result",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "lroUid",
                        "in": "path",
                        "description": "UID of the LRO process to be returned",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body should contains either a result field or a error field, depending on what happened during the lon run operation process.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/LROUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "LRO object successfully updated",
                        "schema": {
                            "$ref": "#/definitions/LRO"
                        }
                    },
                    "204": {
                        "description": "No Content"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/carts": {
            "get": {
                "tags": [
                    "Carts"
                ],
                "operationId": "readCart",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Retrieve Cart",
                "description": "Retrieve the organization associated Cart",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "The organization Cart",
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of Purchase Groups in that Cart"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/CartFullResponse"
                        }
                    },
                    "204": {
                        "description": "No cart found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Carts"
                ],
                "operationId": "updateCart",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Creates or update a cart",
                "description": "Create or update the organization associated cart",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "The cart content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CartUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The organization Cart",
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of Purchase Groups in that Cart"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/CartFullResponse"
                        }
                    },
                    "204": {
                        "description": "No cart found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/carts/purchase-groups/{purchaseGroupUid}": {
            "delete": {
                "tags": [
                    "Carts"
                ],
                "operationId": "deletePurchaseGroup",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Delete Purchase Group",
                "description": "Remove a Purchase Group from the Cart and also delete it from Purchase Group collection",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "purchaseGroupUid",
                        "in": "path",
                        "description": "UID of the Purchase Group to be removed",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The organization Cart",
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of Purchase Groups in that Cart"
                            }
                        },
                        "schema": {
                            "$ref": "#/definitions/CartFullResponse"
                        }
                    },
                    "204": {
                        "description": "No cart or purchase group found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/purchase-groups": {
            "post": {
                "tags": [
                    "PurchaseGroups"
                ],
                "operationId": "createPurchaseGroup",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Create Purchase Group",
                "description": "Create or update a Purchase Group including all Purchased Items",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Purchase Group content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PurchaseGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "A Purchase Group object",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "purchaseGroup": {
                                    "$ref": "#/definitions/PurchaseGroup"
                                },
                                "message": {
                                    "type": "string",
                                    "example": "Success"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/purchase-groups/{uid}": {
            "put": {
                "tags": [
                    "PurchaseGroups"
                ],
                "operationId": "updatePurchaseGroup",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Update Purchase Group",
                "description": "Updates a Purchase Group including all Purchased Items",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the Purchase Group to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Purchase Group content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PurchaseGroupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A Purchase Group object",
                        "schema": {
                            "$ref": "#/definitions/PurchaseGroup"
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "PurchaseGroups"
                ],
                "operationId": "readPurchaseGroup",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Get Purchase Group by uid",
                "description": "Get Purchase Group by uid",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Purchase Group UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Purchase Group successfully retrived",
                        "schema": {
                            "$ref": "#/definitions/PurchaseGroup"
                        }
                    },
                    "204": {
                        "description": "No purchase group found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "PurchaseGroups"
                ],
                "operationId": "deletePurchaseGroupById",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Deletes a Purchase Group",
                "description": "Remove a Purchase Group from its collection",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the Purchase Group to be removed",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success Message",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Success"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No purchase group found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/purchase-groups/{uid}/fulfillment-schedules": {
            "post": {
                "tags": [
                    "FulfillmentSchedule",
                    "PurchaseGroups"
                ],
                "operationId": "createFulfillmentSchedule",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Create a new fulfillment schedule",
                "description": "Create a new fulfillment schedule.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "UID of the Purchase Group to assign fulfillment schedule"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fulfillment schedule to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FulfillmentSchedule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fulfillment schedule successfully created",
                        "schema": {
                            "$ref": "#/definitions/FulfillmentSchedule"
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/purchase-groups/{uid}/fulfillment-schedules/{fulfillmentScheduleUid}": {
            "put": {
                "tags": [
                    "FulfillmentSchedule",
                    "PurchaseGroups"
                ],
                "operationId": "updateFulfillmentSchedule",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Update an existing fulfillment schedule",
                "description": "Update an existing fulfillment schedule.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "UID of the Purchase Group"
                    },
                    {
                        "name": "fulfillmentScheduleUid",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "UID of the Fulfillment Schedule to update"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fulfillment schedule updates",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FulfillmentSchedule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fulfillment schedule successfully updated",
                        "schema": {
                            "$ref": "#/definitions/FulfillmentSchedule"
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/purchase-groups/{uid}/searches/filters": {
            "get": {
                "tags": [
                    "PurchaseGroups"
                ],
                "operationId": "readSearchFilters",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Get Purchase Group search filters by uid",
                "description": "Get Purchase Group search filters by uid",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Purchase Group UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "searchUid",
                        "in": "query",
                        "description": "Search UID",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Purchase items containing search filters",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PurchaseItem"
                            }
                        }
                    },
                    "204": {
                        "description": "No purchase group found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/purchase-groups/searches/filters": {
            "post": {
                "tags": [
                    "PurchaseGroups"
                ],
                "operationId": "getSearchInfo",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Get Purchase Group search filters by uid",
                "description": "Get Purchase Group search filters by uid",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Purchase group UIDs for bulk search",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/GetSearchInfoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Purchase items containing search filters",
                        "schema": {
                            "$ref": "#/definitions/GetSearchInfoResponse"
                        }
                    },
                    "204": {
                        "description": "No purchase group found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/orders": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "operationId": "readOrders",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Retrieve Orders",
                "description": "Retrieve Orders in the Cart, the result will be an array of orders. If the user type of JWT is a LdapUser, this route will retrieve Orders from all organizations, unless a organizations query parameter is passed. The organizations query parameter is ignored if it is not a LdapUser and only orders from the organization uid passed in the header will be retrieved.\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "Pending",
                            "Approved",
                            "Rejected",
                            "Purchased"
                        ],
                        "description": "Order status Check \"Try it out\" for possible options. Altough in this documentation you can only select one, when using the route you can select multiple status separating them with a comma (','). Caution as passing an invalid status will return an empty array, not throw an error!\n"
                    },
                    {
                        "name": "purchasedDate",
                        "in": "query",
                        "type": "string",
                        "description": "Can receive an date function and arguments eg':' purchasedDate=between(1501684404478, 150178224499)"
                    },
                    {
                        "name": "purchaseGroupsUids",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by Purchase Group Uids Example: purchaseGroupsUids=purchaseGroupUid1,purchaseGroupUid2 This will get all Orders for the organizations with purchaseGroups uids purchaseGroupUid1 or purchaseGroupUid2.\n"
                    },
                    {
                        "name": "approvedDate",
                        "in": "query",
                        "type": "string",
                        "description": "Can receive an date function and arguments eg':' approvedDate=between(1501684404478, 150178224499)"
                    },
                    {
                        "name": "organizations",
                        "in": "query",
                        "description": "Filter organizations by uids Example: organizations=OrgUid1,OrgUid2 This will get all Orders for the organizations with organizations uids OrgUid1 or OrgUid2. This query only works for LdapUsers\n",
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "type": "string",
                        "description": "Order type (eg':' platform, platform fulfillment, standard)"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    },
                    {
                        "name": "containingOrderUid",
                        "in": "query",
                        "type": "string",
                        "description": "Searches for the order with matching orderUid and then finds the page that the order resides and returns an array of orders that make up that page.  If this parameter is used, the limit parameter is required and the offset parameter is ignored.  If an order that matches this parameter is not found, an array of orders that satisfies the rest of the parameters will be returned.\n"
                    },
                    {
                        "name": "includePurchaseGroups",
                        "in": "query",
                        "type": "boolean",
                        "description": "If set to true it will do the purchase group aggregation using the lookup aggregation from mongo instead of performing a separate call.\n"
                    },
                    {
                        "name": "includeAddons",
                        "in": "query",
                        "type": "boolean",
                        "description": "If set to true it will additionally return addons along with the standard purchase group purchase items\n"
                    },
                    {
                        "name": "importedFromSf",
                        "in": "query",
                        "type": "boolean",
                        "description": "True if order was created as a result of an order import"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of Orders",
                        "headers": {
                            "total-orders": {
                                "type": "integer",
                                "description": "Total of orders to be returned (excluding limit and offset)"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FullOrder"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Orders"
                ],
                "operationId": "createOrder",
                "security": [
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates new order",
                "description": "Creates new order",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Order data (Obs. uid shouldn't be passed on creation). The purchaseGroups array must contains at least one purchaseGroupUid.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Order successfully created",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "order": {
                                    "$ref": "#/definitions/FullOrder"
                                },
                                "message": {
                                    "type": "string",
                                    "example": "Success"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/orders/{orderUid}": {
            "put": {
                "tags": [
                    "Orders"
                ],
                "operationId": "updateOrder",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Updates an order status",
                "description": "Updates an order status",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "orderUid",
                        "in": "path",
                        "description": "Order UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Order status. If status equals Rejected, an feedback object is also allowed",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "status": {
                                    "type": "string",
                                    "enum": [
                                        "Pending",
                                        "Approved",
                                        "Rejected",
                                        "Purchased",
                                        "Failed"
                                    ],
                                    "example": "Pending"
                                },
                                "rejectedFeedback": {
                                    "type": "object"
                                },
                                "organizationUid": {
                                    "type": "string",
                                    "description": "Organization UID"
                                },
                                "sfOpportunityNumber": {
                                    "type": "string",
                                    "description": "Salesforce Opportunity Id",
                                    "example": "SO-0000056815"
                                },
                                "additionalSfOpportunityNumbers": {
                                    "type": "array",
                                    "items": {
                                        "type": "string",
                                        "description": "Salesforce Opportunity Id",
                                        "example": "SO-0000056815"
                                    }
                                },
                                "paymentProfiles": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/PaymentProfile"
                                    }
                                },
                                "sfStatus": {
                                    "type": "string",
                                    "enum": [
                                        "Pending",
                                        "Processing",
                                        "Complete"
                                    ],
                                    "example": "Pending"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Order successfully updated",
                        "schema": {
                            "$ref": "#/definitions/FullOrder"
                        }
                    },
                    "204": {
                        "description": "No order found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "Orders"
                ],
                "operationId": "readOrder",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Get order by uid",
                "description": "Get order by uid",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "orderUid",
                        "in": "path",
                        "description": "Order UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "includeAddons",
                        "in": "query",
                        "type": "boolean",
                        "description": "If set to true it will additionally return addons along with the standard purchase group purchase items\n"
                    },
                    {
                        "name": "includeSurveyData",
                        "in": "query",
                        "type": "boolean",
                        "description": "If set to true it will additionally return the surveySupported boolean key/value pair\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order successfully retrived",
                        "schema": {
                            "$ref": "#/definitions/FullOrder"
                        }
                    },
                    "204": {
                        "description": "No order found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/orders/{orderUid}/order-summary": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "operationId": "orderSummary",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Get signed S3 url for order summary PDF by order uid",
                "description": "Get signed S3 url for order summary PDF by order uid",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "orderUid",
                        "in": "path",
                        "description": "Order UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "timezone",
                        "in": "query",
                        "type": "string",
                        "description": "The requester timezone in order to generate the PDF with the correct date. If this is not sent, the default it to UTC.\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Signed Url successfully retrieved"
                    },
                    "204": {
                        "description": "No order found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/orders/{orderUid}/copy-searches": {
            "post": {
                "tags": [
                    "Orders"
                ],
                "operationId": "copySearches",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Copies searches from an existing purchased order",
                "description": "Copies searches from an existing purchased order",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "orderUid",
                        "in": "path",
                        "description": "Order UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Copy search data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CopySearchesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Copied searches by purchase item UID",
                        "schema": {
                            "type": "object",
                            "example": {
                                "820d4668-7d99-4f97-8194-f18d9945ebc0": {
                                    "uid": "1ad1c27d-d298-4e26-827d-c9e3369d3452",
                                    "title": "My Copied Search",
                                    "type": "Prospect",
                                    "status": "Active",
                                    "classPlannerVersion": 2,
                                    "maxVolume": 0,
                                    "recommended": true,
                                    "estimate": false
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No order found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/orders/organizations": {
            "get": {
                "tags": [
                    "Orders"
                ],
                "operationId": "readOrganizations",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Retrieve Organizations of the orders in given parameters",
                "description": "Retrieve Organizations of the orders that would be returned given parameters, the result will be an array with organizationsUids, and organizationsNames. Is the same as get orders but we aggregate the result by organizations.\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "Pending",
                            "Approved",
                            "Rejected",
                            "Purchased"
                        ],
                        "description": "Order status Check \"Try it out\" for possible options. Altough in this documentation you can only select one, when using the route you can select multiple status separating them with a comma (','). Caution as passing an invalid status will return an empty array, not throw an error!\n"
                    },
                    {
                        "name": "purchasedDate",
                        "in": "query",
                        "type": "string",
                        "description": "Can receive an date function and arguments eg':' purchasedDate=between(1501684404478, 150178224499)"
                    },
                    {
                        "name": "approvedDate",
                        "in": "query",
                        "type": "string",
                        "description": "Can receive an date function and arguments eg':' approvedDate=between(1501684404478, 150178224499)"
                    },
                    {
                        "name": "organizations",
                        "in": "query",
                        "description": "Filter organizations by uids Example: organizations=OrgUid1,OrgUid2 This will get all Orders for the organizations with organizations uids OrgUid1 or OrgUid2. This query only works for LdapUsers\n",
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of organizationNames and organizationsUid",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "organizationName": {
                                        "type": "string",
                                        "example": "Sample University"
                                    },
                                    "organizationUid": {
                                        "type": "string",
                                        "example": "e6a3272e-6b34-4de9-991c-4d7d6125acbc"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/payment-profiles": {
            "post": {
                "tags": [
                    "Payment"
                ],
                "operationId": "createPaymentProfiles",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Create payment profile",
                "description": "Create an organization payment profile. You can pass only a card or a bank account by request",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Payment profile",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreatePaymentProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Payment Profiles created successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Success"
                                },
                                "paymentProfile": {
                                    "$ref": "#/definitions/PaymentProfile"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "Payment"
                ],
                "operationId": "readPaymentProfiles",
                "summary": "Retrieve payment profiles from an organization",
                "description": "Retrieve how many all payment profiles from an organization",
                "responses": {
                    "200": {
                        "description": "Payment Profiles returned successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/PaymentProfile"
                            }
                        }
                    },
                    "204": {
                        "description": "No cart found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/payment-profiles/{externalPaymentProfileUid}": {
            "delete": {
                "tags": [
                    "Payment"
                ],
                "operationId": "deletePaymentProfile",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Delete Payment Profile",
                "description": "Remove a Payment Profile from organization",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "externalPaymentProfileUid",
                        "in": "path",
                        "description": "Payment Profile uid",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success Message",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Success"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "No payment profile found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/products": {
            "post": {
                "tags": [
                    "Product"
                ],
                "operationId": "createProduct",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Create a new product",
                "description": "Create a new product. It will be latter used to generate a purchase item. This endpoint can be only used by internal users.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Product data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateProductRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product successfully created",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Success"
                                },
                                "product": {
                                    "$ref": "#/definitions/Product"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "Product"
                ],
                "operationId": "readProducts",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Retrieve a list of products",
                "description": "Retrieve a list of products.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "type": "string",
                        "description": "Use to restrict products by a specific name"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "Search",
                            "Module",
                            "Service"
                        ],
                        "description": "Use to restrict products by a specific type"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product list successfully retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Product"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/products/{productUid}": {
            "get": {
                "tags": [
                    "Product"
                ],
                "operationId": "readProduct",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Read a product by uid",
                "description": "Retrieve a product by a provided uid. Product Name or Product Key can be also used.",
                "parameters": [
                    {
                        "name": "productUid",
                        "in": "path",
                        "description": "Product uid",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    },
                    "204": {
                        "description": "No product found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Product"
                ],
                "operationId": "updateProduct",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Update a product by uid",
                "description": "Update a product by a provided uid. This endpoint can be only used by internal users.",
                "parameters": [
                    {
                        "name": "productUid",
                        "in": "path",
                        "description": "Product uid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Product data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateProductRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product successfully updated",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    },
                    "204": {
                        "description": "No product found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Product"
                ],
                "operationId": "deleteProduct",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Delete a product by uid",
                "description": "Delete a product by a provided uid. This endpoint can be only used by internal users.",
                "parameters": [
                    {
                        "name": "productUid",
                        "in": "path",
                        "description": "Product uid",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success Message",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Success"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No product found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/fulfillments": {
            "post": {
                "tags": [
                    "Fulfillment"
                ],
                "operationId": "createFulfillment",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Create a new Fulfillment",
                "description": "Create a new Fulfillment it can be either a standalone or a order based fulfillment",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fulfillment data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateFulfillmentRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Fulfillment successfully created",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Success"
                                },
                                "fulfillment": {
                                    "$ref": "#/definitions/Fulfillment"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "Fulfillment"
                ],
                "operationId": "readFulfillments",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Retrieve a list of fulfillments",
                "description": "Retrieve a list of fulfillments.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "fice",
                        "in": "query",
                        "type": "string",
                        "description": "Use to restrict fulfillments by a specific fice. Example fice=001024,001025"
                    },
                    {
                        "name": "organizationUid",
                        "in": "query",
                        "type": "string",
                        "description": "Use to restrict fulfillments by a specific organizationUid. Example organizationUid=976e6288-5960-4c8d-b53e-17b4f6892480"
                    },
                    {
                        "name": "orderUid",
                        "in": "query",
                        "type": "string",
                        "description": "Use to restrict fulfillments by a specific orderUid. Example orderUid=976e6288-5960-4c8d-b53e-17b4f6892480"
                    },
                    {
                        "name": "purchaseGroupUid",
                        "in": "query",
                        "type": "string",
                        "description": "Use to restrict fulfillments by a specific purchaseGroupUid. Example purchaseGroupUid=976e6288-5960-4c8d-b53e-17b4f6892480"
                    },
                    {
                        "name": "listPath",
                        "in": "query",
                        "type": "string",
                        "description": "Use to restrict fulfillments by a specific listPath. Example listPath=976e6288-5960-4c8d-b53e-17b4f6892480"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "Processing",
                            "Delivered",
                            "Complete"
                        ],
                        "description": "Use to restrict fulfillments by a status. Example status=Processing,Delivered"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    },
                    {
                        "name": "includeAddons",
                        "in": "query",
                        "type": "boolean",
                        "description": "Use to restrict fulfillments Purchase Items to include or not addons Purchase Items"
                    },
                    {
                        "name": "includeOrders",
                        "in": "query",
                        "type": "boolean",
                        "description": "Use to retrieve fulfillments with its respective orders. PS: When this param is true the return of the method will be changed, instead of an array, it will return an object with two keys { fulfillments, orders }."
                    },
                    {
                        "name": "fromDate",
                        "in": "query",
                        "type": "number",
                        "description": "Use to restrict fulfillments by creation date, starting on the passed. Example fromDate=1550085524933"
                    },
                    {
                        "name": "toDate",
                        "in": "query",
                        "type": "number",
                        "description": "Use to restrict fulfillments by creation date, it should be used along with the fromDate. Example fromDate=1550085524933"
                    },
                    {
                        "name": "search",
                        "in": "query",
                        "type": "string",
                        "description": "Use to restrict fulfillments based on a search string. Will search a match on sfOpportunityNumber, createdBy or productKey. Example search=prospect"
                    },
                    {
                        "name": "productKey",
                        "in": "query",
                        "type": "string",
                        "description": "Use to restrict fulfillments by productKey. Example productKey=classplanner.aos"
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "type": "string",
                        "description": "Use to sort the results based on the fulfillment properties. Example sortBy=created.createdAt"
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "type": "string",
                        "description": "Use to change the sort direction, can be desc or asc. It should be used along with sortBy. Example sortDirection=desc"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fulfillment list successfully retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Fulfillment"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/fulfillments/total": {
            "get": {
                "tags": [
                    "Fulfillment"
                ],
                "operationId": "readFulfillmentsTotal",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Retrieve the total of fulfillments by criteria",
                "description": "Retrieve the total of fulfillments by criteria.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "disconsiderExpired",
                        "in": "query",
                        "type": "boolean",
                        "description": "Excludes expired fulfillments from count",
                        "default": true
                    },
                    {
                        "name": "disconsiderExported",
                        "in": "query",
                        "type": "boolean",
                        "description": "Excludes fulfillments already exported from count",
                        "default": true
                    },
                    {
                        "name": "listGenerated",
                        "in": "query",
                        "type": "boolean",
                        "description": "Source information already generated",
                        "default": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Total of Fulfillment retrieved",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "total": {
                                    "type": "integer",
                                    "example": 10
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/fulfillments/{fulfillmentUid}": {
            "get": {
                "tags": [
                    "Fulfillment"
                ],
                "operationId": "readFulfillment",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Read a fulfillment by uid",
                "description": "Retrieve a fulfillment by a provided uid.",
                "parameters": [
                    {
                        "name": "fulfillmentUid",
                        "in": "path",
                        "description": "Fulfillment uid",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fulfillment successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/Fulfillment"
                        }
                    },
                    "204": {
                        "description": "No fulfillment found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Fulfillment"
                ],
                "operationId": "updateFulfillment",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Update a fulfillment by uid",
                "description": "Update a fulfillment by a provided uid.",
                "parameters": [
                    {
                        "name": "fulfillmentUid",
                        "in": "path",
                        "description": "Fulfillment uid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fulfillment data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FulfillmentRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fulfillment successfully updated",
                        "schema": {
                            "$ref": "#/definitions/Fulfillment"
                        }
                    },
                    "204": {
                        "description": "No fulfillment found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/fulfillments/{fulfillmentUid}/deliveries": {
            "post": {
                "tags": [
                    "Delivery"
                ],
                "operationId": "createDelivery",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Creates a new delivery under the specified fulfillment",
                "description": "Creates a new delivery under the specified fulfillment\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "fulfillmentUid",
                        "in": "path",
                        "description": "Fulfillment uid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Delivery data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeliveryRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "The response will be always a LRO object",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Success"
                                },
                                "filter": {
                                    "$ref": "#/definitions/LRO"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/fulfillments/{fulfillmentUid}/deliveries/{deliveryUid}": {
            "get": {
                "tags": [
                    "Delivery"
                ],
                "operationId": "readDelivery",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Read a delivery by uid",
                "description": "Retrieve a delivery by a provided uid.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "fulfillmentUid",
                        "in": "path",
                        "description": "Fulfillment uid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deliveryUid",
                        "in": "path",
                        "description": "Delivery uid",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delivery successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/Delivery"
                        }
                    },
                    "204": {
                        "description": "No delivery found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "put": {
                "tags": [
                    "Delivery"
                ],
                "operationId": "updateDelivery",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Update a delivery by uid",
                "description": "Update a delivery by a provided uid.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "fulfillmentUid",
                        "in": "path",
                        "description": "Fulfillment uid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deliveryUid",
                        "in": "path",
                        "description": "Delivery uid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Delivery data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/DeliveryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Delivery successfully updated",
                        "schema": {
                            "$ref": "#/definitions/Delivery"
                        }
                    },
                    "204": {
                        "description": "No Delivery found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/fulfillments/{fulfillmentUid}/deliveries/{deliveryUid}/file": {
            "get": {
                "tags": [
                    "Delivery"
                ],
                "operationId": "downloadDeliveryFile",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Downloads a delivery file by delivery uid",
                "description": "Downloads a delivery file by delivery uid.",
                "produces": [
                    "text/csv",
                    "application/vnd.ms-excel"
                ],
                "parameters": [
                    {
                        "name": "fulfillmentUid",
                        "in": "path",
                        "description": "Fulfillment uid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "deliveryUid",
                        "in": "path",
                        "description": "Delivery uid",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Output file"
                    },
                    "204": {
                        "description": "No delivery found or no output file found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/contract-volume": {
            "get": {
                "tags": [
                    "ContractVolume"
                ],
                "operationId": "readSummary",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Retrieve an organization contract volume summary",
                "description": "Retrieve an organization contract volume summary.",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Contract volume summary successfully retrieved",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "points": {
                                    "$ref": "#/definitions/ContractVolumePointsResponse"
                                },
                                "history": {
                                    "$ref": "#/definitions/ContractVolumeHistoryResponse"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/contract-volume/points": {
            "get": {
                "tags": [
                    "ContractVolume"
                ],
                "operationId": "readSummaryPoints",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Retrieve an organization contract volume summary points",
                "description": "Retrieve an organization contract volume summary points.",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Contract volume points successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/ContractVolumePointsResponse"
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/contract-volume/history": {
            "get": {
                "tags": [
                    "ContractVolume"
                ],
                "operationId": "readSummaryHistory",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Retrieve an organization contract volume summary history",
                "description": "Retrieve an organization contract volume summary history.",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Contract volume history successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/ContractVolumeHistoryResponse"
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/fulfillment-schedules": {
            "get": {
                "tags": [
                    "FulfillmentSchedule"
                ],
                "operationId": "readFulfillmentSchedules",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Retrieve fulfillment schedules due for processing",
                "description": "Retrieve fulfillment schedules due for processing.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "date",
                        "in": "query",
                        "type": "string",
                        "description": "Accepts a yyyy-mm-dd date string to determine due schedules"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fulfillment schedules successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/FulfillmentScheduleResponse"
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/ecommerce/fulfillment-schedules/{fulfillmentScheduleUid}": {
            "put": {
                "tags": [
                    "FulfillmentSchedule"
                ],
                "operationId": "updateFirstSchedule",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Update an existing fulfillment schedule",
                "description": "Update an existing fulfillment schedule.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "fulfillmentScheduleUid",
                        "in": "path",
                        "required": true,
                        "type": "string",
                        "description": "UID of the Purchase Group"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fulfillment schedule updates",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Schedule"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fulfillment schedule successfully updated",
                        "schema": {
                            "$ref": "#/definitions/FulfillmentSchedule"
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "FulfillmentSchedule"
                ],
                "operationId": "readFulfillmentSchedule",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Retrieve fulfillment schedules due for processing",
                "description": "Retrieve fulfillment schedules due for processing.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "fulfillmentScheduleUid",
                        "in": "path",
                        "description": "Fulfillment schedule UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Fulfillment schedule successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/FulfillmentSchedule"
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/research/login": {
            "post": {
                "tags": [
                    "Researches"
                ],
                "operationId": "researcheLogin",
                "security": [
                    {
                        "AWS": []
                    }
                ],
                "summary": "Authenticates user in research library",
                "description": "Authenticates user in research library",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "userName and password to be used in the authentication process",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "userName": {
                                    "type": "string",
                                    "example": "Sample University-0"
                                },
                                "password": {
                                    "type": "string",
                                    "example": "password"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User authenticated",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "user": {
                                    "type": "object",
                                    "properties": {
                                        "uid": {
                                            "type": "string",
                                            "example": "1e6c6d8e-af30-43ca-a519-395734701eba"
                                        },
                                        "type": {
                                            "type": "string",
                                            "example": "User"
                                        },
                                        "userName": {
                                            "type": "string"
                                        },
                                        "firstName": {
                                            "type": "string"
                                        },
                                        "lastName": {
                                            "type": "string"
                                        },
                                        "email": {
                                            "type": "string"
                                        },
                                        "status": {
                                            "type": "string",
                                            "example": "Active"
                                        },
                                        "organizations": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "uid": {
                                                        "type": "string",
                                                        "example": "1e6c6d8e-af30-43ca-a519-395734701eba"
                                                    },
                                                    "name": {
                                                        "type": "string",
                                                        "example": "Sample University"
                                                    }
                                                }
                                            }
                                        },
                                        "attributes": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/AttributeSmall"
                                            }
                                        }
                                    }
                                },
                                "sessionToken": {
                                    "type": "string",
                                    "example": "Base64 string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/research/articles": {
            "get": {
                "tags": [
                    "Researches"
                ],
                "operationId": "readArticles",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Get list of researches",
                "description": "Retrieve a list of researches papers based on some search criterias",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "search",
                        "in": "query",
                        "type": "string",
                        "description": "Any text string to be searched on papers"
                    },
                    {
                        "name": "program",
                        "in": "query",
                        "type": "string",
                        "description": "Use to restrict research papers by a specific program"
                    },
                    {
                        "name": "date",
                        "in": "query",
                        "type": "string",
                        "description": "Can receive an date function between(date1, date2), use to restrict the time span"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "type": "string",
                        "description": "Use to restrict research papers by a specific type"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "type": "string",
                        "description": "Used for pagination, do not use this with offset"
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "type": "boolean",
                        "description": "Same as limit but when using page style"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "Active",
                            "Pending",
                            "Expired"
                        ],
                        "description": "Use to restrict articles according to active and expiration dates. The default behaviour is status=Active. Active = active date <= today && expiration date > today. Pending = active date > today && expiration date > today. Expired = expiration date <= today. If an invalid status is passed, the default behaviour will occur\n"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The array of articles",
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of possible articles to be returned (excluding limit and offset)"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "prev-page": {
                                "type": "integer",
                                "description": "Page value to go back one page"
                            },
                            "next-page": {
                                "type": "integer",
                                "description": "Page value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            },
                            "programs": {
                                "type": "string",
                                "description": "Array as string containing the programs metadata"
                            },
                            "dates": {
                                "type": "string",
                                "description": "Array as string containing the dates metadata"
                            },
                            "types": {
                                "type": "string",
                                "description": "Array as string containing the types metadata"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ResearchResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "tags": [
                    "Researches"
                ],
                "operationId": "createResearchArticle",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Creates new article in research",
                "description": "Creates a new article in research passing article data. Not all article model fields are required, check its description for reference\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body is a JSON describing the article to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateResearchArticleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Article created successfuly",
                        "schema": {
                            "$ref": "#/definitions/CreateResearchArticleResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/research/articles/{articleUid}": {
            "put": {
                "tags": [
                    "Researches"
                ],
                "operationId": "updateResearchArticle",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Updates an article in research",
                "description": "Updates research article identified by UID. Parameters to be updated are provided in the requested body and correspond to the fields described in research article model.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "articleUid",
                        "in": "path",
                        "description": "Article UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fields and values to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateResearchArticleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Research article updated successfully",
                        "schema": {
                            "$ref": "#/definitions/ResearchArticle"
                        }
                    },
                    "204": {
                        "description": "Article not found"
                    },
                    "400": {
                        "description": "Wrong field format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Researches"
                ],
                "operationId": "deleteResearchArticle",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Deletes an research article",
                "description": "Sets an article expiration date to now in the database",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "articleUid",
                        "in": "path",
                        "description": "Article UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Article successfully deleted",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Success"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Article not found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/research/articles/{articleUid}/file": {
            "get": {
                "tags": [
                    "Researches"
                ],
                "operationId": "getResearchArticleFile",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Get file given the article Uid.",
                "description": "Get the signed filePath to the article's file.\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "articleUid",
                        "in": "path",
                        "description": "Article UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Research article updated successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "example": "s3://research-library-pdfs-dev/06.2017_Masters_Homeland_Security.pdf"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Article not found"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/log": {
            "post": {
                "tags": [
                    "Logger"
                ],
                "operationId": "log",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    }
                ],
                "summary": "Logs a message",
                "description": "Logs a message",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Logger message, level, and metadata",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Could not find page"
                                },
                                "level": {
                                    "type": "string",
                                    "example": "warn"
                                },
                                "metadata": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Message successfully logged",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Could not find page"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/files": {
            "get": {
                "tags": [
                    "Files"
                ],
                "operationId": "getUploadFile",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Uploaded files list",
                "description": "Get paginated collection of file records uploaded for this organization. Each file record has current processing status that gets updated over time as file goes through backend validation and processing. Collection can be filtered and sorted. By default rows returned in the order they are stored. Max number of results for this call is in response header **total-count**",
                "parameters": [
                    {
                        "description": "How many items should be returned.",
                        "required": false,
                        "type": "integer",
                        "default": 20,
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "description": "How many items to skip.",
                        "required": false,
                        "type": "integer",
                        "default": 0,
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "name": "sortBy",
                        "description": "Field to sort by",
                        "required": false,
                        "type": "string",
                        "enum": [
                            "productType",
                            "filePath",
                            "id",
                            "status",
                            "userName",
                            "recordVolume",
                            "uploadDate"
                        ],
                        "in": "query"
                    },
                    {
                        "name": "sortDirection",
                        "description": "Sort direction",
                        "in": "query",
                        "enum": [
                            "DESC",
                            "ASC"
                        ],
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "required": false,
                        "type": "string",
                        "description": "\n    http://www.trirand.com/jqgridwiki/doku.php?id=wiki:advanced_searching\n\n        {\n         \"groupOp\":\"OR\",\n         \"rules\":[{\"field\":\"x\",\"op\":\"eq\",\"data\":\"1\"}],\n         \"groups\":[\n              {\n                  \"groupOp\":\"AND\",\n                  \"rules\":[{\"field\":\"x\",\"op\":\"eq\",\"data\":\"2\"}],\n                  \"groups\":[...]\n              }\n          ]\n        }\n      ",
                        "in": "query"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "title": "Response Get Files For This Institution  Get",
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FileRecordModel"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "User is not authorized to use the following modules MODULE1, MODULE2,..."
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/HTTPValidationError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/files/{id}": {
            "get": {
                "tags": [
                    "Files"
                ],
                "summary": "Get Uploaded file record and metadata",
                "description": "Get file record and metadata for an uploaded file on a given organization <br><br> File record is composed by id, fileName, fileDescription, filePath, productType, status, userName, uploadDate and recordVolume <br><br> **id** File record id <br> **fileName** Uploaded File Name <br> **fileDescription** Uploaded File Description <br> **filePath** File path relative to AWS S3 <br> **productType** This file product type, for example legacy, enrollment, ematch.<br> **status** Current status of file being processed\n<br> * uploading <br> * analyzing <br> * analyzed <br> * enqueued <br> * processing <br> * done <br> * failure <br> <br>**status** Current status of file being processed **userName** the user that uploaded the file<br> **uploadDate** the date time when the file was uploaded <br> **recordVolume** Number of records in file <br><br> Metadata is composed by, product type, headers map, total rows, headers and data: <br><br> **Product Type** This file product type, for example legacy, enrollment, ematch.<br> **Filename** Filename, for example recordLegacy.csv.<br> **Headers Map** Ordered list of expected field names for this file product type.<br> **Total Rows** Total number of records in the uploaded file.<br> **Headers** List of file header names and number of empty rows for that header (column).<br> **Data** List of first 50 records from the uploaded file.<br><br> If this call returns value of **null** this implies csv file is not yet fully analyzed, a client can make periodic calls to this API and wait until result is not null. Empty dictionary response indicates there is no metadata, file could not be analyzed. <br><br> **Error** Field will be populated with corresponding file upload error if any error occurred while uploading a file ",
                "operationId": "get_file_metadata__id__meta_get",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "File GUID. It is created by /file/upload call and uniquely identifies file record in our database.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File's metadata if the file has been analyzed by the backend, null otherwise",
                        "schema": {
                            "$ref": "#/definitions/FileRecordModelWithMeta"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "User is not authorized to use the following modules MODULE1, MODULE2,..."
                    },
                    "404": {
                        "description": "File is NOT FOUND for current organization",
                        "schema": {
                            "type": "object",
                            "example": {
                                "detail": "File with id: e6224f6a-3eb3-4b50-af92-264b6f88d215 is NOT found."
                            }
                        }
                    }
                }
            }
        },
        "/files/{id}/cancel": {
            "post": {
                "tags": [
                    "Files"
                ],
                "summary": "Cancel File",
                "description": "Any analyzed file can be canceled -- meaning user does not want to continue with this file. A canceled file cannot be processed and will be deleted after 12h.",
                "operationId": "generate_file_headers_map_metadata_headers_map_put",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "File GUID. It is created by /file/upload call and uniquely identifies file record in our database.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File is added to the processing queue.",
                        "schema": {
                            "$ref": "#/definitions/FileRecordModelWithMeta"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "User is not authorized to use the following modules MODULE1, MODULE2,..."
                    },
                    "422": {
                        "description": "This file status is [XXX] and cannot be canceled."
                    }
                }
            }
        },
        "/files/{id}/process": {
            "post": {
                "tags": [
                    "Files"
                ],
                "summary": "Save file headers map and trigger processing",
                "description": "Save file headers mapping and puts file onto processing queue for another backend process to load that fild into matching algorithm on multiple databases.<br><br>",
                "operationId": "save_file_headers_map_and_trigger_processing",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Body_save_file_headers_map_and_trigger_processing"
                        },
                        "required": true
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "File GUID. It is created by /file/upload call and uniquely identifies file record in our database.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File is added to the processing queue.",
                        "schema": {
                            "$ref": "#/definitions/FileRecordModelWithMeta"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "User is not authorized to use the following modules MODULE1, MODULE2,..."
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/HTTPValidationError"
                        }
                    }
                }
            }
        },
        "/files/upload": {
            "post": {
                "tags": [
                    "Files"
                ],
                "summary": "Save file metadata and get upload URL.",
                "description": "Create file record in the database, set file status to **[uploading]** and return AWS S3 pre sign URL for uploading the actual file.<br><br> <a href=\"https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-post-example.html\"> Click heere for AWS Reference</a><br><br>",
                "operationId": "save_file_headers_and_generate_signed_url_metadata_post",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Body_save_file_headers_and_generate_signed_url_metadata_post"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authentication parameters for uploading file directly to S3 bucket. File will be stored in subdirectory structure with name specified in the key argument, actual file name used at the upload is not going to be used.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "string",
                                    "example": "522eb05c-07d4-4e4f-ab59-ab5fea4a3c59"
                                },
                                "url": {
                                    "type": "string",
                                    "example": "https://datalab-file-upload-env.s3.amazonaws.com/"
                                },
                                "fields": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string",
                                            "example": "universityName/students.csv"
                                        },
                                        "x-amz-algorithm": {
                                            "type": "string",
                                            "example": "AWS4-HMAC-SHA256"
                                        },
                                        "x-amz-credential": {
                                            "type": "string",
                                            "example": "AJFDKLSDJFLKSDJF"
                                        },
                                        "x-amz-date": {
                                            "type": "string",
                                            "example": "UTC and in the ISO 8601 format: YYYYMMDD'T'HHMMSS'Z'"
                                        },
                                        "policy": {
                                            "type": "string",
                                            "example": "eyJleHBpcmF0aW9uIjogIjIwMjEt"
                                        },
                                        "x-amz-signature": {
                                            "type": "string",
                                            "example": "34534556regt45yf"
                                        },
                                        "x-amz-security-token": {
                                            "type": "string",
                                            "example": "efjdkljj332"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "User is not authorized to use the following modules MODULE1, MODULE2,..."
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/HTTPValidationError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/restrictedfiles/{fileName}": {
            "get": {
                "tags": [
                    "Restricted Files"
                ],
                "operationId": "getFile",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    }
                ],
                "summary": "Get a file",
                "description": "Get the file URL of the file stored in restricted folder given its file name",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "fileName",
                        "in": "path",
                        "description": "the file name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "the signed URL of the file",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "url": {
                                    "type": "string",
                                    "example": "s3://dlclient-restricted-dev/fileName.pdf"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/scorereporter/scorereports/{scoreReporId}": {
            "patch": {
                "tags": [
                    "ScoreReporter"
                ],
                "operationId": "updateScoreReport",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Update a single Score Report",
                "description": "Update a single Score Report",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "scoreReporId",
                        "in": "path",
                        "description": "Id of a specific score report.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fields to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateScoreReportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The signed URL of the file",
                        "schema": {
                            "$ref": "#/definitions/ScoreReport"
                        }
                    },
                    "204": {
                        "description": "Invalid or nonexistent resource Id"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/scorereporter/scorereports/{scoreReporId}/students/": {
            "patch": {
                "tags": [
                    "ScoreReporter"
                ],
                "operationId": "updateMultipleStudents",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Update all students (from the same score report uid)",
                "description": "Update all students (from the same score report uid)",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "scoreReporId",
                        "in": "path",
                        "description": "Id of a specific score report.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fields to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateStudentsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The signed URL of the file",
                        "schema": {
                            "$ref": "#/definitions/UpdateStudentsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/scorereporter/students/{studentReportId}": {
            "get": {
                "tags": [
                    "ScoreReporter"
                ],
                "operationId": "getReportDetail",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Get a student score report",
                "description": "Get a individual student score report detail",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "studentReportId",
                        "in": "path",
                        "description": "Id of a specific student score report.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "allOrganizations",
                        "in": "query",
                        "description": "For ldap users, and users with search-all module as true default value is true. If false, score reports will be filtered only in the organization from header. Other users will only be able to search the score report from the organization in the header\n",
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The student score report detailed",
                        "schema": {
                            "$ref": "#/definitions/StudentReportDetail"
                        }
                    },
                    "204": {
                        "description": "Invalid or nonexistent student score report Id or Organization doesn't have actCode"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/scorereporter/students/search": {
            "post": {
                "tags": [
                    "ScoreReporter"
                ],
                "operationId": "getReportsList",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Get a list of students score reports",
                "description": "Gets a list of students score reports that can be filtered by.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "allOrganizations",
                        "in": "query",
                        "description": "For ldap users, and users with search-all module as true default value is true. If false, score reports will be filtered only in the organization from header. Other users will only be able to search from the organization in the header\n",
                        "type": "boolean"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    },
                    {
                        "name": "sortBy",
                        "in": "query",
                        "type": "string",
                        "description": "Use to sort the results based on the score report properties. Example sortBy=processDate",
                        "enum": [
                            "actId",
                            "firstName",
                            "lastName",
                            "city",
                            "state",
                            "birthDate",
                            "testDate",
                            "processDate",
                            "exportDate",
                            "organization.ECLN",
                            "actCollegeCode",
                            "cancel",
                            "gender",
                            "ethnicity",
                            "highSchoolCode",
                            "actScoreRange",
                            "testDateRange",
                            "createdAt",
                            "canceledAt",
                            "cancelReason",
                            "registrationId"
                        ]
                    },
                    {
                        "name": "sortDirection",
                        "in": "query",
                        "type": "string",
                        "description": "Use to change the sort direction, can be DESC or ASC. It should be used along with sortBy. Example sortDirection=DESC"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Values to filter students score reports.",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "registrationId": {
                                    "type": "string",
                                    "example": "ac184fc7-7d85-491a-a9a9-af66b981ee65"
                                },
                                "actId": {
                                    "type": "string",
                                    "example": "-99515212"
                                },
                                "sourceRegId": {
                                    "type": "string",
                                    "example": "831567893"
                                },
                                "testDate": {
                                    "type": "string",
                                    "example": "04/2019"
                                },
                                "firstName": {
                                    "type": "string",
                                    "example": "XOWUT"
                                },
                                "lastName": {
                                    "type": "string",
                                    "example": "JUXCUD"
                                },
                                "birthDate": {
                                    "type": "string",
                                    "example": "07/14/1952"
                                },
                                "city": {
                                    "type": "string",
                                    "example": "TEMVFAMX"
                                },
                                "state": {
                                    "type": "string",
                                    "example": "WP"
                                },
                                "highSchoolCode": {
                                    "type": "string",
                                    "example": 430070
                                },
                                "cancel": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "gender": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "1",
                                        "2"
                                    ]
                                },
                                "ethnicity": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "1",
                                        "2"
                                    ]
                                },
                                "actScoreRange": {
                                    "type": "array",
                                    "items": {
                                        "type": "integer"
                                    },
                                    "example": [
                                        20,
                                        22
                                    ]
                                },
                                "testDateRange": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "example": [
                                        "03/2019",
                                        "05/2019"
                                    ]
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of students",
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of possible searches to be returned (excluding limit and offset). If search request is in All Organizations and the body has only text fields (firstName, lastName and city), first is performed a textual search in order to make the response more manageable, reducing the dataset. However, when the same search is requested in a specific school, actCode is automatically added in the match criteria, and the textual search is not performed anymore. Given that the total-count can vary based in this textual search.\n"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            }
                        },
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GeneralStudentReport"
                            }
                        }
                    },
                    "204": {
                        "description": "Organization doesn't have actCode"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/scorereporter/students/cancel": {
            "post": {
                "tags": [
                    "ScoreReporter"
                ],
                "operationId": "cancelStudent",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Cancel a student score report",
                "description": "Cancel a student score report that matches with the body filters and all have the same RegistrationId.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Send-Email",
                        "in": "header",
                        "description": "Indicates whether an actual email should be sent or not to the organizations informing about the cancellation. For security reasons the default behavior is to not send any email.\n",
                        "type": "string",
                        "enum": [
                            "not-allowed",
                            "allowed"
                        ]
                    },
                    {
                        "name": "allOrganizations",
                        "in": "query",
                        "description": "For ldap users, and users with search-all module as true default value is true. If false, score reports will be filtered only in the organization from header. Other users will only be able to cancel score report from the organization in the header\n",
                        "type": "boolean"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Values to filter which student score Report will be canceled.",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "cancelReason": {
                                    "type": "string",
                                    "example": "Score updated"
                                },
                                "studentReportId": {
                                    "type": "string",
                                    "example": "598717ea-b6b6-4dc6-be2c-f23cda189387"
                                },
                                "registrationId": {
                                    "type": "string",
                                    "example": "ac184fc7-7d85-491a-a9a9-af66b981ee65"
                                },
                                "actId": {
                                    "type": "string",
                                    "example": "-99515212"
                                },
                                "sourceRegId": {
                                    "type": "string",
                                    "example": "831567893"
                                },
                                "testDate": {
                                    "type": "string",
                                    "example": "04/2019"
                                },
                                "firstName": {
                                    "type": "string",
                                    "example": "XOWUT"
                                },
                                "lastName": {
                                    "type": "string",
                                    "example": "JUXCUD"
                                },
                                "birthDate": {
                                    "type": "string",
                                    "example": "07/14/1952"
                                },
                                "city": {
                                    "type": "string",
                                    "example": "TEMVFAMX"
                                },
                                "state": {
                                    "type": "string",
                                    "example": "WP"
                                }
                            },
                            "required": [
                                "cancelReason"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Canceled student",
                        "schema": {
                            "$ref": "#/definitions/UpdatedStudent"
                        }
                    },
                    "204": {
                        "description": "Not found a score report to cancel or Organization doesn't have actCode"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "409": {
                        "description": "Conflict, matched multiple RegistrationId"
                    },
                    "412": {
                        "description": "Precondition Failed, some RegistrationId was empty in the result of search criteria."
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/scorereporter/students/reinstate": {
            "post": {
                "tags": [
                    "ScoreReporter"
                ],
                "operationId": "reinstateStudent",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Reinstate a student score report",
                "description": "Reinstate a student score report that matches with the body filters and all have the same RegistrationId",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Send-Email",
                        "in": "header",
                        "description": "Indicates whether an actual email should be sent or not to the organizations informing about the reinstatement. For security reasons the default behavior is to not send any email.\n",
                        "type": "string",
                        "enum": [
                            "not-allowed",
                            "allowed"
                        ]
                    },
                    {
                        "name": "allOrganizations",
                        "in": "query",
                        "description": "For ldap users, and users with search-all module as true default value is true. If false, score reports will be filtered only in the organization from header. Other users will only be able to reinstate score report from the organization in the header\n",
                        "type": "boolean"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Values to filter which student score Report will be reinstated.",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "studentReportId": {
                                    "type": "string",
                                    "example": "598717ea-b6b6-4dc6-be2c-f23cda189387"
                                },
                                "registrationId": {
                                    "type": "string",
                                    "example": "ac184fc7-7d85-491a-a9a9-af66b981ee65"
                                },
                                "actId": {
                                    "type": "string",
                                    "example": "-99515212"
                                },
                                "sourceRegId": {
                                    "type": "string",
                                    "example": "831567893"
                                },
                                "testDate": {
                                    "type": "string",
                                    "example": "04/2019"
                                },
                                "firstName": {
                                    "type": "string",
                                    "example": "XOWUT"
                                },
                                "lastName": {
                                    "type": "string",
                                    "example": "JUXCUD"
                                },
                                "birthDate": {
                                    "type": "string",
                                    "example": "07/14/1952"
                                },
                                "city": {
                                    "type": "string",
                                    "example": "TEMVFAMX"
                                },
                                "state": {
                                    "type": "string",
                                    "example": "WP"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Reinstated student",
                        "schema": {
                            "$ref": "#/definitions/UpdatedStudent"
                        }
                    },
                    "204": {
                        "description": "Not found a score report to reinstate or Organization doesn't have actCode"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "409": {
                        "description": "Conflict, matched multiple RegistrationId"
                    },
                    "412": {
                        "description": "Precondition Failed, some RegistrationId was empty in the result of search criteria"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/scorereporter/students/{studentReportId}/delivery": {
            "post": {
                "tags": [
                    "ScoreReporter"
                ],
                "operationId": "getStudentReportDelivery",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Get a student score report file",
                "description": "Get a individual student score report file",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "studentReportId",
                        "in": "path",
                        "description": "Id of a specific student score report.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body containing either the ScoreReport uid or the Examinee Uid",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/StudentDeliveryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The signed URL of the file",
                        "schema": {
                            "$ref": "#/definitions/StudentScoreReportDelivery"
                        }
                    },
                    "204": {
                        "description": "Invalid or nonexistent resource Id or Organization doesn't have actCode"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/aos/links": {
            "post": {
                "tags": [
                    "AOS"
                ],
                "operationId": "updateAOSLinks",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Create/update organization AOS links",
                "description": "Creates or updates organization AOS links on both UMS and the MCO database",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Organization",
                        "in": "header",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "AOS link group",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AOSLinkGroup"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "AOS links updated"
                    },
                    "400": {
                        "description": "Invalid UID or invalid AOS links"
                    }
                }
            }
        },
        "/aos/studentactivity": {
            "post": {
                "tags": [
                    "AOS"
                ],
                "operationId": "trackStudentActivity",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Tracks an AOS student activity event",
                "description": "Tracks an AOS student activity event",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "AOS student activity data",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AOSStudentActivityRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "AOS event tracked successfully"
                    },
                    "400": {
                        "description": "Invalid AOS event data"
                    }
                }
            }
        },
        "/studentcredentials/studentcredentials": {
            "get": {
                "tags": [
                    "StudentCredentials"
                ],
                "operationId": "getCredentialsCount",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Get the total number of new student credentials",
                "description": "Get the total number of new student credentials\n",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Export history for student credential retrieved successfuly",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "total": {
                                    "type": "number",
                                    "example": 25
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    }
                }
            },
            "post": {
                "tags": [
                    "StudentCredentials"
                ],
                "operationId": "getCredentialsList",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Get a list of credentials",
                "description": "Get a list of all types student credentials\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "List Credential Request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ListCredentialRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Export history for student credential retrieved successfuly",
                        "schema": {
                            "$ref": "#/definitions/ListCredentialResponse"
                        }
                    },
                    "403": {
                        "description": "Authorization failed"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "422": {
                        "description": "No student credential uid received"
                    }
                }
            }
        },
        "/studentcredentials/studentcredentials/{studentCredentialUid}": {
            "get": {
                "tags": [
                    "StudentCredentials"
                ],
                "operationId": "getExportHistory",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Get export history",
                "description": "Get export history for single student credential uid\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "studentCredentialUid",
                        "in": "path",
                        "description": "Student Credential UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Export history for student credential retrieved successfuly",
                        "schema": {
                            "$ref": "#/definitions/ExportHistory"
                        }
                    },
                    "403": {
                        "description": "Authorization failed"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "422": {
                        "description": "No student credential uid received"
                    }
                }
            }
        },
        "/studentcredentials/studentcredentials/{studentCredentialUid}/export": {
            "post": {
                "tags": [
                    "StudentCredentials"
                ],
                "operationId": "getSingleExportUrl",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Get URL for download a file",
                "description": "Get URL for downloading a credential file\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "plain/text"
                ],
                "parameters": [
                    {
                        "name": "studentCredentialUid",
                        "in": "path",
                        "description": "Student Credential UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Single Export Request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SingleExportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The signed URL of the file",
                        "schema": {
                            "type": "string",
                            "example": "https://encoura-export-files-dev.s3.amazonaws.com/score-reporter%5CACT-TECH-COLL-07012019-211525.pdf?AWSAccessKeyId=ASIA2ZTSVUMX67Q34CWO&Signature=987asdasdasdasdas09-8a0sd9870-as&x-amz-security-token=ASDAUPOIUPI!#Expires=1594308396"
                        }
                    },
                    "403": {
                        "description": "Authorization failed"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "422": {
                        "description": "No student credential uid received"
                    }
                }
            }
        },
        "/studentcredentials/studentcredentials/export": {
            "post": {
                "tags": [
                    "StudentCredentials"
                ],
                "operationId": "getCombinedExportUrl",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Get URL for download a file",
                "description": "Get URL for downloading a zip file with the required credentials\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "plain/text"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Combined Export Request",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CombinedExportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The signed URL of the file",
                        "schema": {
                            "type": "string",
                            "example": "https://encoura-export-files-dev.s3.amazonaws.com/score-reporter%5CACT-TECH-COLL-07012019-211525.pdf?AWSAccessKeyId=ASIA2ZTSVUMX67Q34CWO&Signature=987asdasdasdasdas09-8a0sd9870-as&x-amz-security-token=ASDAUPOIUPI!#Expires=1594308396"
                        }
                    },
                    "403": {
                        "description": "Authorization failed"
                    },
                    "404": {
                        "description": "Resource not found"
                    },
                    "422": {
                        "description": "No student credential uid received"
                    }
                }
            }
        },
        "/datacenter/exports": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "operationId": "readExports",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Retrieve a list exports",
                "description": "Retrieve a list of not delivered files.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "NotDelivered"
                        ],
                        "description": "Use to restrict exports by a status. Example status=NotDelivered"
                    },
                    {
                        "name": "productKey",
                        "in": "query",
                        "type": "string",
                        "description": "Use to restrict exports by productKey. Example productKey=score-reporter"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Export list successfully retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FulfillmentScoreReporter"
                            }
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/datacenter/exports/{uid}/download": {
            "get": {
                "tags": [
                    "Exports"
                ],
                "operationId": "downloadExport",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "summary": "Downloads a \"not delivered\" file by export uid",
                "description": "Downloads a \"not delivered file\" by export uid.",
                "produces": [
                    "text/csv",
                    "application/vnd.ms-excel"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Export uid",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fileType",
                        "in": "query",
                        "type": "string",
                        "description": "Use to select the file type to download (defaults to csv)"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Output file",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "downloadUrl": {
                                    "type": "string",
                                    "example": "https://encoura-export-files-dev.s3.amazonaws.com/score-reporter/ACT-LOYOLA-11019-1711.csv?AWSAccessKeyId=AKIWBTJA&Expires=15743185&Signature=NWKgP4gqGzM%3D"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "No export file found"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/enrollmentlens/charts": {
            "post": {
                "tags": [
                    "Enrollment Lens"
                ],
                "summary": "Get a report chart",
                "description": "Get a chart type based on the POST request<br><br>",
                "operationId": "charts_post",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    },
                    {
                        "Organization": []
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/Body_charts_post"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response containing the **finalQueryStatement** and the **results** from the executed query.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "finalQueryStatement": {
                                    "type": "string",
                                    "example": "Select * from exampl_table"
                                },
                                "results": {
                                    "type": "array",
                                    "example": [
                                        {
                                            "key": "value"
                                        },
                                        {
                                            "key": "value"
                                        }
                                    ],
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "key": {
                                                "type": "string",
                                                "example": "label"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "422": {
                        "description": "Validation Error",
                        "schema": {
                            "$ref": "#/definitions/HTTPValidationError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "AttributeSmall": {
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "example": "tempore"
                },
                "value": {
                    "type": "object"
                }
            }
        },
        "Creator": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "55ee6a37-7395-4a99-a623-7a53815b7103"
                },
                "firstName": {
                    "type": "string",
                    "example": "Administrator"
                },
                "lastName": {
                    "type": "string",
                    "example": "Administrator"
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "eabac226-5706-4e7c-812c-00b19e2ddf4b"
                },
                "type": {
                    "type": "string",
                    "example": "User"
                },
                "firstName": {
                    "type": "string",
                    "example": "Administrator"
                },
                "lastName": {
                    "type": "string",
                    "example": "Administrator"
                },
                "userName": {
                    "type": "string",
                    "example": "admin"
                },
                "email": {
                    "type": "string",
                    "example": "admin@nrccua.org"
                },
                "status": {
                    "type": "string",
                    "example": "Pending"
                },
                "verifiedDate": {
                    "type": "string",
                    "example": null
                },
                "creator": {
                    "$ref": "#/definitions/Creator"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-20T16:43:11.378Z"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2017-06-20T16:43:11.378Z"
                },
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationSmall"
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Role"
                    }
                },
                "application": {
                    "$ref": "#/definitions/ApplicationSmall"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "GetUsersResponse": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "1e6c6d8e-af30-43ca-a519-395734701eba"
                },
                "userName": {
                    "type": "string",
                    "example": "Sample University-0"
                },
                "firstName": {
                    "type": "string",
                    "example": "McGlynn"
                },
                "lastName": {
                    "type": "string",
                    "example": "Antoinette"
                },
                "email": {
                    "type": "string",
                    "example": "antoinette@nrccua.org"
                },
                "status": {
                    "type": "string",
                    "example": "Active"
                },
                "type": {
                    "type": "string",
                    "example": "LdapUser"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-20T16:43:11.378Z"
                },
                "verifiedDate": {
                    "type": "string",
                    "example": "2017-06-20T16:43:11.378Z"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Role"
                    }
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "UserSmall": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "1e6c6d8e-af30-43ca-a519-395734701eba"
                },
                "firstName": {
                    "type": "string",
                    "example": "McGlynn"
                },
                "lastName": {
                    "type": "string",
                    "example": "Antoinette"
                }
            }
        },
        "UpdateUserRequest": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string",
                    "example": "NewUserLastname"
                },
                "userName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Active",
                        "Inactive",
                        "Pending",
                        "Disabled"
                    ]
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PermissionSmall"
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "roleName",
                            "remove"
                        ],
                        "properties": {
                            "roleName": {
                                "type": "string",
                                "example": "externaladministrator"
                            },
                            "remove": {
                                "type": "boolean",
                                "example": false
                            }
                        }
                    }
                }
            }
        },
        "CreateUserRequest": {
            "type": "object",
            "required": [
                "firstName",
                "lastName",
                "email"
            ],
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "LdapUser",
                        "Role",
                        "User"
                    ],
                    "default": "User"
                },
                "firstName": {
                    "type": "string",
                    "example": "UserName"
                },
                "lastName": {
                    "type": "string",
                    "example": "UserLastName"
                },
                "password": {
                    "type": "string",
                    "example": "UserPassword"
                },
                "userName": {
                    "type": "string",
                    "example": "UserUserName"
                },
                "email": {
                    "type": "string",
                    "example": "UserEmail@nrccua.org"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Active",
                        "Inactive",
                        "Pending",
                        "Disabled"
                    ],
                    "default": "Pending"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PermissionSmall"
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "required": [
                            "roleName",
                            "remove"
                        ],
                        "properties": {
                            "roleName": {
                                "type": "string",
                                "example": "externaladministrator"
                            },
                            "remove": {
                                "type": "boolean",
                                "example": false
                            }
                        }
                    }
                }
            }
        },
        "CreateUserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/User"
                },
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "Credentials": {
            "type": "object",
            "properties": {
                "authorize": {
                    "type": "boolean"
                },
                "credentials": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string",
                            "example": "1e6c6d8e-af30-43ca-a519-395734701eba"
                        },
                        "sessionUid": {
                            "type": "string",
                            "example": "1e6c6d8e-af30-43ca-a519-395734701eba"
                        },
                        "type": {
                            "type": "string",
                            "example": "User"
                        },
                        "userName": {
                            "type": "string"
                        },
                        "firstName": {
                            "type": "string"
                        },
                        "lastName": {
                            "type": "string"
                        },
                        "email": {
                            "type": "string"
                        },
                        "status": {
                            "type": "string",
                            "example": "Active"
                        },
                        "exp": {
                            "type": "string"
                        },
                        "iss": {
                            "type": "string"
                        },
                        "jti": {
                            "type": "string",
                            "example": "1e6c6d8e-af30-43ca-a519-395734701eba"
                        },
                        "organizations": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/OrganizationSmall"
                            }
                        },
                        "roles": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Role"
                            }
                        }
                    }
                },
                "organization": {
                    "$ref": "#/definitions/GetOrganizationByIdResponse"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "ForgotPasswordRequest": {
            "required": [
                "credential"
            ],
            "type": "object",
            "properties": {
                "credential": {
                    "type": "string",
                    "example": "admin@nrccua.org"
                }
            }
        },
        "ResetPasswordRequest": {
            "type": "object",
            "required": [
                "newPassword"
            ],
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "eabac226-5706-4e7c-812c-00b19e2ddf4b"
                },
                "email": {
                    "type": "string",
                    "example": "admin@nrccua.org"
                },
                "newPassword": {
                    "type": "string",
                    "example": "admin"
                },
                "verificationCode": {
                    "type": "string",
                    "example": "$2a$10$asynLtrxxuZXFgKSYf4Bae.4D8Mm6aG/m/nqORbiByEVpqndy3coi"
                }
            }
        },
        "ActivateUserRequest": {
            "type": "object",
            "required": [
                "verificationCode",
                "userName",
                "password"
            ],
            "properties": {
                "verificationCode": {
                    "type": "string",
                    "example": "$2a$10$asynLtrxxuZXFgKSYf4Bae.4D8Mm6aG/m/nqORbiByEVpqndy3coi"
                },
                "userName": {
                    "type": "string",
                    "example": "admin"
                },
                "password": {
                    "type": "string",
                    "example": "p455w0rd"
                },
                "acceptedTerms": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "Role": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "bf45a23c-b527-4c5d-b7b8-60250339d265"
                },
                "roleName": {
                    "type": "string",
                    "example": "Administrator"
                }
            }
        },
        "OrganizationSmall": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "2e6dba3f-4916-469d-bb6e-01d2c67b2211"
                },
                "name": {
                    "type": "string",
                    "example": "Sample University"
                },
                "fice": {
                    "type": "string",
                    "example": "SAMPLE"
                },
                "stateCode": {
                    "type": "string",
                    "example": "MO"
                }
            }
        },
        "OrganizationReallySmall": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "2e6dba3f-4916-469d-bb6e-01d2c67b2211"
                },
                "name": {
                    "type": "string",
                    "example": "Sample University"
                }
            }
        },
        "CollegeProfile": {
            "type": "object",
            "properties": {
                "mcoId": {
                    "type": "string",
                    "example": "1234"
                },
                "fice": {
                    "type": "string",
                    "example": "003754"
                },
                "name": {
                    "type": "string",
                    "example": "Sample University"
                },
                "country": {
                    "type": "string",
                    "example": "US"
                },
                "city": {
                    "type": "string",
                    "example": "Portland"
                },
                "state": {
                    "type": "string",
                    "example": "OR"
                },
                "address": {
                    "type": "string",
                    "example": "123 Any Street"
                },
                "zip": {
                    "type": "string",
                    "example": "12345"
                },
                "geoPin": {
                    "type": "boolean",
                    "example": true
                },
                "lastUpdatedAt": {
                    "type": "string",
                    "example": "2021-03-02T15:27:11.280000"
                },
                "likes": {
                    "type": "number",
                    "example": 3355
                },
                "myOptionsUrl": {
                    "type": "string",
                    "example": "www.mco.com/sampleuni"
                },
                "generalInformation": {
                    "type": "object",
                    "properties": {
                        "control": {
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string",
                                    "example": "Private"
                                },
                                "label": {
                                    "type": "string",
                                    "example": "Private (Non-Profit)"
                                }
                            }
                        },
                        "yearLevel": {
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string",
                                    "example": "4-year"
                                },
                                "label": {
                                    "type": "string",
                                    "example": "4 years or more"
                                }
                            }
                        },
                        "campusSetting": {
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string",
                                    "example": "Large City"
                                },
                                "label": {
                                    "type": "string",
                                    "example": "Large City (population of 250,000 or more)"
                                }
                            }
                        },
                        "collegePreferences": {
                            "type": "string",
                            "example": "Co-ed College"
                        },
                        "religiousAffiliation": {
                            "type": "string",
                            "example": "Lutheran Church"
                        },
                        "historicallyBlackCollege": {
                            "type": "boolean",
                            "example": false
                        },
                        "tribalCollege": {
                            "type": "boolean",
                            "example": false
                        },
                        "hispanicCollege": {
                            "type": "boolean",
                            "example": true
                        }
                    }
                },
                "webPresence": {
                    "type": "object",
                    "properties": {
                        "webAddress": {
                            "type": "string",
                            "example": "https://www.sampleuni.edu"
                        },
                        "facebookAccount": {
                            "type": "string",
                            "example": "https://www.facebook.com/sampleuni"
                        },
                        "twitterAccount": {
                            "type": "string",
                            "example": "https://www.twitter.com/sampleuni"
                        },
                        "instagramAccount": {
                            "type": "string",
                            "example": "https://instagram.com/sampleuni"
                        },
                        "youtubeChannel": {
                            "type": "string",
                            "example": "https://youtube.com/sampleuni"
                        }
                    }
                },
                "media": {
                    "type": "object",
                    "properties": {
                        "generalInfoVideo": {
                            "type": "string",
                            "example": "https://youtube.com/watch?v=abcdKiek"
                        },
                        "campusTourVideo": {
                            "type": "string",
                            "example": "https://www.vimeo.com/watch?v=abAZ34cdKCGF"
                        },
                        "backgroundImage": {
                            "type": "string",
                            "example": "https://media.myoptions.org/production/schools/images/597_16x9_2048.jpg"
                        },
                        "mobileImage": {
                            "type": "string",
                            "example": "https://media.myoptions.org/production/schools/images/597_1x1_2048.jpg"
                        },
                        "logoImage": {
                            "type": "string",
                            "example": "https://media.myoptions.org/production/schools/logos/597.png"
                        }
                    }
                },
                "studentExperience": {
                    "type": "object",
                    "properties": {
                        "studentBodyBreakdown": {
                            "type": "object",
                            "properties": {
                                "africanAmerican": {
                                    "type": "object",
                                    "properties": {
                                        "male": {
                                            "type": "number",
                                            "example": 10
                                        },
                                        "female": {
                                            "type": "number",
                                            "example": 25
                                        }
                                    }
                                },
                                "americanIndian": {
                                    "type": "object",
                                    "properties": {
                                        "male": {
                                            "type": "number",
                                            "example": 8
                                        },
                                        "female": {
                                            "type": "number",
                                            "example": 7
                                        }
                                    }
                                },
                                "asian": {
                                    "type": "object",
                                    "properties": {
                                        "male": {
                                            "type": "number",
                                            "example": 36
                                        },
                                        "female": {
                                            "type": "number",
                                            "example": 45
                                        }
                                    }
                                },
                                "caucasian": {
                                    "type": "object",
                                    "properties": {
                                        "male": {
                                            "type": "number",
                                            "example": 50
                                        },
                                        "female": {
                                            "type": "number",
                                            "example": 56
                                        }
                                    }
                                },
                                "hispanic": {
                                    "type": "object",
                                    "properties": {
                                        "male": {
                                            "type": "number",
                                            "example": 12
                                        },
                                        "female": {
                                            "type": "number",
                                            "example": 8
                                        }
                                    }
                                },
                                "other": {
                                    "type": "object",
                                    "properties": {
                                        "male": {
                                            "type": "number",
                                            "example": 1
                                        },
                                        "female": {
                                            "type": "number",
                                            "example": 2
                                        }
                                    }
                                },
                                "inStateStudents": {
                                    "type": "number",
                                    "example": 298
                                },
                                "outOfStateStudents": {
                                    "type": "number",
                                    "example": 160
                                }
                            }
                        },
                        "retention": {
                            "type": "object",
                            "properties": {
                                "studentsGraduated": {
                                    "type": "number",
                                    "example": 80
                                },
                                "studentsReturned": {
                                    "type": "number",
                                    "example": 99
                                }
                            }
                        },
                        "campusRules": {
                            "type": "object",
                            "properties": {
                                "alcoholPermitted": {
                                    "type": "boolean",
                                    "example": false
                                },
                                "allCarsPermitted": {
                                    "type": "boolean",
                                    "example": true
                                }
                            }
                        },
                        "housing": {
                            "type": "object",
                            "properties": {
                                "campusHousingAvailable": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "firstYearStudentsInCampusHousing": {
                                    "type": "number",
                                    "example": 70
                                },
                                "studentLivingOffCampus": {
                                    "type": "number",
                                    "example": 40
                                },
                                "housingTypesAvailable": {
                                    "type": "object",
                                    "properties": {
                                        "coedDorms": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "womensDorms": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "mensDorms": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "sororityHouse": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "fraternityHouse": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "singleStudentApartments": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "marriedStudentApartments": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "specialHousingForDisabled": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "specialHousingForInternational": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "cooperativeHousing": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "other": {
                                            "type": "boolean",
                                            "example": false
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "studentCostAndAid": {
                    "type": "object",
                    "properties": {
                        "annualTuitionFees": {
                            "type": "object",
                            "properties": {
                                "tuitionInState": {
                                    "type": "number",
                                    "example": 30580
                                },
                                "tuitionOutState": {
                                    "type": "number",
                                    "example": 30580
                                },
                                "estimatedFees": {
                                    "type": "number",
                                    "example": 29000
                                },
                                "roomBoard": {
                                    "type": "number",
                                    "example": 9670
                                }
                            }
                        },
                        "netPrice": {
                            "type": "object",
                            "properties": {
                                "averageNetPrice": {
                                    "type": "number",
                                    "example": 0
                                },
                                "bellowThirty": {
                                    "type": "number",
                                    "example": 19674
                                },
                                "bellowFifty": {
                                    "type": "number",
                                    "example": 21856
                                },
                                "bellowSeventy": {
                                    "type": "number",
                                    "example": 22345
                                },
                                "bellowHundred": {
                                    "type": "number",
                                    "example": 26578
                                },
                                "aboveHundred": {
                                    "type": "number",
                                    "example": 27849
                                }
                            }
                        },
                        "financialAid": {
                            "type": "object",
                            "properties": {
                                "averageFinancialAid": {
                                    "type": "number",
                                    "example": 0
                                },
                                "averageStudentDebt": {
                                    "type": "number",
                                    "example": 5394
                                },
                                "federalWorkAvailable": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "firstYearStudentsReceivingNeedAid": {
                                    "type": "number",
                                    "example": 5
                                },
                                "firstYearStudentsReceivingMeritAid": {
                                    "type": "number",
                                    "example": 18
                                }
                            }
                        }
                    }
                },
                "admissions": {
                    "type": "object",
                    "properties": {
                        "admissionGeneralInfo": {
                            "type": "object",
                            "properties": {
                                "admissionsPhone": {
                                    "type": "string",
                                    "example": "212-500-1000"
                                },
                                "financialAidPhone": {
                                    "type": "string",
                                    "example": "212-500-2000"
                                },
                                "admissionsEmail": {
                                    "type": "string",
                                    "example": "admissions@sampleuni.edu"
                                },
                                "financialAidEmail": {
                                    "type": "string",
                                    "example": "financialaid@sampleuni.edu"
                                },
                                "studentRatio": {
                                    "type": "number",
                                    "example": 17
                                },
                                "averageGpa": {
                                    "type": "number",
                                    "example": 3.35
                                },
                                "averageClassRank": {
                                    "type": "string",
                                    "example": "A"
                                },
                                "incomingFreshmen": {
                                    "type": "number",
                                    "example": 5234
                                }
                            }
                        },
                        "applicationInfo": {
                            "type": "object",
                            "properties": {
                                "applicationDeadline": {
                                    "type": "object",
                                    "properties": {
                                        "month": {
                                            "type": "string",
                                            "example": "July"
                                        },
                                        "day": {
                                            "type": "string",
                                            "example": "12"
                                        }
                                    }
                                },
                                "applicationFee": {
                                    "type": "number",
                                    "example": 0
                                },
                                "applicationsReceived": {
                                    "type": "number",
                                    "example": 1226
                                },
                                "applicationsAccepted": {
                                    "type": "number",
                                    "example": 712
                                },
                                "applicationsEnrolled": {
                                    "type": "number",
                                    "example": 228
                                },
                                "earlyActionOffered": {
                                    "type": "object",
                                    "properties": {
                                        "active": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "deadline": {
                                            "type": "object",
                                            "properties": {
                                                "month": {
                                                    "type": "string",
                                                    "example": "June"
                                                },
                                                "day": {
                                                    "type": "string",
                                                    "example": "10"
                                                }
                                            }
                                        }
                                    }
                                },
                                "earlyDecisionOffered": {
                                    "type": "object",
                                    "properties": {
                                        "active": {
                                            "type": "boolean",
                                            "example": true
                                        },
                                        "deadline": {
                                            "type": "object",
                                            "properties": {
                                                "month": {
                                                    "type": "string",
                                                    "example": "July"
                                                },
                                                "day": {
                                                    "type": "string",
                                                    "example": "13"
                                                }
                                            }
                                        }
                                    }
                                },
                                "commonApplicationAccepted": {
                                    "type": "object",
                                    "properties": {
                                        "active": {
                                            "type": "boolean",
                                            "example": false
                                        },
                                        "deadline": {
                                            "type": "object",
                                            "properties": {
                                                "month": {
                                                    "type": "string",
                                                    "example": "August"
                                                },
                                                "day": {
                                                    "type": "string",
                                                    "example": "22"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "applicationRequirements": {
                            "type": "object",
                            "properties": {
                                "officialTranscript": {
                                    "type": "string",
                                    "enum": [
                                        "Required",
                                        "Recommended",
                                        "Required Conditionally",
                                        "Neither Required nor Recommended",
                                        "Considered but not Required",
                                        "Not Applicable",
                                        "Not Used"
                                    ],
                                    "example": "Required"
                                },
                                "letterOfRecommendation": {
                                    "type": "string",
                                    "enum": [
                                        "Required",
                                        "Recommended",
                                        "Required Conditionally",
                                        "Neither Required nor Recommended",
                                        "Considered but not Required",
                                        "Not Applicable",
                                        "Not Used"
                                    ],
                                    "example": "Recommended"
                                },
                                "counselorRecommendation": {
                                    "type": "string",
                                    "enum": [
                                        "Required",
                                        "Recommended",
                                        "Required Conditionally",
                                        "Neither Required nor Recommended",
                                        "Considered but not Required",
                                        "Not Applicable",
                                        "Not Used"
                                    ],
                                    "example": "Neither Required nor Recommended"
                                },
                                "portfolioOrAudition": {
                                    "type": "string",
                                    "enum": [
                                        "Required",
                                        "Recommended",
                                        "Required Conditionally",
                                        "Neither Required nor Recommended",
                                        "Considered but not Required",
                                        "Not Applicable",
                                        "Not Used"
                                    ],
                                    "example": "Considered but not Required"
                                },
                                "admissionTestScores": {
                                    "type": "string",
                                    "enum": [
                                        "Required",
                                        "Recommended",
                                        "Required Conditionally",
                                        "Neither Required nor Recommended",
                                        "Considered but not Required",
                                        "Not Applicable",
                                        "Not Used"
                                    ],
                                    "example": "Recommended"
                                },
                                "admissionInterview": {
                                    "type": "string",
                                    "enum": [
                                        "Required",
                                        "Recommended",
                                        "Required Conditionally",
                                        "Neither Required nor Recommended",
                                        "Considered but not Required",
                                        "Not Applicable",
                                        "Not Used"
                                    ],
                                    "example": "Neither Required nor Recommended"
                                },
                                "highSchoolProfile": {
                                    "type": "string",
                                    "enum": [
                                        "Required",
                                        "Recommended",
                                        "Required Conditionally",
                                        "Neither Required nor Recommended",
                                        "Considered but not Required",
                                        "Not Applicable",
                                        "Not Used"
                                    ],
                                    "example": "Considered but not Required"
                                },
                                "personalStatement": {
                                    "type": "string",
                                    "enum": [
                                        "Required",
                                        "Recommended",
                                        "Required Conditionally",
                                        "Neither Required nor Recommended",
                                        "Considered but not Required",
                                        "Not Applicable",
                                        "Not Used"
                                    ],
                                    "example": "Required"
                                },
                                "studentResume": {
                                    "type": "string",
                                    "enum": [
                                        "Required",
                                        "Recommended",
                                        "Required Conditionally",
                                        "Neither Required nor Recommended",
                                        "Considered but not Required",
                                        "Not Applicable",
                                        "Not Used"
                                    ],
                                    "example": "Recommended"
                                }
                            }
                        },
                        "testScoreRange": {
                            "type": "object",
                            "properties": {
                                "actCompositeScoreRange": {
                                    "type": "object",
                                    "properties": {
                                        "min": {
                                            "type": "number",
                                            "example": 18
                                        },
                                        "max": {
                                            "type": "number",
                                            "example": 25
                                        }
                                    }
                                },
                                "satRange": {
                                    "type": "object",
                                    "properties": {
                                        "min": {
                                            "type": "number",
                                            "example": 900
                                        },
                                        "max": {
                                            "type": "number",
                                            "example": 1180
                                        }
                                    }
                                }
                            }
                        },
                        "actSatTestUsePolicy": {
                            "type": "object",
                            "properties": {
                                "admissionReview": {
                                    "type": "string",
                                    "enum": [
                                        "Test Required",
                                        "Test Recommended",
                                        "Test Optional",
                                        "Test Blind",
                                        "Test Flexible",
                                        "Test Conditional"
                                    ],
                                    "example": "Test Required"
                                },
                                "homeschoolStudentAdmissionReview": {
                                    "type": "string",
                                    "enum": [
                                        "Test Required",
                                        "Test Recommended",
                                        "Test Optional",
                                        "Test Blind",
                                        "Test Flexible",
                                        "Test Conditional"
                                    ],
                                    "example": "Test Recommended"
                                },
                                "financialAidConsideration": {
                                    "type": "string",
                                    "enum": [
                                        "Test Required",
                                        "Test Recommended",
                                        "Test Optional",
                                        "Test Blind",
                                        "Test Flexible",
                                        "Test Conditional"
                                    ],
                                    "example": "Test Flexible"
                                },
                                "testsUsedInOtherProcess": {
                                    "type": "boolean",
                                    "example": true
                                }
                            }
                        }
                    }
                },
                "majorFamilies": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "title": {
                                "type": "string",
                                "example": "Engineering"
                            },
                            "majors": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "title": {
                                            "type": "string",
                                            "example": "Ocean Engineering"
                                        },
                                        "degreeCount": {
                                            "type": "number",
                                            "example": 10
                                        },
                                        "majorCode": {
                                            "type": "string",
                                            "example": "14.2401"
                                        },
                                        "categoryCode": {
                                            "type": "string",
                                            "example": "14.24"
                                        },
                                        "isOffered": {
                                            "type": "boolean",
                                            "example": true
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "specialPrograms": {
                    "type": "object",
                    "properties": {
                        "specialStudyPrograms": {
                            "type": "object",
                            "properties": {
                                "distanceLearning": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "studyAbroad": {
                                    "type": "boolean",
                                    "example": false
                                },
                                "weekendClasses": {
                                    "type": "boolean",
                                    "example": true
                                }
                            }
                        },
                        "rotcPrograms": {
                            "type": "object",
                            "properties": {
                                "army": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "navy": {
                                    "type": "boolean",
                                    "example": false
                                },
                                "airForce": {
                                    "type": "boolean",
                                    "example": true
                                }
                            }
                        }
                    }
                },
                "transfers": {
                    "type": "object",
                    "properties": {
                        "transfers": {
                            "type": "object",
                            "properties": {
                                "friendly": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "percent": {
                                    "type": "number",
                                    "example": 40
                                }
                            }
                        },
                        "transferGeneralInfo": {
                            "type": "object",
                            "properties": {
                                "termsAvailable": {
                                    "type": "string",
                                    "example": "Fall, Spring, Summer"
                                },
                                "examsAcceptedForCreditTransfer": {
                                    "type": "string",
                                    "example": "Yes"
                                },
                                "acceptsTransferCredit": {
                                    "type": "string",
                                    "example": "Up to 56 credits may transfer"
                                },
                                "enrolledTransferStudents": {
                                    "type": "number",
                                    "example": 1098
                                },
                                "minimumCreditsToBachelors": {
                                    "type": "number",
                                    "example": 120
                                }
                            }
                        },
                        "transferAdmissionsProcess": {
                            "type": "object",
                            "properties": {
                                "transferFinancialAid": {
                                    "type": "string",
                                    "example": "http://sampleuni.edu/transferfinancialaid"
                                },
                                "onlineApplication": {
                                    "type": "string",
                                    "example": "http://sampleuni.edu/onlineapplication"
                                },
                                "applicationFee": {
                                    "type": "number",
                                    "example": 100
                                },
                                "applicationRequirements": {
                                    "type": "string",
                                    "example": "http://sampleuni.edu/onlineapplication/faq"
                                },
                                "applicationDeadlines": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "label": {
                                                "type": "string",
                                                "example": "Summer"
                                            },
                                            "deadline": {
                                                "type": "object",
                                                "properties": {
                                                    "month": {
                                                        "type": "string",
                                                        "example": "June"
                                                    },
                                                    "day": {
                                                        "type": "string",
                                                        "example": "10"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "transferAdvisorContactInfo": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "example": "Amy Turner"
                                },
                                "title": {
                                    "type": "string",
                                    "example": "Transfer Advisor"
                                },
                                "email": {
                                    "type": "string",
                                    "example": "amy.turner@sampleuni.edu"
                                },
                                "directPhone": {
                                    "type": "string",
                                    "example": "329-111-1717"
                                },
                                "contactUs": {
                                    "type": "string",
                                    "example": "http://sampleuni.edu/contact/us"
                                }
                            }
                        },
                        "transferRequirements": {
                            "type": "object",
                            "properties": {
                                "requirementsAndPolicies": {
                                    "type": "string",
                                    "example": "http://sampleuni.edu/transferpolicies"
                                },
                                "minimumCreditsToTransfer": {
                                    "type": "number",
                                    "example": 45
                                },
                                "overview": {
                                    "type": "string",
                                    "example": "A very long text"
                                }
                            }
                        },
                        "articulationAgreements": {
                            "type": "object",
                            "properties": {
                                "agreements": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "example": "Some other cool college"
                                            },
                                            "url": {
                                                "type": "string",
                                                "example": "http://someothercoolcollege.edu"
                                            }
                                        }
                                    }
                                },
                                "advices": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "example": {
                "mcoId": "1234",
                "fice": "003754",
                "name": "Sample University",
                "country": "US",
                "city": "Portland",
                "state": "OR",
                "address": "123 Any Street",
                "zip": "12345",
                "geoPin": true,
                "lastUpdatedAt": "2021-03-02T15:27:11.280000",
                "likes": 3355,
                "myOptionsUrl": "www.mco.com/sampleuni",
                "generalInformation": {
                    "control": {
                        "key": "Private",
                        "label": "Private (Non-Profit)"
                    },
                    "yearLevel": {
                        "key": "4-year",
                        "label": "4 years or more"
                    },
                    "campusSetting": {
                        "key": "Large City",
                        "label": "Large City (population of 250,000 or more)"
                    },
                    "collegePreferences": "Co-ed College",
                    "religiousAffiliation": "Lutheran Church",
                    "historicallyBlackCollege": false,
                    "tribalCollege": false,
                    "hispanicCollege": true
                },
                "webPresence": {
                    "webAddress": "https://www.sampleuni.edu",
                    "facebookAccount": "https://www.facebook.com/sampleuni",
                    "twitterAccount": "https://www.twitter.com/sampleuni",
                    "instagramAccount": "https://instagram.com/sampleuni",
                    "youtubeChannel": "https://youtube.com/sampleuni"
                },
                "media": {
                    "generalInfoVideo": "https://youtube.com/watch?v=abcdKiek",
                    "campusTourVideo": "https://www.vimeo.com/watch?v=abAZ34cdKCGF",
                    "backgroundImage": "https://media.myoptions.org/production/schools/images/597_16x9_2048.jpg",
                    "mobileImage": "https://media.myoptions.org/production/schools/images/597_1x1_2048.jpg",
                    "logoImage": "https://media.myoptions.org/production/schools/logos/597.png"
                },
                "studentExperience": {
                    "studentBodyBreakdown": {
                        "africanAmerican": {
                            "male": 10,
                            "female": 25
                        },
                        "americanIndian": {
                            "male": 8,
                            "female": 7
                        },
                        "asian": {
                            "male": 36,
                            "female": 45
                        },
                        "caucasian": {
                            "male": 50,
                            "female": 56
                        },
                        "hispanic": {
                            "male": 12,
                            "female": 8
                        },
                        "other": {
                            "male": 1,
                            "female": 2
                        },
                        "inStateStudents": 298,
                        "outOfStateStudents": 160
                    },
                    "retention": {
                        "studentsGraduated": 80,
                        "studentsReturned": 99
                    },
                    "campusRules": {
                        "alcoholPermitted": false,
                        "allCarsPermitted": true
                    },
                    "housing": {
                        "campusHousingAvailable": true,
                        "firstYearStudentsInCampusHousing": 70,
                        "studentLivingOffCampus": 40,
                        "housingTypesAvailable": {
                            "coedDorms": true,
                            "womensDorms": true,
                            "mensDorms": false,
                            "sororityHouse": false,
                            "fraternityHouse": false,
                            "singleStudentApartments": true,
                            "marriedStudentApartments": true,
                            "specialHousingForDisabled": false,
                            "specialHousingForInternational": true,
                            "cooperativeHousing": true,
                            "other": false
                        }
                    }
                },
                "studentCostAndAid": {
                    "annualTuitionFees": {
                        "tuitionInState": 30580,
                        "tuitionOutState": 30580,
                        "estimatedFees": 29000,
                        "roomBoard": 9670
                    },
                    "netPrice": {
                        "averageNetPrice": 0,
                        "bellowThirty": 19674,
                        "bellowFifty": 21856,
                        "bellowSeventy": 22345,
                        "bellowHundred": 26578,
                        "aboveHundred": 27849
                    },
                    "financialAid": {
                        "averageFinancialAid": 0,
                        "averageStudentDebt": 5394,
                        "federalWorkAvailable": true,
                        "firstYearStudentsReceivingNeedAid": 5,
                        "firstYearStudentsReceivingMeritAid": 18
                    }
                },
                "admissions": {
                    "admissionGeneralInfo": {
                        "admissionsPhone": "212-500-1000",
                        "financialAidPhone": "212-500-2000",
                        "admissionsEmail": "admissions@sampleuni.edu",
                        "financialAidEmail": "financialaid@sampleuni.edu",
                        "studentRatio": 17,
                        "averageGpa": 3.35,
                        "averageClassRank": "A",
                        "incomingFreshmen": 5234
                    },
                    "applicationInfo": {
                        "applicationDeadline": {
                            "month": "July",
                            "day": "12"
                        },
                        "applicationFee": 0,
                        "applicationsReceived": 1226,
                        "applicationsAccepted": 712,
                        "applicationsEnrolled": 228,
                        "earlyActionOffered": {
                            "active": true,
                            "deadline": {
                                "month": "June",
                                "day": "10"
                            }
                        },
                        "earlyDecisionOffered": {
                            "active": true,
                            "deadline": {
                                "month": "July",
                                "day": "13"
                            }
                        },
                        "commonApplicationAccepted": {
                            "active": false,
                            "deadline": {
                                "month": "August",
                                "day": "22"
                            }
                        }
                    },
                    "applicationRequirements": {
                        "officialTranscript": "Required",
                        "letterOfRecommendation": "Recommended",
                        "counselorRecommendation": "Neither Required nor Recommended",
                        "portfolioOrAudition": "Considered but not Required",
                        "admissionTestScores": "Recommended",
                        "admissionInterview": "Neither Required nor Recommended",
                        "highSchoolProfile": "Considered but not Required",
                        "personalStatement": "Required",
                        "studentResume": "Recommended"
                    },
                    "testScoreRange": {
                        "actCompositeScoreRange": {
                            "min": 18,
                            "max": 25
                        },
                        "satRange": {
                            "min": 900,
                            "max": 1180
                        }
                    },
                    "actSatTestUsePolicy": {
                        "admissionReview": "Test Required",
                        "homeschoolStudentAdmissionReview": "Test Recommended",
                        "financialAidConsideration": "Test Flexible",
                        "testsUsedInOtherProcess": true
                    }
                },
                "majorFamilies": [
                    {
                        "title": "Engineering",
                        "majors": [
                            {
                                "title": "Ocean Engineering",
                                "degreeCount": 10,
                                "majorCode": "14.2401",
                                "categoryCode": "14.24",
                                "isOffered": true
                            }
                        ]
                    }
                ],
                "specialPrograms": {
                    "specialStudyPrograms": {
                        "distanceLearning": true,
                        "studyAbroad": false,
                        "weekendClasses": true
                    },
                    "rotcPrograms": {
                        "army": true,
                        "navy": false,
                        "airForce": true
                    }
                },
                "transfers": {
                    "transfers": {
                        "friendly": true,
                        "percent": 40
                    },
                    "transferGeneralInfo": {
                        "termsAvailable": "Fall, Spring, Summer",
                        "examsAcceptedForCreditTransfer": "Yes",
                        "acceptsTransferCredit": "Up to 56 credits may transfer",
                        "enrolledTransferStudents": 1098,
                        "minimumCreditsToBachelors": 120
                    },
                    "transferAdmissionsProcess": {
                        "transferFinancialAid": "http://sampleuni.edu/transferfinancialaid",
                        "onlineApplication": "http://sampleuni.edu/onlineapplication",
                        "applicationFee": 100,
                        "applicationRequirements": "http://sampleuni.edu/onlineapplication/faq",
                        "applicationDeadlines": [
                            {
                                "label": "Summer",
                                "deadline": {
                                    "month": "June",
                                    "day": "10"
                                }
                            }
                        ]
                    },
                    "transferAdvisorContactInfo": {
                        "name": "Amy Turner",
                        "title": "Transfer Advisor",
                        "email": "amy.turner@sampleuni.edu",
                        "directPhone": "329-111-1717",
                        "contactUs": "http://sampleuni.edu/contact/us"
                    },
                    "transferRequirements": {
                        "requirementsAndPolicies": "http://sampleuni.edu/transferpolicies",
                        "minimumCreditsToTransfer": 45,
                        "overview": "A very long text"
                    },
                    "articulationAgreements": {
                        "agreements": [
                            {
                                "name": "Some other cool college",
                                "url": "http://someothercoolcollege.edu"
                            }
                        ],
                        "advices": []
                    }
                }
            }
        },
        "ProgramSmall": {
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "example": "tempore"
                }
            }
        },
        "PermissionSmall": {
            "type": "object",
            "required": [
                "moduleKey"
            ],
            "properties": {
                "moduleKey": {
                    "type": "string",
                    "example": "datalab.engagementanalytics.marketingconversion"
                },
                "permissionOverwrite": {
                    "type": "boolean",
                    "example": true
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "ModuleSmall": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "permission": {
                    "type": "boolean"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "ApplicationSmall": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "44bc5658-e923-4c0b-9400-c638eabef494"
                },
                "key": {
                    "type": "string",
                    "example": "Data Lab"
                },
                "modules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ModuleSmall"
                    }
                },
                "status": {
                    "type": "string",
                    "example": "Active"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "UpdateOrganizationRequest": {
            "type": "object",
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PermissionSmall"
                    }
                }
            }
        },
        "AuthenticationResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/User"
                },
                "sessionToken": {
                    "type": "string"
                }
            }
        },
        "PasswordResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/User"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "ImpersonateResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/User"
                },
                "impersonatingUser": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string",
                            "example": "eabac226-5706-4e7c-812c-00b19e2ddf4b"
                        },
                        "firstName": {
                            "type": "string",
                            "example": "Administrator"
                        },
                        "lastName": {
                            "type": "string",
                            "example": "Administrator"
                        },
                        "userName": {
                            "type": "string",
                            "example": "admin"
                        }
                    }
                },
                "sessionToken": {
                    "type": "string"
                }
            }
        },
        "GetOrganizationByIdResponse": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "2e6dba3f-4916-469d-bb6e-01d2c67b2211"
                },
                "name": {
                    "type": "string",
                    "example": "Sample University"
                },
                "type": {
                    "type": "string",
                    "example": "Institution"
                },
                "fice": {
                    "type": "string",
                    "example": "000000"
                },
                "actCode": {
                    "type": "string",
                    "example": "9999"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Active",
                        "Inactive",
                        "Pending"
                    ],
                    "example": "Active"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-21T16:36:08.039Z"
                },
                "creator": {
                    "$ref": "#/definitions/Creator"
                },
                "parent": {
                    "type": "string",
                    "example": "Father Organization"
                },
                "application": {
                    "$ref": "#/definitions/ApplicationSmall"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                },
                "programs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProgramSmall"
                    }
                },
                "settings": {
                    "$ref": "#/definitions/OrganizationSettings"
                }
            }
        },
        "GetOrganizationsResponse": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "2e6dba3f-4916-469d-bb6e-01d2c67b2211"
                },
                "name": {
                    "type": "string",
                    "example": "Sample University"
                },
                "fice": {
                    "type": "string",
                    "example": "SAMPLE"
                },
                "stateCode": {
                    "type": "string",
                    "example": "MO"
                }
            }
        },
        "SearchRequest": {
            "type": "object",
            "required": [
                "title",
                "type"
            ],
            "properties": {
                "title": {
                    "type": "string",
                    "example": "My Custom Search"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Prospect",
                        "Legacy",
                        "Declared",
                        "Ematch"
                    ]
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Active",
                        "Disabled",
                        "Temporary"
                    ]
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Tag 1"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterObject"
                    }
                },
                "rules": {
                    "$ref": "#/definitions/RulesObject"
                },
                "counts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CountObject"
                    }
                },
                "maxVolume": {
                    "type": "number",
                    "example": 100500
                },
                "classPlannerVersion": {
                    "type": "number",
                    "example": 1
                }
            }
        },
        "SearchResponse": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "1ad1c27d-d298-4e26-827d-c9e3369d3452"
                },
                "title": {
                    "type": "string",
                    "example": "My Custom Search"
                },
                "recommended": {
                    "type": "boolean",
                    "example": true
                },
                "estimate": {
                    "type": "boolean",
                    "example": false
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Prospect",
                        "Legacy",
                        "Declared",
                        "Ematch"
                    ],
                    "example": "Prospect"
                },
                "organizationUid": {
                    "type": "string",
                    "example": "c50d3be8-d15c-44b6-8310-91df948af6da"
                },
                "status": {
                    "type": "string",
                    "example": "Active"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Tag 1"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterObject"
                    }
                },
                "rules": {
                    "$ref": "#/definitions/RulesObject"
                },
                "counts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CountObject"
                    }
                },
                "modified": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ModifiedObject"
                    }
                },
                "created": {
                    "$ref": "#/definitions/CreatedObject"
                },
                "maxVolume": {
                    "type": "number",
                    "example": 100500
                },
                "classPlannerVersion": {
                    "type": "number",
                    "example": 1
                }
            }
        },
        "ListSearchResponse": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "1ad1c27d-d298-4e26-827d-c9e3369d3452"
                },
                "title": {
                    "type": "string",
                    "example": "My Custom Search"
                },
                "new": {
                    "type": "boolean",
                    "example": true
                },
                "recommended": {
                    "type": "boolean",
                    "example": true
                },
                "estimate": {
                    "type": "boolean",
                    "example": false
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Prospect",
                        "Legacy",
                        "Declared",
                        "Ematch"
                    ],
                    "example": "Prospect"
                },
                "organizationUid": {
                    "type": "string",
                    "example": "c50d3be8-d15c-44b6-8310-91df948af6da"
                },
                "status": {
                    "type": "string",
                    "example": "Active"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Tag 1"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterObject"
                    }
                },
                "rules": {
                    "$ref": "#/definitions/RulesObject"
                },
                "counts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CountObject"
                    }
                },
                "modified": {
                    "$ref": "#/definitions/ModifiedObject"
                },
                "created": {
                    "$ref": "#/definitions/CreatedObject"
                },
                "maxVolume": {
                    "type": "number",
                    "example": 100500
                },
                "classPlannerVersion": {
                    "type": "number",
                    "example": 1
                }
            }
        },
        "DeleteSearchResponse": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "1ad1c27d-d298-4e26-827d-c9e3369d3452"
                },
                "title": {
                    "type": "string",
                    "example": "My Custom Search"
                },
                "recommended": {
                    "type": "boolean",
                    "example": true
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Prospect",
                        "Legacy",
                        "Declared",
                        "Ematch"
                    ],
                    "example": "Prospect"
                },
                "organizationUid": {
                    "type": "string",
                    "example": "c50d3be8-d15c-44b6-8310-91df948af6da"
                },
                "status": {
                    "type": "string",
                    "example": "Disabled"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Tag 1"
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FilterObject"
                    }
                },
                "rules": {
                    "$ref": "#/definitions/RulesObject"
                },
                "counts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CountObject"
                    }
                },
                "modified": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ModifiedObject"
                    }
                },
                "created": {
                    "$ref": "#/definitions/CreatedObject"
                },
                "maxVolume": {
                    "type": "number",
                    "example": 100500
                },
                "classPlannerVersion": {
                    "type": "number",
                    "example": 1
                }
            }
        },
        "FilterObject": {
            "type": "object",
            "properties": {
                "filterUid": {
                    "type": "string",
                    "example": "49311c0d-bc80-4a54-bc6a-88e9c2b89aed"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string",
                                "example": "TN"
                            },
                            "displayName": {
                                "type": "string",
                                "example": "Tennessee (TN)"
                            },
                            "fips": {
                                "type": "string",
                                "example": "005"
                            }
                        }
                    }
                }
            }
        },
        "RuleObject": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "49311c0d-bc80-4a54-bc6a-88e9c2b89aed"
                },
                "field": {
                    "type": "string",
                    "example": "graduationYear"
                },
                "conjunction": {
                    "type": "string",
                    "enum": [
                        "AND",
                        "OR"
                    ],
                    "example": "AND"
                },
                "operator": {
                    "type": "string",
                    "enum": [
                        "includes",
                        "excludes",
                        "between",
                        "equals",
                        "unequals"
                    ],
                    "example": "includes"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "group",
                        "rule"
                    ],
                    "example": "rule"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": [
                            "HSGRAD2019"
                        ]
                    }
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "example": "Recursive..."
                    }
                }
            }
        },
        "RulesObject": {
            "type": "object",
            "description": "Rules can be an object that represents a filter or a group of rules.\nWhen rules is present in the request, only geo filters will be considered valid.\n",
            "properties": {
                "conjunction": {
                    "type": "string",
                    "enum": [
                        "AND",
                        "OR"
                    ],
                    "example": "AND"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "group",
                        "rule"
                    ],
                    "example": "group"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RuleObject"
                    }
                }
            }
        },
        "FilterPurchasedObject": {
            "type": "object",
            "properties": {
                "filterUid": {
                    "type": "string",
                    "example": "49311c0d-bc80-4a54-bc6a-88e9c2b89aed"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string",
                                "example": "HSGRAD2017"
                            },
                            "displayName": {
                                "type": "string",
                                "example": "California (CA)"
                            }
                        }
                    }
                }
            }
        },
        "SearchCountPurchasedObject": {
            "type": "object",
            "properties": {
                "purchasableCount": {
                    "type": "number",
                    "example": 1213412
                },
                "duplicateCount": {
                    "type": "number",
                    "example": 12323412
                },
                "preReleaseCount": {
                    "type": "number",
                    "example": 12323412
                },
                "alreadyPurchased": {
                    "type": "number",
                    "example": 12323412
                },
                "undiscoveredCount": {
                    "type": "number",
                    "example": 12323412
                },
                "dedupVolume": {
                    "type": "number",
                    "example": 1213412
                },
                "dedupFutureVolume": {
                    "type": "number",
                    "example": 12323412
                },
                "currentVolume": {
                    "type": "number",
                    "example": 12323412
                },
                "futureVolume": {
                    "type": "number",
                    "example": 12323412
                },
                "total": {
                    "type": "number",
                    "example": 3123123
                },
                "gradYears": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "gradYear": {
                                "type": "string",
                                "example": "2017"
                            },
                            "count": {
                                "type": "number",
                                "example": 3123
                            },
                            "futureCount": {
                                "type": "number",
                                "example": 5000
                            }
                        }
                    }
                }
            }
        },
        "CountObject": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "example": "texas"
                },
                "value": {
                    "type": "number",
                    "example": 10000
                }
            }
        },
        "ModifiedObject": {
            "type": "object",
            "properties": {
                "modifications": {
                    "type": "object"
                },
                "created": {
                    "$ref": "#/definitions/CreatedObject"
                }
            }
        },
        "CreatedObject": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "1ad1c27d-d298-4e26-827d-c9e3369d3452"
                },
                "name": {
                    "type": "string",
                    "example": "Jason Watson"
                },
                "timestamp": {
                    "type": "number",
                    "example": 1501684404478
                }
            }
        },
        "EcommerceModification": {
            "type": "object",
            "properties": {
                "modifiedBy": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string",
                            "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                        },
                        "name": {
                            "type": "string",
                            "example": "Son Goku"
                        }
                    }
                },
                "modification": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string",
                                "example": "something"
                            },
                            "value": {
                                "type": "object"
                            }
                        }
                    }
                },
                "modifiedAt": {
                    "type": "number",
                    "example": 1501684404478
                }
            }
        },
        "RunCountsRequest": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "example": "Prospect",
                    "enum": [
                        "Prospect",
                        "Legacy",
                        "Declared",
                        "Ematch"
                    ]
                },
                "overrideVersion": {
                    "type": "integer",
                    "example": 1
                },
                "aggregation": {
                    "type": "string",
                    "example": "gpa",
                    "enum": [
                        "state",
                        "zip",
                        "gpa",
                        "gender",
                        "gender, gpa",
                        "major",
                        "ethnicity",
                        "prepcourse",
                        "collegetype",
                        "socialenvironment",
                        "denomination"
                    ]
                },
                "selectedFilters": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "filterUid": {
                                "type": "string",
                                "example": "49311c0d-bc80-4a54-bc6a-88e9c2b89aed"
                            },
                            "options": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string",
                                            "example": "HSGRAD2017"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "rules": {
                    "$ref": "#/definitions/RulesObject"
                },
                "estimate": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "RunCountsResponse": {
            "type": "object",
            "properties": {
                "keys": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "field": {
                                "type": "string",
                                "example": "gpa"
                            },
                            "value": {
                                "type": "string",
                                "example": "GRADEAPLUS"
                            },
                            "display": {
                                "type": "string",
                                "example": "A+"
                            }
                        }
                    }
                },
                "count": {
                    "type": "string",
                    "example": "1203765"
                }
            }
        },
        "DeduplicationRequest": {
            "type": "object",
            "properties": {
                "dedupGroup": {
                    "type": "boolean",
                    "example": false
                },
                "dedupPrevious": {
                    "type": "boolean",
                    "example": false
                },
                "purchaseItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DedupItemRequest"
                    }
                }
            }
        },
        "DedupItemRequest": {
            "type": "object",
            "properties": {
                "searchPurchaseItem": {
                    "$ref": "#/definitions/DedupSearchItem"
                }
            }
        },
        "DedupSearchItem": {
            "type": "object",
            "properties": {
                "sortOrder": {
                    "type": "number",
                    "example": 1
                },
                "search": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string",
                            "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                        },
                        "recommended": {
                            "type": "boolean",
                            "example": true
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "Prospect",
                                "Legacy",
                                "Declared",
                                "Ematch"
                            ],
                            "example": "Prospect"
                        },
                        "title": {
                            "type": "string",
                            "example": "2018 Military"
                        },
                        "maxVolume": {
                            "type": "number",
                            "example": 5000
                        },
                        "classPlannerVersion": {
                            "type": "number",
                            "example": 1
                        },
                        "tags": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "example": "Tag 1"
                            }
                        },
                        "filters": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FilterPurchasedObject"
                            }
                        },
                        "rules": {
                            "$ref": "#/definitions/RulesObject"
                        }
                    }
                }
            }
        },
        "TagResponse": {
            "type": "object",
            "properties": {
                "label": {
                    "type": "string",
                    "example": "New Tag"
                },
                "organizationUid": {
                    "type": "string",
                    "example": "5e521c84-8968-48c4-9136-f68096cd8ca5"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Recommended",
                        "Saved",
                        "Both"
                    ]
                },
                "uid": {
                    "type": "string",
                    "example": "efbe83d2-bb2b-407f-b05f-bf6fad43c0c2"
                }
            }
        },
        "FilterRequest": {
            "type": "object",
            "properties": {
                "displayName": {
                    "type": "string",
                    "example": "GPA"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "range",
                        "list",
                        "singleSelect",
                        "bool"
                    ]
                },
                "searchTypes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "Prospect",
                            "Legacy",
                            "Declared",
                            "Ematch"
                        ]
                    }
                },
                "allowAll": {
                    "type": "boolean"
                },
                "top": {
                    "type": "boolean"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "display": {
                                "type": "string"
                            },
                            "defaultSelect": {
                                "type": "boolean"
                            }
                        }
                    }
                }
            }
        },
        "FilterResponse": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "130f8f6e-8c55-4720-8513-1ed9d68d7cb4"
                },
                "displayName": {
                    "type": "string",
                    "example": "GPA"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "range",
                        "list",
                        "singleSelect",
                        "bool"
                    ]
                },
                "searchTypes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "Prospect",
                            "Legacy",
                            "Declared",
                            "Ematch"
                        ]
                    }
                },
                "allowAll": {
                    "type": "boolean"
                },
                "top": {
                    "type": "boolean"
                },
                "filterType": {
                    "type": "string"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "display": {
                                "type": "string"
                            },
                            "defaultSelect": {
                                "type": "boolean"
                            }
                        }
                    }
                }
            }
        },
        "FilterOptionsResponse": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "example": "keyA"
                },
                "display": {
                    "type": "string",
                    "example": "valueA"
                },
                "defaultSelect": {
                    "type": "boolean"
                }
            }
        },
        "MappingRequest": {
            "type": "object",
            "properties": {
                "fieldName": {
                    "type": "string",
                    "example": "db field name"
                },
                "searchTypes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "Prospect",
                            "Legacy",
                            "Declared",
                            "Ematch"
                        ]
                    }
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "display": {
                                "type": "string"
                            },
                            "dbValue": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "MappingResponse": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "599217663a5eb4d1bdb31cd8"
                },
                "filterUid": {
                    "type": "string",
                    "example": "0ff3424d-878e-49dc-a0b0-dba0025c55bc"
                },
                "fieldName": {
                    "type": "string",
                    "example": "db field name"
                },
                "searchTypes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "Prospect",
                            "Legacy",
                            "Declared",
                            "Ematch"
                        ]
                    }
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "display": {
                                "type": "string"
                            },
                            "dbValue": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "SimpleMapping": {
            "type": "object",
            "properties": {
                "filterUid": {
                    "type": "string",
                    "example": "138afd98-31a4-4c0a-a7ec-34145eabb8eb"
                },
                "options": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string",
                                "example": "GRADELC"
                            },
                            "dbValue": {
                                "type": "string",
                                "example": "LC"
                            }
                        }
                    }
                }
            }
        },
        "ValidateRequest": {
            "type": "object",
            "properties": {
                "options": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "ValidateResponse": {
            "type": "object",
            "properties": {
                "valid": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string"
                            },
                            "displayName": {
                                "type": "string"
                            },
                            "fips": {
                                "type": "string"
                            }
                        }
                    }
                },
                "invalid": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "CartUpdateRequest": {
            "type": "object",
            "properties": {
                "purchaseGroups": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uid": {
                                "type": "string",
                                "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                            },
                            "name": {
                                "type": "string",
                                "example": "this is a search name"
                            }
                        }
                    }
                }
            }
        },
        "PurchaseGroupRequest": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                },
                "name": {
                    "type": "string",
                    "example": "Purchase Group Name"
                },
                "sfLineNumber": {
                    "type": "string",
                    "example": "ol-1024"
                },
                "sfOrderNum": {
                    "type": "string",
                    "example": "1551430800000"
                },
                "dedupGroup": {
                    "type": "boolean",
                    "example": false
                },
                "dedupPrevious": {
                    "type": "boolean",
                    "example": false
                },
                "creatingCounts": {
                    "type": "boolean",
                    "example": false
                },
                "purchaseItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PurchaseItemRequest"
                    }
                },
                "sfOrderLine": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SfOrderLineItem"
                    }
                },
                "sfFulfillmentLine": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SfFulfillmentLineItem"
                    }
                }
            }
        },
        "PurchaseItemRequest": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                },
                "product": {
                    "$ref": "#/definitions/SmallProduct"
                },
                "purchaseItemType": {
                    "type": "string",
                    "example": "current"
                },
                "futureLabel": {
                    "type": "string",
                    "example": "Jun 2019"
                },
                "quantity": {
                    "type": "number",
                    "example": 3
                },
                "discount": {
                    "type": "number",
                    "example": 0
                },
                "finalUnitCost": {
                    "type": "number",
                    "example": 10
                },
                "searchPurchaseItem": {
                    "$ref": "#/definitions/SearchPurchaseItem"
                },
                "fulfillmentHistory": {
                    "$ref": "#/definitions/FulfillmentHistory"
                }
            }
        },
        "CartFullResponse": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                },
                "organizationUid": {
                    "type": "string",
                    "example": "67cc9a6e-0caf-4e33-8ca4-87066747f81f"
                },
                "purchaseGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PurchaseGroup"
                    }
                },
                "orderSummary": {
                    "$ref": "#/definitions/OrderSummary"
                }
            }
        },
        "OrderSummary": {
            "type": "object",
            "properties": {
                "availablePoints": {
                    "type": "object",
                    "properties": {
                        "AOS": {
                            "type": "number",
                            "example": 0
                        },
                        "Declared": {
                            "type": "number",
                            "example": 0
                        },
                        "Inquiry": {
                            "type": "number",
                            "example": 0
                        },
                        "Prospect": {
                            "type": "number",
                            "example": 0
                        },
                        "Legacy": {
                            "type": "number",
                            "example": 0
                        },
                        "Ematch": {
                            "type": "number",
                            "example": 0
                        }
                    }
                },
                "paidPrice": {
                    "type": "object",
                    "properties": {
                        "AOS": {
                            "type": "number",
                            "example": 0
                        },
                        "Declared": {
                            "type": "number",
                            "example": 0
                        },
                        "Inquiry": {
                            "type": "number",
                            "example": 0
                        },
                        "Prospect": {
                            "type": "number",
                            "example": 0
                        },
                        "Legacy": {
                            "type": "number",
                            "example": 0
                        },
                        "Ematch": {
                            "type": "number",
                            "example": 0
                        }
                    }
                },
                "remainingUnpaidPrice": {
                    "type": "object",
                    "properties": {
                        "AOS": {
                            "type": "number",
                            "example": 0
                        },
                        "Declared": {
                            "type": "number",
                            "example": 0
                        },
                        "Inquiry": {
                            "type": "number",
                            "example": 0
                        },
                        "Prospect": {
                            "type": "number",
                            "example": 0
                        },
                        "Legacy": {
                            "type": "number",
                            "example": 0
                        },
                        "Ematch": {
                            "type": "number",
                            "example": 0
                        }
                    }
                },
                "remainingUnpaidQuantity": {
                    "type": "object",
                    "properties": {
                        "AOS": {
                            "type": "number",
                            "example": 0
                        },
                        "Declared": {
                            "type": "number",
                            "example": 0
                        },
                        "Inquiry": {
                            "type": "number",
                            "example": 0
                        },
                        "Prospect": {
                            "type": "number",
                            "example": 0
                        },
                        "Legacy": {
                            "type": "number",
                            "example": 0
                        },
                        "Ematch": {
                            "type": "number",
                            "example": 0
                        }
                    }
                },
                "remainingValue": {
                    "type": "number",
                    "example": 0
                },
                "searches": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "finalUnitCost": {
                                "type": "number",
                                "example": 0
                            },
                            "label": {
                                "type": "string",
                                "example": "Prospect Students"
                            },
                            "lists": {
                                "type": "number",
                                "example": 0
                            },
                            "totalQuantity": {
                                "type": "number",
                                "example": 0
                            },
                            "type": {
                                "type": "string",
                                "example": "Prospect"
                            },
                            "value": {
                                "type": "number",
                                "example": 3.15
                            },
                            "yearsSummary": {
                                "type": "object",
                                "properties": {
                                    "2019": {
                                        "type": "number",
                                        "example": 0
                                    },
                                    "2020": {
                                        "type": "number",
                                        "example": 0
                                    },
                                    "2021": {
                                        "type": "number",
                                        "example": 0
                                    },
                                    "2022": {
                                        "type": "number",
                                        "example": 0
                                    },
                                    "2023": {
                                        "type": "number",
                                        "example": 0
                                    },
                                    "2024": {
                                        "type": "number",
                                        "example": 0
                                    }
                                }
                            }
                        }
                    }
                },
                "totalQuantity": {
                    "type": "number",
                    "example": 0
                },
                "totalValue": {
                    "type": "number",
                    "example": 0
                }
            }
        },
        "FulfillmentHistory": {
            "type": "object",
            "properties": {
                "fulfillmentUid": {
                    "type": "string",
                    "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                },
                "date": {
                    "type": "number",
                    "example": 1606744196
                },
                "quantity": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 500
                },
                "listGenerated": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "SfOrderLineItem": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                },
                "sfLineNumber": {
                    "type": "string",
                    "example": "SF-1234567"
                },
                "productType": {
                    "type": "string",
                    "enum": [
                        "classplanner.legacy",
                        "classplanner.ematch",
                        "classplanner.inquiry",
                        "classplanner.declared",
                        "classplanner.prospects",
                        "classplanner.aos",
                        "score-reporter"
                    ],
                    "example": "classplanner.inquiry"
                },
                "committedVolume": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 500
                },
                "fulfilledVolume": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 500
                },
                "purchaseType": {
                    "type": "string",
                    "enum": [
                        "volume",
                        "invoice",
                        "undiscovered"
                    ],
                    "example": "volume"
                }
            }
        },
        "SfFulfillmentLineItem": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                },
                "sfFulfillmentNumber": {
                    "type": "string",
                    "example": "FI-1234567"
                },
                "productKey": {
                    "type": "string",
                    "enum": [
                        "classplanner.legacy",
                        "classplanner.ematch",
                        "classplanner.inquiry",
                        "classplanner.declared",
                        "classplanner.prospects",
                        "classplanner.aos",
                        "score-reporter"
                    ],
                    "example": "classplanner.prospects"
                },
                "quantity": {
                    "type": "integer",
                    "example": 570
                },
                "dateFulfilled": {
                    "type": "number",
                    "example": 1501684404478
                }
            }
        },
        "PurchaseGroup": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                },
                "organizationUid": {
                    "type": "string",
                    "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                },
                "sfLineNumber": {
                    "type": "string",
                    "example": "ol-1024"
                },
                "sfOrderNum": {
                    "type": "string",
                    "example": "1551430800000"
                },
                "name": {
                    "type": "string",
                    "example": "SAMPLE-123"
                },
                "dedupGroup": {
                    "type": "boolean",
                    "example": false
                },
                "dedupPrevious": {
                    "type": "boolean",
                    "example": false
                },
                "purchaseItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PurchaseItem"
                    }
                },
                "deleted": {
                    "type": "number",
                    "example": 1606744196
                },
                "costInPoints": {
                    "type": "number",
                    "example": 10020
                },
                "costInDollars": {
                    "type": "number",
                    "example": 1245.5
                },
                "isContinuous": {
                    "type": "boolean",
                    "example": false
                },
                "created": {
                    "$ref": "#/definitions/EcommerceCreated"
                },
                "sfOrderLine": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SfOrderLineItem"
                    }
                },
                "sfFulfillmentLine": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/SfFulfillmentLineItem"
                    }
                },
                "modificationHistory": {
                    "type": "object",
                    "properties": {
                        "modifications": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EcommerceModification"
                            }
                        }
                    }
                }
            }
        },
        "PurchaseItem": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                },
                "product": {
                    "$ref": "#/definitions/SmallProduct"
                },
                "purchaseItemType": {
                    "type": "string",
                    "example": "current"
                },
                "futureLabel": {
                    "type": "string",
                    "example": "Jun 2019"
                },
                "quantity": {
                    "type": "number",
                    "example": 3
                },
                "discount": {
                    "type": "number",
                    "example": 0
                },
                "finalUnitCost": {
                    "type": "number",
                    "example": 10
                },
                "smsListId": {
                    "type": "string",
                    "example": "AA"
                },
                "searchPurchaseItem": {
                    "$ref": "#/definitions/SearchPurchaseItem"
                },
                "fulfillmentHistory": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FulfillmentHistory"
                    }
                },
                "created": {
                    "$ref": "#/definitions/EcommerceCreated"
                },
                "modificationHistory": {
                    "type": "object",
                    "properties": {
                        "modifications": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EcommerceModification"
                            }
                        }
                    }
                }
            }
        },
        "SearchPurchaseItem": {
            "type": "object",
            "properties": {
                "enableAOS": {
                    "type": "boolean",
                    "example": false
                },
                "sortOrder": {
                    "type": "number",
                    "example": 1
                },
                "counts": {
                    "$ref": "#/definitions/SearchCountPurchasedObject"
                },
                "search": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string",
                            "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                        },
                        "recommended": {
                            "type": "boolean",
                            "example": true
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "Prospect",
                                "Legacy",
                                "Declared",
                                "Ematch"
                            ],
                            "example": "Prospect"
                        },
                        "title": {
                            "type": "string",
                            "example": "2018 Military"
                        },
                        "maxVolume": {
                            "type": "number",
                            "example": 5000
                        },
                        "classPlannerVersion": {
                            "type": "number",
                            "example": 1
                        },
                        "tags": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "example": "Tag 1"
                            }
                        },
                        "filters": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FilterPurchasedObject"
                            }
                        },
                        "rules": {
                            "$ref": "#/definitions/RulesObject"
                        },
                        "surveyYear": {
                            "type": "number",
                            "example": 2020
                        }
                    }
                }
            }
        },
        "SmallProduct": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                },
                "key": {
                    "type": "string",
                    "example": "classplanner.prospects"
                },
                "unitCost": {
                    "type": "number",
                    "example": 0.86
                }
            }
        },
        "CreditCard": {
            "type": "object",
            "required": [
                "cardNumber",
                "expirationDate",
                "securityCode"
            ],
            "properties": {
                "cardNumber": {
                    "type": "string",
                    "example": "4007000000027"
                },
                "expirationDate": {
                    "type": "string",
                    "example": "012018"
                },
                "securityCode": {
                    "type": "string",
                    "example": "456"
                },
                "cardType": {
                    "type": "string",
                    "example": "American Express"
                },
                "nameOnCard": {
                    "type": "string",
                    "example": "Elliot Alderson"
                }
            }
        },
        "BankAccount": {
            "type": "object",
            "required": [
                "accountType",
                "routingNumber",
                "accountNumber",
                "nameOnAccount"
            ],
            "properties": {
                "bankName": {
                    "type": "string",
                    "example": "Citibank"
                },
                "accountType": {
                    "type": "string",
                    "enum": [
                        "checking",
                        "savings",
                        "businessChecking"
                    ]
                },
                "routingNumber": {
                    "type": "string",
                    "minLength": 9,
                    "maxLength": 9,
                    "example": "056008849"
                },
                "accountNumber": {
                    "type": "string",
                    "minLength": 5,
                    "maxLength": 17,
                    "example": "1234567890"
                },
                "nameOnAccount": {
                    "type": "string",
                    "maxLength": 22,
                    "example": "Hari Seldon"
                }
            }
        },
        "Invoice": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                },
                "paidTimestamp": {
                    "type": "integer",
                    "example": 1515179948
                },
                "emailTo": {
                    "type": "string",
                    "example": "elliot@e-corp.com"
                },
                "phoneTo": {
                    "type": "string",
                    "example": "5551234567"
                },
                "postalMailTo": {
                    "type": "object",
                    "properties": {
                        "street": {
                            "type": "string",
                            "example": "123 Avenue"
                        },
                        "street2": {
                            "type": "string",
                            "example": "Ap. 123"
                        },
                        "city": {
                            "type": "string",
                            "example": "Chicago"
                        },
                        "state": {
                            "type": "string",
                            "example": "IL"
                        },
                        "zip": {
                            "type": "string",
                            "example": "60655"
                        },
                        "country": {
                            "type": "string",
                            "example": "USA"
                        }
                    }
                }
            }
        },
        "Credits": {
            "type": "object",
            "properties": {
                "numberOfCredits": {
                    "type": "integer",
                    "example": 30
                }
            }
        },
        "Address": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string",
                    "example": "Ellen"
                },
                "lastName": {
                    "type": "string",
                    "example": "Johnson"
                },
                "company": {
                    "type": "string",
                    "example": "Souveniropolis"
                },
                "address": {
                    "type": "string",
                    "example": "14 Main Street"
                },
                "city": {
                    "type": "string",
                    "example": "Pecan Springs"
                },
                "state": {
                    "type": "string",
                    "example": "TX"
                },
                "zip": {
                    "type": "string",
                    "example": "44628"
                },
                "country": {
                    "type": "string",
                    "example": "USA"
                }
            }
        },
        "CreatePaymentProfileRequest": {
            "type": "object",
            "properties": {
                "achPaymentProfile": {
                    "$ref": "#/definitions/BankAccount"
                },
                "creditCardPaymentProfile": {
                    "$ref": "#/definitions/CreditCard"
                },
                "billTo": {
                    "$ref": "#/definitions/Address"
                }
            }
        },
        "PaymentProfile": {
            "type": "object",
            "properties": {
                "creditCardPaymentProfile": {
                    "type": "object",
                    "properties": {
                        "externalProfileId": {
                            "type": "string",
                            "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                        },
                        "cardNumber": {
                            "type": "string",
                            "example": "377593333478781"
                        },
                        "expirationDate": {
                            "type": "number",
                            "example": 1606744196
                        },
                        "cardType": {
                            "type": "string",
                            "example": "A TYPE"
                        }
                    }
                },
                "achPaymentProfile": {
                    "type": "object",
                    "properties": {
                        "externalProfileId": {
                            "type": "string",
                            "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                        },
                        "accountNumber": {
                            "type": "string",
                            "example": "377593333478781"
                        },
                        "routingNumber": {
                            "type": "string",
                            "example": "377593333478781"
                        },
                        "bankName": {
                            "type": "string",
                            "example": "Capsule Corp"
                        },
                        "nameOnAccount": {
                            "type": "string",
                            "example": "Son Goku"
                        }
                    }
                },
                "creditsPaymentProfile": {
                    "type": "object",
                    "properties": {
                        "numberOfCreditsRemaining": {
                            "type": "number",
                            "example": 11
                        },
                        "product": {
                            "type": "string",
                            "example": "Senzu Bean"
                        }
                    }
                },
                "invoicePaymentProfile": {
                    "type": "object",
                    "properties": {
                        "emailtTo": {
                            "type": "string",
                            "example": "bulma@capsule-corp.com"
                        },
                        "postalMailTo": {
                            "type": "object",
                            "properties": {
                                "street": {
                                    "type": "string",
                                    "example": "123 Avenue"
                                },
                                "street2": {
                                    "type": "string",
                                    "example": "456 Avenue"
                                },
                                "city": {
                                    "type": "string",
                                    "example": "Master Roshi Island"
                                },
                                "state": {
                                    "type": "string",
                                    "example": "Sea"
                                },
                                "zipcode": {
                                    "type": "string",
                                    "example": "12345646"
                                },
                                "country": {
                                    "type": "string",
                                    "example": "Sea"
                                }
                            }
                        }
                    }
                }
            }
        },
        "ContractVolumeHistoryItem": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "0811f429-715c-41db-8115-60d36b2ac07e"
                },
                "purchaseGroupUid": {
                    "type": "string",
                    "example": "0811f429-715c-41db-8115-60d36b2ac07e"
                },
                "user": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string",
                            "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                        },
                        "name": {
                            "type": "string",
                            "example": "Son Goku"
                        },
                        "type": {
                            "type": "string",
                            "example": "LdapUser"
                        }
                    }
                },
                "date": {
                    "type": "number",
                    "example": 1501684404478
                },
                "volume": {
                    "type": "number",
                    "example": 1337
                },
                "productKey": {
                    "type": "string",
                    "example": "classplanner.aos"
                }
            }
        },
        "ContractVolumePointsResponse": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "object"
                },
                "spent": {
                    "type": "object"
                },
                "remaining": {
                    "type": "object"
                }
            }
        },
        "ContractVolumeHistoryResponse": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/ContractVolumeHistoryItem"
            }
        },
        "CopySearchesRequest": {
            "type": "object",
            "properties": {
                "simple": {
                    "type": "boolean",
                    "example": false
                },
                "searchesItemsToCopy": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "isPastGradYears": {
                                "type": "boolean",
                                "example": false
                            },
                            "purchaseGroupUid": {
                                "type": "string",
                                "example": "2791c62c-9b32-4af0-af9c-d237e248f86b"
                            },
                            "purchaseItemUid": {
                                "type": "string",
                                "example": "673a1a8a-69e6-4d3a-aaaa-8043cb4ce6d5"
                            },
                            "newTitle": {
                                "type": "string",
                                "example": "New Search Title"
                            },
                            "newGradYears": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "HSGRAD2021"
                                }
                            },
                            "status": {
                                "type": "string",
                                "example": "Active"
                            }
                        }
                    }
                }
            }
        },
        "GetSearchInfoRequest": {
            "type": "object",
            "properties": {
                "purchaseGroupUids": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "827adeda-1da5-4cf0-9bca-055e2cd01b7d"
                    }
                }
            }
        },
        "GetSearchInfoResponse": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "product": {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string",
                                "example": "classplanner.prospects"
                            }
                        }
                    },
                    "searchPurchaseItem": {
                        "type": "object",
                        "properties": {
                            "search": {
                                "type": "object",
                                "properties": {
                                    "uid": {
                                        "type": "string",
                                        "example": "e1f82ebc-2673-49e5-a7bb-3059af5e94e1"
                                    },
                                    "filters": {
                                        "type": "array",
                                        "items": {
                                            "$ref": "#/definitions/FilterObject"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "ResearchResponse": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "bzmFD2ABhFdhQ4NV_2iC"
                },
                "title": {
                    "type": "string",
                    "example": "Roundtable_Trends in Campaign Design and Planning"
                },
                "summary": {
                    "type": "string",
                    "example": "The comprehensive campaign continues its nearly uncontested reign as the most-widely used form of campaigning across the country. An excellent tool for..."
                },
                "reportType": {
                    "type": "string",
                    "example": "Collaborative Research"
                },
                "displayDate": {
                    "type": "string",
                    "example": "2012-12-20T00:00:00"
                },
                "activeDate": {
                    "type": "string",
                    "example": "2012-12-20T00:00:00"
                },
                "expirationDate": {
                    "type": "string",
                    "example": "2012-12-20T00:00:00"
                },
                "hasFile": {
                    "type": "boolean",
                    "example": false
                },
                "authors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "keywords": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "programs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "methodology": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "attachment": {
                    "type": "object",
                    "properties": {
                        "content": {
                            "type": "string",
                            "example": "Trends in Campaign Design \\nand Planning\\n\\nEduventures Roundtable\\n\\nDecember 2012..."
                        },
                        "contentLength": {
                            "type": "integer",
                            "example": 7538
                        }
                    }
                }
            }
        },
        "ResearchArticle": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string",
                    "example": "Test Document"
                },
                "summary": {
                    "type": "string",
                    "example": "This document is being updated for testing purposes"
                },
                "reportType": {
                    "type": "string",
                    "example": "Custom Inquiry"
                },
                "displayDate": {
                    "type": "string",
                    "example": "2017-12-21T00:00:00"
                },
                "activeDate": {
                    "type": "string",
                    "example": "2017-12-21T00:00:00"
                },
                "expirationDate": {
                    "type": "string",
                    "example": "2017-12-21T00:00:00"
                },
                "hasFile": {
                    "type": "boolean",
                    "example": false
                },
                "authors": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Artiga"
                    }
                },
                "keywords": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Keyword1"
                    }
                },
                "programs": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Industry Practice"
                    }
                },
                "methodology": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Methodology1"
                    }
                },
                "attachment": {
                    "type": "object",
                    "properties": {
                        "content": {
                            "type": "string",
                            "example": "pdf text"
                        },
                        "contentLength": {
                            "type": "number",
                            "example": 9
                        }
                    }
                }
            }
        },
        "UpdateResearchArticleRequest": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string",
                    "example": "Test Document"
                },
                "summary": {
                    "type": "string",
                    "example": "This document is being updated for testing purposes"
                },
                "reportType": {
                    "type": "string",
                    "example": "Custom Inquiry"
                },
                "displayDate": {
                    "type": "string",
                    "example": "2017-12-21T00:00:00"
                },
                "activeDate": {
                    "type": "string",
                    "example": "2017-12-21T00:00:00"
                },
                "expirationDate": {
                    "type": "string",
                    "example": "2017-12-21T00:00:00"
                },
                "filePath": {
                    "type": "string",
                    "example": "s3://research-library-pdfs-dev/06.2017_Masters_Homeland Security.pdf"
                },
                "authors": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Artiga"
                    }
                },
                "keywords": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Keyword1"
                    }
                },
                "programs": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Industry Practice"
                    }
                },
                "methodology": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Methodology1"
                    }
                },
                "pdf": {
                    "type": "string",
                    "example": "cGRmIHRleHQ="
                }
            }
        },
        "CreateResearchArticleRequest": {
            "type": "object",
            "required": [
                "title",
                "summary",
                "activeDate",
                "displayDate"
            ],
            "properties": {
                "title": {
                    "type": "string",
                    "example": "Test Document"
                },
                "summary": {
                    "type": "string",
                    "example": "This document is being created for testing purposes"
                },
                "reportType": {
                    "type": "string",
                    "example": "Custom Inquiry"
                },
                "displayDate": {
                    "type": "string",
                    "example": "2017-12-21T00:00:00"
                },
                "activeDate": {
                    "type": "string",
                    "example": "2017-12-21T00:00:00"
                },
                "expirationDate": {
                    "type": "string",
                    "example": "2017-12-21T00:00:00"
                },
                "filePath": {
                    "type": "string",
                    "example": "s3://research-library-pdfs-dev/06.2017_Masters_Homeland Security.pdf"
                },
                "authors": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Artiga"
                    }
                },
                "keywords": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Keyword1"
                    }
                },
                "programs": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Industry Practice"
                    }
                },
                "methodology": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Methodology1"
                    }
                },
                "pdf": {
                    "type": "string",
                    "example": "cGRmIHRleHQ="
                }
            }
        },
        "CreateResearchArticleResponse": {
            "type": "object",
            "properties": {
                "article": {
                    "$ref": "#/definitions/ResearchArticle"
                },
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "Contact": {
            "type": "object",
            "properties": {
                "userId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                }
            }
        },
        "Order": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                },
                "organizationUid": {
                    "type": "string",
                    "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                },
                "sfOpportunityNumber": {
                    "type": "string",
                    "example": "OP-00010022"
                },
                "additionalSfOpportunityNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "OP-00010022"
                    }
                },
                "purchaseGroups": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Approved",
                        "Rejected",
                        "Purchased",
                        "Failed"
                    ],
                    "example": "Pending"
                },
                "termsAccepted": {
                    "type": "boolean",
                    "example": true
                },
                "importedFromSf": {
                    "type": "boolean",
                    "example": false
                },
                "paymentFailed": {
                    "type": "boolean",
                    "example": false
                },
                "sftpDeliveryMethod": {
                    "type": "boolean",
                    "example": true
                },
                "sftpDeliveryLayout": {
                    "type": "string",
                    "enum": [
                        "NRCCUA",
                        "ACT",
                        "ENCOURA"
                    ],
                    "example": "NRCCUA"
                },
                "poNumber": {
                    "type": "string",
                    "example": "Custom order number"
                },
                "paymentProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PaymentProfile"
                    }
                },
                "paymentTransations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PaymentTransaction"
                    }
                },
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Contact"
                    }
                },
                "sfStatus": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Processing",
                        "Complete"
                    ],
                    "example": "Pending"
                }
            }
        },
        "FullOrder": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                },
                "organization": {
                    "$ref": "#/definitions/OrganizationReallySmall"
                },
                "sfOpportunityNumber": {
                    "type": "string",
                    "example": "OP-00010022"
                },
                "additionalSfOpportunityNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "OP-00010022"
                    }
                },
                "isPlatform": {
                    "type": "boolean",
                    "example": true
                },
                "purchaseGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PurchaseGroup"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Approved",
                        "Rejected",
                        "Purchased",
                        "Failed"
                    ],
                    "example": "Pending"
                },
                "paid": {
                    "type": "boolean",
                    "example": true
                },
                "paymentFailed": {
                    "type": "boolean",
                    "example": false
                },
                "completed": {
                    "type": "boolean",
                    "example": true
                },
                "termsAccepted": {
                    "type": "boolean",
                    "example": true
                },
                "reviewRequired": {
                    "type": "boolean",
                    "example": true
                },
                "importedFromSf": {
                    "type": "boolean",
                    "example": false
                },
                "sftpDeliveryMethod": {
                    "type": "boolean",
                    "example": true
                },
                "sftpDeliveryLayout": {
                    "type": "string",
                    "enum": [
                        "NRCCUA",
                        "ACT",
                        "ENCOURA"
                    ],
                    "example": "NRCCUA"
                },
                "purchasedDate": {
                    "type": "number",
                    "example": 1501684404478
                },
                "approvedDate": {
                    "type": "number",
                    "example": 816091200000
                },
                "completedDate": {
                    "type": "number",
                    "example": 825091203020
                },
                "amount": {
                    "type": "number",
                    "example": 25121
                },
                "poNumber": {
                    "type": "string",
                    "example": "Custom order number"
                },
                "rejectedFeedback": {
                    "type": "object",
                    "example": "Any Object/String/Array that may suit our needs (can be null)"
                },
                "searchTypes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Prospect"
                    }
                },
                "paymentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Credit Card, Invoice or Points"
                    }
                },
                "purchaseGroupNames": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "Names defined by the user on each Purchase Groups"
                    }
                },
                "paymentProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PaymentProfile"
                    }
                },
                "paymentTransations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PaymentTransaction"
                    }
                },
                "representative": {
                    "$ref": "#/definitions/Contact"
                },
                "contacts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Contact"
                    }
                },
                "created": {
                    "$ref": "#/definitions/EcommerceCreated"
                },
                "modificationHistory": {
                    "type": "object",
                    "properties": {
                        "modifications": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/EcommerceModification"
                            }
                        }
                    }
                },
                "sfStatus": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Processing",
                        "Complete"
                    ],
                    "example": "Pending"
                }
            }
        },
        "PaymentTransaction": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                },
                "amount": {
                    "type": "integer",
                    "example": 15
                },
                "poNumber": {
                    "type": "string"
                },
                "transactionTimestamp": {
                    "type": "integer",
                    "example": 1515174425
                },
                "creditCardPaymentTransaction": {
                    "$ref": "#/definitions/CreditCard"
                },
                "achPaymentTransaction": {
                    "$ref": "#/definitions/BankAccount"
                },
                "creditsPaymentTransaction": {
                    "$ref": "#/definitions/Credits"
                },
                "invoicePaymentTransaction": {
                    "$ref": "#/definitions/Invoice"
                }
            }
        },
        "CreateProductRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Prospect Search List"
                },
                "key": {
                    "type": "string",
                    "example": "classplanner.declared"
                },
                "salesforceId": {
                    "type": "string",
                    "example": "01t60000001p36OAAQ"
                },
                "salesforceProductCodes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "A"
                    }
                },
                "type": {
                    "type": "string",
                    "example": "Search",
                    "enum": [
                        "Search",
                        "Module",
                        "Service"
                    ]
                },
                "unitCost": {
                    "type": "number",
                    "example": 0.95
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "Product": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "11896062-5f13-43fc-8ddb-0e5bb747f6fb"
                },
                "name": {
                    "type": "string",
                    "example": "Prospect Search List"
                },
                "key": {
                    "type": "string",
                    "example": "classplanner.declared"
                },
                "salesforceId": {
                    "type": "string",
                    "example": "01t60000001p36OAAQ"
                },
                "salesforceProductCodes": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "A"
                    }
                },
                "type": {
                    "type": "string",
                    "example": "Search",
                    "enum": [
                        "Search",
                        "Module",
                        "Service"
                    ]
                },
                "unitCost": {
                    "type": "number",
                    "example": 0.95
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "LRORequest": {
            "type": "object",
            "properties": {
                "callbackUrl": {
                    "type": "string",
                    "example": "https://api.dev-datalab.nrccua.org/v1/lro"
                }
            }
        },
        "LROUpdateRequest": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "object",
                    "example": "Relevant Error Object"
                },
                "result": {
                    "type": "object",
                    "example": "Can be anything: string, number, array, object that may suit our needs"
                }
            }
        },
        "LRO": {
            "type": "object",
            "properties": {
                "lroUid": {
                    "type": "string",
                    "example": "046dcbb1-9528-4104-88cd-b9bd3d508353"
                },
                "startTime": {
                    "type": "number",
                    "example": 1525708003525
                },
                "endTime": {
                    "type": "number",
                    "example": 1525708007725
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "Executing",
                        "Success",
                        "Error"
                    ]
                },
                "callbackUrl": {
                    "type": "string",
                    "example": "https://api.dev-datalab.nrccua.org/v1/lro"
                },
                "result": {
                    "type": "object",
                    "example": "Can be anything: string, number, array, object that may suit our needs"
                }
            }
        },
        "LROCached": {
            "type": "object",
            "properties": {
                "lroUid": {
                    "type": "string",
                    "example": "046dcbb1-9528-4104-88cd-b9bd3d508353"
                },
                "startTime": {
                    "type": "number",
                    "example": 1525708003525
                },
                "endTime": {
                    "type": "number",
                    "example": 1525708007725
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "Success"
                    ]
                },
                "callbackUrl": {
                    "type": "string",
                    "example": "https://api.dev-datalab.nrccua.org/v1/lro"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/RunCountsResponse"
                    }
                }
            }
        },
        "LRODedupCached": {
            "type": "object",
            "properties": {
                "lroUid": {
                    "type": "string",
                    "example": "046dcbb1-9528-4104-88cd-b9bd3d508353"
                },
                "startTime": {
                    "type": "number",
                    "example": 1525708003525
                },
                "endTime": {
                    "type": "number",
                    "example": 1525708007725
                },
                "state": {
                    "type": "string",
                    "enum": [
                        "Success"
                    ]
                },
                "callbackUrl": {
                    "type": "string",
                    "example": "https://api.dev-datalab.nrccua.org/v1/lro"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/PurchaseGroup"
                    }
                }
            }
        },
        "CreateFulfillmentRequest": {
            "type": "object",
            "properties": {
                "orderUid": {
                    "type": "string",
                    "example": "976e6288-5960-4c8d-b53e-17b4f6892480"
                },
                "purchaseGroupUid": {
                    "type": "string",
                    "example": "53bfc4fb-389d-4c17-a5d6-7e6902e3839b"
                },
                "productKey": {
                    "type": "string",
                    "example": "classplanner.prospects"
                },
                "purchaseItems": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uid": {
                                "type": "string",
                                "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                            },
                            "quantity": {
                                "type": "number",
                                "example": 150
                            }
                        }
                    }
                },
                "isContinuous": {
                    "type": "boolean",
                    "example": false
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Delivered",
                        "Complete"
                    ],
                    "example": "Processing"
                },
                "sfStatus": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Allocating",
                        "Processing",
                        "Complete"
                    ],
                    "example": "Processing"
                },
                "listGenerated": {
                    "type": "boolean",
                    "example": false
                },
                "listPath": {
                    "type": "string",
                    "example": "some s3 path"
                },
                "quantity": {
                    "type": "number",
                    "example": 500
                },
                "costInPoints": {
                    "type": "number",
                    "example": 10020
                },
                "costInDollars": {
                    "type": "number",
                    "example": 1245.5
                },
                "date": {
                    "type": "number",
                    "example": "1530556037946'"
                }
            }
        },
        "FulfillmentRequest": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Delivered",
                        "Complete"
                    ],
                    "example": "Delivered"
                },
                "sfStatus": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Allocating",
                        "Processing",
                        "Complete"
                    ],
                    "example": "Processing"
                },
                "listGenerated": {
                    "type": "boolean",
                    "example": true
                },
                "listPath": {
                    "type": "string",
                    "example": "some s3 path"
                },
                "delivery": {
                    "$ref": "#/definitions/Delivery"
                }
            }
        },
        "DeliveryRequest": {
            "type": "object",
            "properties": {
                "triggeredBy": {
                    "type": "string",
                    "enum": [
                        "Client",
                        "Service"
                    ],
                    "example": "Client"
                },
                "method": {
                    "type": "string",
                    "enum": [
                        "Download",
                        "Email",
                        "FTP"
                    ],
                    "example": "Download"
                },
                "email": {
                    "type": "string",
                    "example": "email@nrccua.org"
                },
                "file": {
                    "$ref": "#/definitions/DeliveryFile"
                },
                "created": {
                    "$ref": "#/definitions/EcommerceCreated"
                }
            }
        },
        "OrganizationProduct": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "273f5933-7ba9-4bcc-8e7a-b513594e692a"
                },
                "organizationUid": {
                    "type": "string",
                    "example": "0811f429-715c-41db-8115-60d36b2ac07e"
                },
                "productKey": {
                    "type": "string",
                    "example": "classplanner.prospects"
                },
                "unitCost": {
                    "type": "number",
                    "example": 0.8
                },
                "discount": {
                    "type": "number",
                    "example": 0.2
                },
                "allocatedPoints": {
                    "type": "number",
                    "example": 10000
                },
                "remainingPoints": {
                    "type": "number",
                    "example": 9000
                },
                "dateApplied": {
                    "type": "number",
                    "example": 1530556037946
                },
                "expiration": {
                    "type": "number",
                    "example": 1530556037946
                },
                "importedFromSf": {
                    "type": "boolean",
                    "example": false
                },
                "created": {
                    "$ref": "#/definitions/EcommerceCreated"
                }
            }
        },
        "OrganizationProductRequest": {
            "type": "object",
            "properties": {
                "productKey": {
                    "type": "string",
                    "example": "classplanner.prospects"
                },
                "unitCost": {
                    "type": "number",
                    "example": 0.8
                },
                "discount": {
                    "type": "number",
                    "example": 0.2
                },
                "allocatedPoints": {
                    "type": "number",
                    "example": 10000
                },
                "importedFromSf": {
                    "type": "boolean",
                    "example": false
                },
                "creator": {
                    "type": "object",
                    "properties": {
                        "firstName": {
                            "type": "string",
                            "example": "Pedro"
                        },
                        "lastName": {
                            "type": "string",
                            "example": "Artiga"
                        }
                    }
                }
            }
        },
        "AOSLinkGroup": {
            "type": "object",
            "properties": {
                "inquiryUrl": {
                    "type": "string",
                    "example": "https://encoura.org"
                },
                "visitUrl": {
                    "type": "string",
                    "example": "https://encoura.org"
                },
                "applyUrl": {
                    "type": "string",
                    "example": "https://encoura.org"
                }
            }
        },
        "AOSStudentActivityRequest": {
            "type": "object",
            "properties": {
                "action": {
                    "description": "Action descriptor",
                    "type": "string",
                    "example": "click"
                },
                "action_type": {
                    "description": "Action sub-type",
                    "type": "string",
                    "example": "click_inquiry"
                },
                "data": {
                    "description": "AOS link group",
                    "type": "object",
                    "properties": {
                        "fice": {
                            "type": "string",
                            "example": "013454"
                        },
                        "seq_num": {
                            "type": "string",
                            "example": "01234567"
                        }
                    }
                }
            }
        },
        "Schedule": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "273f5933-7ba9-4bcc-8e7a-b513594e692a"
                },
                "interval": {
                    "type": "string",
                    "enum": [
                        "Single",
                        "Weekly",
                        "Monthly"
                    ],
                    "example": "Weekly"
                },
                "weekOfMonth": {
                    "type": "string",
                    "enum": [
                        "First",
                        "Second",
                        "Third",
                        "Fourth",
                        "Last"
                    ],
                    "example": "Third"
                },
                "dayOfWeek": {
                    "type": "string",
                    "enum": [
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday"
                    ],
                    "example": "Wednesday"
                },
                "dayOfMonth": {
                    "type": "integer",
                    "example": 20,
                    "minimum": 1,
                    "maximum": 31
                },
                "dateFulfillment": {
                    "type": "array",
                    "items": {
                        "type": "number",
                        "example": 1501684404478
                    }
                }
            }
        },
        "Fulfillment": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "273f5933-7ba9-4bcc-8e7a-b513594e692a"
                },
                "organizationUid": {
                    "type": "string",
                    "example": "0811f429-715c-41db-8115-60d36b2ac07e"
                },
                "fice": {
                    "type": "string",
                    "example": "001024"
                },
                "orderUid": {
                    "type": "string",
                    "example": "976e6288-5960-4c8d-b53e-17b4f6892480"
                },
                "purchaseGroupUid": {
                    "type": "string",
                    "example": "53bfc4fb-389d-4c17-a5d6-7e6902e3839b"
                },
                "productKey": {
                    "type": "string",
                    "example": "classplanner.prospects"
                },
                "purchaseItems": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uid": {
                                "type": "string",
                                "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                            },
                            "quantity": {
                                "type": "number",
                                "example": 150
                            },
                            "undiscoveredQuantity": {
                                "type": "number",
                                "example": 150
                            }
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Delivered",
                        "Complete"
                    ],
                    "example": "Processing"
                },
                "sfStatus": {
                    "type": "string",
                    "enum": [
                        "Pending",
                        "Allocating",
                        "Processing",
                        "Complete"
                    ],
                    "example": "Processing"
                },
                "listGenerated": {
                    "type": "boolean",
                    "example": false
                },
                "listPath": {
                    "type": "string",
                    "example": "some s3 path"
                },
                "quantity": {
                    "type": "number",
                    "example": 500
                },
                "costInPoints": {
                    "type": "number",
                    "example": 10020
                },
                "costInDollars": {
                    "type": "number",
                    "example": 1245.5
                },
                "date": {
                    "type": "number",
                    "example": 1530556037946
                },
                "deliveries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Delivery"
                    }
                },
                "created": {
                    "$ref": "#/definitions/EcommerceCreated"
                }
            }
        },
        "FulfillmentSchedule": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "273f5933-7ba9-4bcc-8e7a-b513594e692a"
                },
                "organizationUid": {
                    "type": "string",
                    "example": "c50d3be8-d15c-44b6-8310-91df948af6da"
                },
                "purchaseGroupUid": {
                    "type": "string",
                    "example": "0811f429-715c-41db-8115-60d36b2ac07e"
                },
                "active": {
                    "type": "boolean"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Ready",
                        "Processing",
                        "Complete",
                        "Error"
                    ]
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Schedule"
                    }
                },
                "minimumRecords": {
                    "type": "integer",
                    "minimum": 0,
                    "example": 500
                },
                "lastFulfillment": {
                    "type": "number",
                    "example": 1501684404478
                },
                "reason": {
                    "type": "string",
                    "example": "Fulfillment schedule process interrupted"
                },
                "orderUid": {
                    "type": "string",
                    "example": "976e6288-5960-4c8d-b53e-17b4f6892480"
                }
            }
        },
        "FulfillmentScheduleResponse": {
            "type": "object",
            "properties": {
                "fulfillmentSchedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FulfillmentSchedule"
                    }
                },
                "currentCount": {
                    "type": "number",
                    "example": 100
                },
                "totalCount": {
                    "type": "number",
                    "example": 1000
                },
                "nextOffset": {
                    "type": "number",
                    "example": 100
                }
            }
        },
        "StudentReportDetail": {
            "type": "object",
            "example": {
                "studentReportId": "0000479b-8660-4e8c-9240-c597c0399914",
                "scoreReportFileId": "3d64ea29-b0b2-4e9f-90b3-6c0d2339314c",
                "examineeUid": "4cc45f65-ce89-4160-adbb-56933884de57",
                "actCollegeCode": "0015",
                "actId": "-99515212",
                "firstName": "XOWUT",
                "middleName": "Q",
                "lastName": "JUXCUD",
                "address": "9607 XUGOAR FUYID",
                "city": "TEMVFAMX",
                "state": "WP",
                "zipCode": "93379",
                "birthDate": "07/14/1952",
                "testDate": "04/2019",
                "highSchoolGraduationYear": "2020",
                "highSchoolCode": "430070",
                "highSchoolClassSize": "5",
                "highSchoolType": "1",
                "highSchoolRank": "3",
                "highSchoolGPA": "3",
                "highSchoolProgramType": "2",
                "interestMajor": "552",
                "majorAssurance": "2",
                "collegeChoice": "2",
                "collegeType": "1",
                "studentBody": "1",
                "location": "43",
                "size": "9",
                "actScore": {
                    "composite": "21",
                    "math": "20",
                    "science": "21",
                    "english": "22",
                    "reading": "22",
                    "writing": "",
                    "STEM": "21",
                    "ELA": "--",
                    "careerReadiness": "21"
                },
                "processDate": 1565197117112,
                "exportDate": 1571939119805,
                "registrationId": "67127120",
                "cancel": false,
                "cancelReason": "",
                "canceledAt": 1571939119805,
                "reinstatedAt": 1571939133597,
                "organization": {
                    "CLCopy": "0",
                    "IDCL": "3994",
                    "ECLCN": "MELINDA THOMAS",
                    "ECLCT": "DIR OF UG ADMISSIONS/SSAC 120",
                    "ECLN": "MIDDLE TENNESSEE STATE UNIVERSITY",
                    "ECLA": "1301 EAST MAIN STREET",
                    "ECLCITY": "MURFREESBORO",
                    "ECLST": "TN",
                    "ECLZIP": "37132",
                    "GPACS1": "",
                    "GPACS2": "",
                    "GPACS3": "",
                    "GPACS4": "",
                    "GPACS5": "",
                    "SCCS1": "",
                    "SCCS2": "",
                    "SCCS3": "",
                    "SCCS4": "",
                    "SCCS5": ""
                }
            }
        },
        "GeneralStudentReport": {
            "type": "object",
            "example": {
                "studentReportId": "0000479b-8660-4e8c-9240-c597c0399914",
                "scoreReportFileId": "3d64ea29-b0b2-4e9f-90b3-6c0d2339314c",
                "examineeUid": "4cc45f65-ce89-4160-adbb-56933884de57",
                "actCollegeCode": "0015",
                "actId": "-99515212",
                "firstName": "XOWUT",
                "lastName": "JUXCUD",
                "city": "TEMVFAMX",
                "state": "WP",
                "birthDate": "07/14/1952",
                "testDate": "04/2019",
                "highSchoolCode": "430070",
                "processDate": 1565197117112,
                "exportDate": 1566270000000,
                "registrationId": "816496456",
                "cancel": false,
                "cancelReason": "",
                "canceledAt": 1571939119805,
                "reinstatedAt": 1571939133597,
                "actScore": {
                    "composite": "21"
                },
                "organization": {
                    "CLCopy": "0",
                    "IDCL": "3994",
                    "ECLCN": "MELINDA THOMAS",
                    "ECLCT": "DIR OF UG ADMISSIONS/SSAC 120",
                    "ECLN": "MIDDLE TENNESSEE STATE UNIVERSITY",
                    "ECLA": "1301 EAST MAIN STREET",
                    "ECLCITY": "MURFREESBORO",
                    "ECLST": "TN",
                    "ECLZIP": "37132",
                    "GPACS1": "",
                    "GPACS2": "",
                    "GPACS3": "",
                    "GPACS4": "",
                    "GPACS5": "",
                    "SCCS1": "",
                    "SCCS2": "",
                    "SCCS3": "",
                    "SCCS4": "",
                    "SCCS5": ""
                }
            }
        },
        "UpdatedStudent": {
            "type": "object",
            "example": {
                "scoreReportFileId": "3d64ea29-b0b2-4e9f-90b3-6c0d2339314c",
                "collegeChoices": [
                    "0015",
                    "0000",
                    "0011"
                ],
                "actId": "-99515212",
                "firstName": "XOWUT",
                "lastName": "JUXCUD",
                "city": "TEMVFAMX",
                "state": "WP",
                "birthDate": "07/14/1952",
                "testDate": "04/2019",
                "highSchoolCode": "430070",
                "processDate": 1565197117112,
                "exportDate": 1566270000000,
                "registrationId": "816496456",
                "cancel": false,
                "cancelReason": "",
                "canceledAt": 1571939119805,
                "reinstatedAt": 1571939133597,
                "actScore": {
                    "composite": "21"
                }
            }
        },
        "StudentDeliveryRequest": {
            "type": "object",
            "properties": {
                "examineeUid": {
                    "type": "string",
                    "example": "0000479b-8660-4e8c-9240-c597c0399914"
                },
                "scoreReportUid": {
                    "type": "string",
                    "example": "3d64ea29-b0b2-4e9f-90b3-6c0d2339314c"
                }
            }
        },
        "StudentScoreReportDelivery": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "example": "file_name.pdf"
                },
                "fileName": {
                    "type": "string",
                    "example": "https://dev.s3.amazonaws.com/score-reporter/file_name.pdf"
                }
            }
        },
        "ScoreReport": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "11896062-5f13-43fc-8ddb-0e5bb747f6fb"
                },
                "fulfillmentUid": {
                    "type": "string",
                    "example": "22896062-5f13-43fc-8ddb-0e5bb747faaa"
                },
                "pdfFilePath": {
                    "type": "string",
                    "example": "ACT-MIDWESTERN STATE UNIVERSITY-11212019-225836.pdf"
                },
                "dataFilePath": {
                    "type": "string",
                    "example": "ACT-MIDWESTERN STATE UNIVERSITY-11212019-225836.txt"
                },
                "organization": {
                    "type": "object"
                },
                "students": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "44896cc2-5f13-21fc-8ddb-0e5bb747faaa"
                    }
                },
                "pdfVersion": {
                    "type": "string",
                    "example": "4.0.4"
                },
                "dataVersion": {
                    "type": "string",
                    "example": "4.0.3"
                },
                "uploadedAt": {
                    "type": "number",
                    "example": 1280777199966
                },
                "exportedAt": {
                    "type": "number",
                    "example": 1380777199967
                },
                "createdAt": {
                    "type": "number",
                    "example": 1480777199968
                }
            }
        },
        "UpdateScoreReportRequest": {
            "type": "object",
            "properties": {
                "exportedAt": {
                    "type": "number",
                    "example": 1580777199968
                }
            }
        },
        "UpdateStudentsRequest": {
            "type": "object",
            "properties": {
                "exportedAt": {
                    "type": "number",
                    "example": 1580777199968
                }
            }
        },
        "UpdateStudentsResponse": {
            "type": "object",
            "properties": {
                "documentsModified": {
                    "type": "number",
                    "example": 5
                }
            }
        },
        "OrganizationSettings": {
            "type": "object",
            "properties": {
                "superScoreSettings": {
                    "$ref": "#/definitions/SuperScoreSettings"
                }
            }
        },
        "SuperScoreSettings": {
            "type": "object",
            "properties": {
                "deliverySchedule": {
                    "type": "string",
                    "example": "Daily"
                },
                "suppressFederallyReportedEthn": {
                    "type": "boolean",
                    "example": true
                },
                "suppressStudentSelectedEthn": {
                    "type": "boolean",
                    "example": false
                },
                "supressReligiousAffiliation": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "SuperScoreOrganization": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "44896cc2-5f13-21fc-8ddb-0e5bb747faaa"
                },
                "organizationUid": {
                    "type": "string",
                    "example": "28896cc2-5f14-31fc-8ddb-0e5bb747fjjj"
                },
                "name": {
                    "type": "string",
                    "example": "University of Dallas"
                },
                "fice": {
                    "type": "string",
                    "example": "001122"
                },
                "actCode": {
                    "type": "string",
                    "example": "0122"
                },
                "settings": {
                    "$ref": "#/definitions/SuperScoreSettings"
                },
                "created": {
                    "$ref": "#/definitions/EcommerceCreated"
                }
            }
        },
        "ExportHistory": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "00ef4d2d-d617-4040-8ccc-d8ee0c336322"
                },
                "student_key": {
                    "type": "string",
                    "example": "23052834"
                },
                "submitted_by": {
                    "type": "string",
                    "example": "72a9095b-8807-4a77-a21f-4bf335c5c7c4"
                },
                "submitted_at": {
                    "type": "string",
                    "example": "2020-04-28T12:34:56"
                },
                "recipient_org": {
                    "type": "string",
                    "example": "4ab0025f-400b-46de-aaa9-bb2c1aa32b30"
                },
                "credential_type": {
                    "type": "string",
                    "example": "transcript"
                },
                "file_id": {
                    "type": "string",
                    "example": "e8e8ae33-974b-4929-95cf-e405cb564728"
                },
                "first_export_date": {
                    "type": "string",
                    "example": "2020-06-25T12:03:50.408000"
                },
                "removed_by": {
                    "type": "string",
                    "example": "Gustavo"
                },
                "removed_reason": {
                    "type": "string",
                    "example": "some reason"
                },
                "export_id": {
                    "type": "string",
                    "example": "8c2b651e-c178-40a4-ad2a-b6da08ff310c"
                },
                "file": {
                    "type": "object",
                    "properties": {
                        "file_id": {
                            "type": "string",
                            "example": "e8e8ae33-974b-4929-95cf-e405cb564728"
                        },
                        "file_url": {
                            "type": "string",
                            "example": "student-23052834-transcript.pdf"
                        },
                        "file_size": {
                            "type": "number",
                            "example": 19571
                        },
                        "display_name": {
                            "type": "string",
                            "example": "Student 23052834 Transcript"
                        }
                    }
                },
                "student": {
                    "type": "object",
                    "properties": {
                        "student_key": {
                            "type": "string",
                            "example": "23052834"
                        },
                        "seq_num": {
                            "type": "string",
                            "example": "30238402"
                        },
                        "first_name": {
                            "type": "string",
                            "example": "Hank"
                        },
                        "last_name": {
                            "type": "string",
                            "example": "Hill"
                        },
                        "dob": {
                            "type": "string",
                            "example": "2003-02-11"
                        },
                        "city": {
                            "type": "string",
                            "example": "Arlen"
                        },
                        "state": {
                            "type": "string",
                            "example": "TX"
                        },
                        "grad_year": {
                            "type": "number",
                            "example": 2020
                        },
                        "high_school_id": {
                            "type": "string",
                            "example": "10285143"
                        },
                        "high_school": {
                            "type": "object",
                            "properties": {
                                "high_school_id": {
                                    "type": "string",
                                    "example": "10285143"
                                },
                                "ceeb": {
                                    "type": "string",
                                    "example": "000001"
                                },
                                "name": {
                                    "type": "string",
                                    "example": "ABC High School"
                                },
                                "hs_ums_id": {
                                    "type": "string",
                                    "example": "05ebd45c-e828-4298-b08e-fd1184915705"
                                }
                            }
                        }
                    }
                },
                "export": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string",
                            "example": "8c2b651e-c178-40a4-ad2a-b6da08ff310c"
                        },
                        "file_path": {
                            "type": "string",
                            "example": "score-reporter\\\\ACT-TRENHOLM-STATE-TECH-COLL-TRENHOLM-CMP-07012019-211525.pdf"
                        },
                        "file_size": {
                            "type": "number",
                            "example": 5000
                        },
                        "created": {
                            "type": "object",
                            "properties": {
                                "created_by": {
                                    "type": "object",
                                    "properties": {
                                        "uid": {
                                            "type": "string"
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "type": {
                                            "type": "string"
                                        }
                                    }
                                },
                                "created_at": {
                                    "type": "string"
                                }
                            }
                        },
                        "product_key": {
                            "type": "string"
                        },
                        "source_id": {
                            "type": "string"
                        },
                        "first_export_date": {
                            "type": "string"
                        },
                        "is_combined": {
                            "type": "boolean"
                        },
                        "combined_exports": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "deliveries": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "uid": {
                                        "type": "string"
                                    },
                                    "date": {
                                        "type": "string"
                                    },
                                    "method": {
                                        "type": "string"
                                    },
                                    "file_type": {
                                        "type": "string"
                                    },
                                    "layout": {
                                        "type": "string"
                                    },
                                    "file_path": {
                                        "type": "string"
                                    },
                                    "combined_export": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "CombinedExportRequest": {
            "type": "object",
            "required": [
                "uids"
            ],
            "properties": {
                "method": {
                    "type": "string",
                    "example": "api"
                },
                "uids": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "80561bdb-399b-4cb1-b6b9-b3bbc6c14e9e"
                    }
                },
                "layout": {
                    "type": "string",
                    "example": "test_layout"
                },
                "application": {
                    "type": "string",
                    "example": "datalab"
                },
                "file_path": {
                    "type": "string",
                    "example": "file-name-2020-01-01.zip"
                },
                "student": {
                    "type": "object",
                    "properties": {
                        "firstName": {
                            "type": "string",
                            "example": "first"
                        },
                        "lastName": {
                            "type": "string",
                            "example": "last"
                        }
                    }
                },
                "created_by": {
                    "$ref": "#/definitions/createdBy"
                }
            }
        },
        "SingleExportRequest": {
            "type": "object",
            "properties": {
                "method": {
                    "type": "string",
                    "example": "client"
                },
                "layout": {
                    "type": "string",
                    "example": "test_layout"
                },
                "application": {
                    "type": "string",
                    "example": "datalab"
                },
                "created_by": {
                    "$ref": "#/definitions/createdBy"
                }
            }
        },
        "ListCredentialRequest": {
            "type": "object",
            "properties": {
                "firstNameFilter": {
                    "type": "string",
                    "example": "Johnson"
                },
                "historyFilter": {
                    "type": "string",
                    "example": "new"
                },
                "itemsPerPage": {
                    "type": "number",
                    "example": 25
                },
                "lastNameFilter": {
                    "type": "string",
                    "example": ""
                },
                "offset": {
                    "type": "number",
                    "example": 0
                },
                "typeFilter": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "example": "interim-transcript"
                    }
                }
            }
        },
        "ListCredentialResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "properties": {
                        "student_credentials": {
                            "type": "object",
                            "properties": {
                                "items": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ItemCredentialResponse"
                                    }
                                },
                                "total_count": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            }
        },
        "ItemCredentialResponse": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "00ef4d2d-d617-4040-8ccc-d8ee0c336322"
                },
                "credential_type": {
                    "type": "string",
                    "example": "transcript"
                },
                "file": {
                    "type": "object",
                    "properties": {
                        "file_id": {
                            "type": "string",
                            "example": "e8e8ae33-974b-4929-95cf-e405cb564728"
                        },
                        "file_url": {
                            "type": "string",
                            "example": "student-23052834-transcript.pdf"
                        },
                        "file_size": {
                            "type": "number",
                            "example": 19571
                        },
                        "display_name": {
                            "type": "string",
                            "example": "Student 23052834 Transcript"
                        }
                    }
                },
                "first_export_date": {
                    "type": "string",
                    "example": "2020-06-25T12:03:50.408000"
                },
                "student": {
                    "type": "object",
                    "properties": {
                        "student_key": {
                            "type": "string",
                            "example": "23052834"
                        },
                        "seq_num": {
                            "type": "string",
                            "example": "30238402"
                        },
                        "first_name": {
                            "type": "string",
                            "example": "Hank"
                        },
                        "last_name": {
                            "type": "string",
                            "example": "Hill"
                        },
                        "dob": {
                            "type": "string",
                            "example": "2003-02-11"
                        },
                        "city": {
                            "type": "string",
                            "example": "Arlen"
                        },
                        "state": {
                            "type": "string",
                            "example": "TX"
                        },
                        "grad_year": {
                            "type": "number",
                            "example": 2020
                        },
                        "high_school_id": {
                            "type": "string",
                            "example": "10285143"
                        },
                        "high_school": {
                            "type": "object",
                            "properties": {
                                "high_school_id": {
                                    "type": "string",
                                    "example": "10285143"
                                },
                                "ceeb": {
                                    "type": "string",
                                    "example": "000001"
                                },
                                "name": {
                                    "type": "string",
                                    "example": "ABC High School"
                                },
                                "hs_ums_id": {
                                    "type": "string",
                                    "example": "05ebd45c-e828-4298-b08e-fd1184915705"
                                }
                            }
                        }
                    }
                },
                "submitted_at": {
                    "type": "string",
                    "example": "2020-04-28T12:34:56"
                }
            }
        },
        "FulfillmentScoreReporter": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "273f5933-7ba9-4bcc-8e7a-b513594e692a"
                },
                "fice": {
                    "type": "string",
                    "example": "001024"
                },
                "organizationUid": {
                    "type": "string",
                    "example": "0811f429-715c-41db-8115-60d36b2ac07e"
                },
                "productKey": {
                    "type": "string",
                    "example": "score-reporter"
                },
                "purchaseItems": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    }
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Processing",
                        "Delivered",
                        "Complete"
                    ],
                    "example": "Processing"
                },
                "listGenerated": {
                    "type": "boolean",
                    "example": false
                },
                "listPath": {
                    "type": "string",
                    "example": "some s3 path"
                },
                "quantity": {
                    "type": "number",
                    "example": 500
                },
                "costInPoints": {
                    "type": "number",
                    "example": 10020
                },
                "costInDollars": {
                    "type": "number",
                    "example": 1245.5
                },
                "date": {
                    "type": "number",
                    "example": 1530556037946
                },
                "deliveries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Delivery"
                    }
                },
                "created": {
                    "$ref": "#/definitions/EcommerceCreated"
                }
            }
        },
        "Delivery": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "273f5933-7ba9-4bcc-8e7a-b513594e692a"
                },
                "lroUid": {
                    "type": "string",
                    "example": "046dcbb1-9528-4104-88cd-b9bd3d508353"
                },
                "triggeredBy": {
                    "type": "string",
                    "enum": [
                        "Client",
                        "Service"
                    ],
                    "example": "Client"
                },
                "method": {
                    "type": "string",
                    "enum": [
                        "Download",
                        "Email",
                        "FTP"
                    ],
                    "example": "Download"
                },
                "email": {
                    "type": "string",
                    "example": "email@nrccua.org"
                },
                "date": {
                    "type": "number",
                    "example": 1530556037946
                },
                "combined": {
                    "type": "boolean",
                    "example": false
                },
                "file": {
                    "$ref": "#/definitions/DeliveryFile"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DeliveryFile"
                    }
                },
                "download": {
                    "type": "object",
                    "properties": {
                        "downloadedBy": {
                            "type": "string",
                            "example": "Pedro Artiga"
                        },
                        "date": {
                            "type": "number",
                            "example": 1530556037946
                        }
                    }
                },
                "requested": {
                    "type": "object",
                    "properties": {
                        "requestedBy": {
                            "type": "string",
                            "example": "Pedro Artiga"
                        },
                        "date": {
                            "type": "number",
                            "example": 1530556037946
                        }
                    }
                },
                "created": {
                    "$ref": "#/definitions/EcommerceCreated"
                }
            }
        },
        "EcommerceCreated": {
            "type": "object",
            "properties": {
                "createdBy": {
                    "$ref": "#/definitions/createdBy"
                },
                "createdAt": {
                    "type": "number",
                    "example": 1501684404478
                }
            }
        },
        "createdBy": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "82c096b2-f9be-4c4e-b2f5-291ce144aed3"
                },
                "name": {
                    "type": "string",
                    "example": "Son Goku"
                },
                "type": {
                    "type": "string",
                    "example": "LdapUser"
                }
            }
        },
        "DeliveryFile": {
            "type": "object",
            "properties": {
                "generated": {
                    "type": "boolean",
                    "example": false
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "csv",
                        "json",
                        "pdf",
                        "txt",
                        "xlsx",
                        "xls"
                    ],
                    "example": "csv"
                },
                "layout": {
                    "type": "string",
                    "enum": [
                        "NRCCUA",
                        "ACT",
                        "ENCOURA"
                    ],
                    "example": "NRCCUA"
                },
                "includeHeaderRow": {
                    "type": "boolean",
                    "example": false
                },
                "source": {
                    "type": "string",
                    "example": "some file path"
                },
                "path": {
                    "type": "string",
                    "example": "some file path"
                },
                "bucket": {
                    "type": "string",
                    "example": "some s3 bucket where the file is stored"
                }
            }
        },
        "HTTPValidationError": {
            "type": "object",
            "properties": {
                "detail": {
                    "title": "Detail",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ValidationError"
                    }
                }
            }
        },
        "ProductTypeModel": {
            "enum": [
                "legacy",
                "enrollment",
                "ematch"
            ],
            "type": "string",
            "description": "An enumeration."
        },
        "ValidationError": {
            "title": "ValidationError",
            "required": [
                "loc",
                "msg",
                "type"
            ],
            "type": "object",
            "properties": {
                "loc": {
                    "title": "Location",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "msg": {
                    "title": "Message",
                    "type": "string"
                },
                "type": {
                    "title": "Error Type",
                    "type": "string"
                }
            }
        },
        "Body_generate_file_headers_map_metadata_headers_map_put": {
            "title": "Body_generate_file_headers_map_metadata_headers_map_put",
            "required": [
                "headers",
                "productType"
            ],
            "type": "object",
            "properties": {
                "headers": {
                    "title": "File Headers",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Comma separated collection of strings that represent headers from file"
                },
                "productType": {
                    "title": "Product type",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ProductTypeModel"
                        }
                    ],
                    "description": "Product type for which you want to get list of fields"
                }
            }
        },
        "Body_save_file_headers_and_generate_signed_url_metadata_post": {
            "title": "Body_save_file_headers_and_generate_signed_url_metadata_post",
            "required": [
                "fileName",
                "productType"
            ],
            "type": "object",
            "properties": {
                "fileName": {
                    "title": "File name",
                    "type": "string",
                    "description": "Signed URL will be generated to save file with this name."
                },
                "productType": {
                    "title": "Product type",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ProductTypeModel"
                        }
                    ]
                }
            }
        },
        "Body_save_file_headers_map_and_trigger_processing": {
            "title": "Body_save_file_headers_map_and_trigger_processing",
            "required": [
                "additionalProp1",
                "additionalProp2",
                "additionalProp3"
            ],
            "type": "object",
            "properties": {
                "additionalProp1": {
                    "title": "Additional Prop1",
                    "type": "string",
                    "description": "Mapped Header"
                },
                "additionalProp2": {
                    "title": "Additional Prop2",
                    "type": "string",
                    "description": "Mapped Header"
                },
                "additionalProp3": {
                    "title": "Additional Prop3",
                    "type": "string",
                    "description": "Mapped Header"
                }
            }
        },
        "FieldMapModel": {
            "title": "FieldMapModel",
            "type": "object",
            "properties": {
                "fileHeader": {
                    "title": "Fileheader",
                    "type": "string",
                    "description": "Field name from the CSV file."
                },
                "field": {
                    "title": "Field",
                    "type": "string",
                    "description": "Field name we expect to see."
                },
                "isRequired": {
                    "title": "Isrequired",
                    "type": "boolean",
                    "description": "This field must be mapped to a file header."
                }
            },
            "description": "Field metadata model. If field matches one of the file headers the fileHeader filed would be set."
        },
        "FileRecordModel": {
            "title": "FileRecordModel",
            "required": [
                "id"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "title": "Id",
                    "type": "string",
                    "description": "Unique record ID"
                },
                "filePath": {
                    "title": "Filepath",
                    "type": "string",
                    "description": "Name of the file"
                },
                "productType": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ProductTypeModel"
                        }
                    ],
                    "description": "Product type for this file",
                    "default": "legacy"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/FileStatusModel"
                        }
                    ],
                    "description": "Processing status for this file",
                    "default": "uploading"
                },
                "userName": {
                    "title": "Username",
                    "type": "string",
                    "description": "Full User name who uploaded this file."
                },
                "uploadDate": {
                    "title": "Uploaddate",
                    "type": "string",
                    "description": "Date when file was uploaded.",
                    "format": "date"
                },
                "recordVolume": {
                    "title": "Recordvolume",
                    "type": "integer",
                    "description": "Number of records in the file. When file is processed by the backend this number is updated.",
                    "default": 0
                }
            },
            "description": "This is the description of the main model"
        },
        "FileStatusModel": {
            "title": "FileStatusModel",
            "enum": [
                "uploading",
                "analyzing",
                "analyzed",
                "enqueued",
                "processing",
                "failure",
                "done",
                "canceled"
            ],
            "type": "string",
            "description": "An enumeration."
        },
        "FileMetadataModel": {
            "title": "File metadata model",
            "type": "object",
            "properties": {
                "totalRows": {
                    "title": "Totalrows",
                    "type": "integer",
                    "description": "Total File Rows"
                },
                "headers": {
                    "title": "Headers",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Header"
                    },
                    "description": "Headers provided for file"
                },
                "data": {
                    "title": "Data",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "First 50 records for uploaded file"
                },
                "headersMap": {
                    "title": "Headers Mapping for this file and product type",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/FieldMapModel"
                    },
                    "description": "First 50 records for uploaded file"
                }
            }
        },
        "Header": {
            "title": "Header",
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the header where the count of empty rows is performed"
                },
                "emptyRows": {
                    "title": "Emptyrows",
                    "type": "integer",
                    "description": "Number of empty rows corresponding to the header",
                    "default": 0
                }
            }
        },
        "FileRecordModelWithMeta": {
            "title": "FileRecordModel",
            "required": [
                "id"
            ],
            "type": "object",
            "properties": {
                "id": {
                    "title": "Id",
                    "type": "string",
                    "description": "Unique record ID"
                },
                "filePath": {
                    "title": "Filepath",
                    "type": "string",
                    "description": "Name of the file"
                },
                "productType": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/ProductTypeModel"
                        }
                    ],
                    "description": "Product type for this file",
                    "default": "legacy"
                },
                "status": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/FileStatusModel"
                        }
                    ],
                    "description": "Processing status for this file",
                    "default": "uploading"
                },
                "userName": {
                    "title": "Username",
                    "type": "string",
                    "description": "Full User name who uploaded this file."
                },
                "uploadDate": {
                    "title": "Uploaddate",
                    "type": "string",
                    "description": "Date when file was uploaded.",
                    "format": "date"
                },
                "recordVolume": {
                    "title": "Recordvolume",
                    "type": "integer",
                    "description": "Number of records in the file. When file is processed by the backend this number is updated.",
                    "default": 0
                },
                "meta": {
                    "title": "Meta",
                    "allOf": [
                        {
                            "$ref": "#/definitions/FileMetadataModel"
                        }
                    ],
                    "description": "Metadata for this file, created by file analyzer."
                },
                "userSelectedHeaders": {
                    "title": "Userselectedheaders",
                    "type": "object",
                    "description": "File header mapping selected by the user"
                },
                "error": {
                    "title": "fileError",
                    "type": "string",
                    "description": "Error produced if file upload caused any errors while uploading"
                }
            },
            "description": "This is the description of the main model"
        },
        "Body_charts_post": {
            "title": "Body_charts_post",
            "required": [
                "reportKey",
                "aggregationKey",
                "filterValues"
            ],
            "type": "object",
            "properties": {
                "reportKey": {
                    "title": "Report key",
                    "type": "string",
                    "description": "Unique identifier for any given report",
                    "example": "enrollmentlens.strategicOverview"
                },
                "aggregationKey": {
                    "title": "Aggregation key",
                    "type": "string",
                    "description": "Unique identifier for any given aggregation",
                    "example": "enrollmentlens.strategicOverview.funnelComparison"
                },
                "filterValues": {
                    "title": "Filter Values",
                    "type": "array",
                    "description": "list of filters to apply to the query",
                    "items": {
                        "type": "object",
                        "properties": {
                            "values": {
                                "description": "Specific values to apply to the query, used as an IN('value1', 'value2') in the query",
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "example": "2020"
                                }
                            },
                            "filter": {
                                "type": "object",
                                "properties": {
                                    "filterKey": {
                                        "type": "string",
                                        "description": "Unique key for the filter to be applied to the query",
                                        "example": "enrollmentlens.strategicInsight.funnelComparison.date1"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
