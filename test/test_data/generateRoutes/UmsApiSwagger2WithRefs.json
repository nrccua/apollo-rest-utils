{
    "swagger": "2.0",
    "info": {
        "version": "1.2.35",
        "title": "User Management System API",
        "termsOfService": "",
        "contact": {
            "email": "something@nrccua.org"
        },
        "description": "\"User Management System API. Note: most errors have a message and a status field in the response body, but SwaggerUI won't show it (open issue in swagger-ui)\"\n"
    },
    "host": "api-dev-ums.nrccua.org",
    "basePath": "/v1",
    "tags": [
        {
            "name": "Authorization",
            "description": "Authorization"
        },
        {
            "name": "User",
            "description": "User"
        },
        {
            "name": "Organization",
            "description": "Organization"
        },
        {
            "name": "Application",
            "description": "Application"
        },
        {
            "name": "Module",
            "description": "Module"
        },
        {
            "name": "Note",
            "description": "Note"
        },
        {
            "name": "OrganizationApplication",
            "description": "Organization Application Relationship"
        },
        {
            "name": "Role",
            "description": "Role"
        },
        {
            "name": "UserApplication",
            "description": "User Application Relationship"
        },
        {
            "name": "UserOrganization",
            "description": "User Organization Relationship"
        },
        {
            "name": "UserApplicationModule",
            "description": "User Aplication Module Relationship"
        },
        {
            "name": "OrganizationApplicationModule",
            "description": "Organization Application Module Relationship"
        },
        {
            "name": "Encrypt",
            "description": "Encrypt"
        }
    ],
    "schemes": [
        "https",
        "http"
    ],
    "securityDefinitions": {
        "JWT": {
            "description": "For accessing the API a valid JWT token must be passed in all the queries in the 'Authorization' header.\n\n\nA valid JWT token is generated by the API and returned as answer of a call to the route /authenticate giving a valid user & password.\n\n\nThe following syntax must be used in the 'Authorization' header :\n\n    JWT xxxxxx.yyyyyyy.zzzzzz\n",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "AWS": {
            "description": "AWS API Key for development enviroment\n",
            "type": "apiKey",
            "name": "x-api-key",
            "in": "header"
        }
    },
    "paths": {
        "/authenticate": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "authenticate",
                "security": [
                    {
                        "AWS": []
                    }
                ],
                "summary": "Authenticates user",
                "description": "Authenticates active user",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "userName and password to be used in the authentication process",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AuthenticationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "userName and password successfully authenticated",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/authenticatev2": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "authenticatev2",
                "security": [
                    {
                        "AWS": []
                    }
                ],
                "summary": "Authenticates user v2",
                "description": "Authenticates active user",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "userName and password to be used in the authentication process",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Authenticationv2Request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "userName and password successfully authenticated",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/activate-user": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "activateUser",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Activate user",
                "description": "Verifies user e-mail and if e-mail is valid, activate user and set userName and passname",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains the user e-mail to be verified and the verificationCode, which corresponds to the authToken in the user model; the userName to be set; the password; and user uid.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ActivateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully verified",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "user": {
                                    "$ref": "#/definitions/User"
                                },
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/forgot-password": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "forgotPassword",
                "security": [
                    {
                        "AWS": []
                    }
                ],
                "summary": "Send forgot password e-mail",
                "description": "Requests a password change. An e-mail with instructions on how to change the password will be sent to the configured user e-mail\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Send-Email",
                        "in": "header",
                        "description": "Indicates whether an actual email should be sent or not. For security reasons the default behavior is to not send any email.\n",
                        "type": "string",
                        "enum": [
                            "not-allowed",
                            "allowed"
                        ]
                    },
                    {
                        "name": "Return-Verification-Code",
                        "in": "header",
                        "description": "Indicates whether the user verification code should be returned or not. For security reasons the default behavior is to not return it.",
                        "type": "string",
                        "enum": [
                            "not-allowed",
                            "allowed"
                        ]
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body should have the e-mail or userName of the user that forgot his password",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "E-mail with password change information sent successfully",
                        "schema": {
                            "$ref": "#/definitions/StandardUserResponse"
                        }
                    },
                    "204": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/reset-password": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "resetPassword",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Changes user password",
                "description": "Changes user password to a new password provided in the request body\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body must always contains the new password field. The uid or e-mail to identify the user is only necessary for LdapUsers trying to change some other user password, or for UMS users that are logged off, in this case it should only contain the verification code (uid and e-mail will be ignored).\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Password successfully modified",
                        "schema": {
                            "$ref": "#/definitions/StandardUserResponse"
                        }
                    },
                    "204": {
                        "description": "User not found"
                    },
                    "401": {
                        "description": "Info doesn't match"
                    }
                }
            }
        },
        "/refresh-token": {
            "get": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "refresh-token",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Refresh JWT",
                "description": "Return a new Json Web Token with a refreshed expiration time",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "JWT successfully refreshed",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "sessionToken": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/validate-token": {
            "get": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "validate-token",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Validate JWT",
                "description": "Return the JWT internal payload if it's a valide (and not expired) UMS token",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "JWT successfully validated",
                        "schema": {
                            "$ref": "#/definitions/Credentials"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/validate-email": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "validateEmail",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Validate Email",
                "description": "Return a flag indicating if e-mails is valid (not used yet) or invalid.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body must contain the e-mail to be validated, in other words, an e-mail that uniqueness will be verified.\n",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string",
                                    "example": "son.goku@capsule-corp.org"
                                },
                                "application": {
                                    "type": "string",
                                    "example": "datalab"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Email validated",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "isEmailUnique": {
                                    "type": "boolean",
                                    "example": true
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/validate-username": {
            "post": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "validateUsername",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Validate Username",
                "description": "Returns a flag indicating if the username is valid and another flag indicating if the username was not used yet\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body must contain the username to be validated",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "email": {
                                    "type": "string",
                                    "example": "son.goku"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Username validated",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "isUserNameUnique": {
                                    "type": "boolean",
                                    "example": true
                                },
                                "isUserNameValid": {
                                    "type": "boolean",
                                    "example": true
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users": {
            "post": {
                "tags": [
                    "User"
                ],
                "operationId": "createUser",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates new user",
                "description": "Creates a new User passing user data. Not all user model fields are required, check its description for reference\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Send-Email",
                        "in": "header",
                        "description": "Indicates whether an actual email should be sent or not. For security reasons the default behavior is to not send any email.",
                        "type": "string",
                        "enum": [
                            "not-allowed",
                            "allowed"
                        ]
                    },
                    {
                        "name": "Return-Verification-Code",
                        "in": "header",
                        "description": "Indicates whether the user verification code should be returned or not. For security reasons the default behavior is to not return it.",
                        "type": "string",
                        "enum": [
                            "not-allowed",
                            "allowed"
                        ]
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body is a JSON describing the user to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User created successfuly",
                        "schema": {
                            "$ref": "#/definitions/StandardUserResponse"
                        }
                    },
                    "400": {
                        "description": "Validation error"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "User"
                ],
                "operationId": "readUserList",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets list of user",
                "parameters": [
                    {
                        "name": "application",
                        "in": "query",
                        "description": "User application UID. It's not implemented yet!",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "organization",
                        "in": "query",
                        "description": "User organization UID. It's not implemented yet!",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "User status Check \"Try Out\" for options Select more than one by holding ctrl\n",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "Active",
                                "Inactive",
                                "Pending",
                                "Disabled"
                            ]
                        }
                    },
                    {
                        "name": "firstName",
                        "in": "query",
                        "description": "Filter user list by firstName Example: firstName=Pedro|Flavio This will get all users with Pedro or Flavio as the first name\n",
                        "type": "string"
                    },
                    {
                        "name": "lastName",
                        "in": "query",
                        "description": "Filter user list by lastName Example: lastName=Oliveira|Santos This will get all users with Oliveira or Santos as the last name\n",
                        "type": "string"
                    },
                    {
                        "name": "userName",
                        "in": "query",
                        "description": "Filter user list by userName Example: userName=Pedro123|Flavio345 This will get the users with Pedro123 or Flavio345 as the userName\n",
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Filter user list by email Example: email=admin@nrccuaorg|user@nrccuaorg This will get the users with admin@nrccuaorg or user@nrccuaorg as the email\n",
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter user list by type Example: type=LdapUser\n",
                        "type": "string"
                    },
                    {
                        "name": "externalSource",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by external ID source"
                    },
                    {
                        "name": "externalId",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by external ID value"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    },
                    {
                        "name": "simple",
                        "in": "query",
                        "type": "boolean",
                        "description": "If marked as true UMS will return a simple version of each object (without joins or aggregations), defaults to false"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Indicate the field used to order the resulting list Example: fieldOne,fieldTwo(desc) This will return the list sorted by fieldOne (ascending, the default) and then by fieldTwi (descending)\n",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of Users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserSmall"
                            }
                        },
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of possible searches to be returned (excluding limit and offset)"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "head": {
                "tags": [
                    "User"
                ],
                "operationId": "readUserListHead",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets the header of the list of user",
                "parameters": [
                    {
                        "name": "application",
                        "in": "query",
                        "description": "User application UID. It's not implemented yet!",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "organization",
                        "in": "query",
                        "description": "User organization UID. It's not implemented yet!",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "User status Check \"Try Out\" for options Select more than one by holding ctrl\n",
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "Active",
                                "Inactive",
                                "Pending",
                                "Disabled"
                            ]
                        }
                    },
                    {
                        "name": "firstName",
                        "in": "query",
                        "description": "Filter user list by firstName Example: firstName=Pedro|Flavio This will get all users with Pedro or Flavio as the first name and return their metadata in the header\n",
                        "type": "string"
                    },
                    {
                        "name": "lastName",
                        "in": "query",
                        "description": "Filter user list by lastName Example: lastName=Oliveira|Santos This will get all users with Oliveira or Santos as the last name and return their metadata in the header\n",
                        "type": "string"
                    },
                    {
                        "name": "userName",
                        "in": "query",
                        "description": "Filter user list by userName Example: userName=Pedro123|Flavio345 This will get the users with Pedro123 or Flavio345 as the userName and return their metadata in the header\n",
                        "type": "string"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "description": "Filter user list by email Example: email=admin@nrccuaorg|user@nrccuaorg This will get the users with admin@nrccuaorg or user@nrccuaorg as the email and return their metadata in the header\n",
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for data used to generate the metadata"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data used to generate the metadata"
                    },
                    {
                        "name": "simple",
                        "in": "query",
                        "type": "boolean",
                        "description": "If marked as true UMS will return a simple version of each object (without joins or aggregations), defaults to false"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The header of users along with their metadata",
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of possible searches to be returned (excluding limit and offset)"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/{uid}": {
            "get": {
                "tags": [
                    "User"
                ],
                "operationId": "readUser",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Finds user by UID",
                "description": "Returns a single user by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "simple",
                        "in": "query",
                        "type": "boolean",
                        "description": "If marked as true UMS will return a simple version of the User object, defaults to false"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "204": {
                        "description": "No user found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "operationId": "updateUser",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Updates an user",
                "description": "Updates user identified by UID. Parameters to be updated are provided in the requested body and correspond to the fields described in user model. Valid user fields not shown in the model will be ignored in update (createAt, lastUpdated, ...) All parameters are optional, but at least one parameter must be provided in the request body for the request to succeed. The UID field can be provided but must match the one provided in path\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fields and values to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User update successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "example": "Success"
                                },
                                "user": {
                                    "$ref": "#/definitions/User"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "User not found"
                    },
                    "400": {
                        "description": "Wrong field format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "operationId": "deleteUser",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an user",
                "description": "Sets an user as inactive in the database",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/DeleteUserResponse"
                        }
                    },
                    "204": {
                        "description": "User not found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users/{uid}/modules/{moduleUid}/authorize": {
            "get": {
                "tags": [
                    "User"
                ],
                "operationId": "isUserModAuthorized",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Checks if user has a permission for module",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module uid or module key",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/AuthorizeResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/users/{uid}/applications/{appUid}/authorize": {
            "get": {
                "tags": [
                    "User"
                ],
                "operationId": "isUserAppAuthorized",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Checks if user has a permission for application",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "appUid",
                        "in": "path",
                        "description": "Application uid or application key",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "authorize": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/users/{uid}/attributes": {
            "get": {
                "tags": [
                    "User"
                ],
                "operationId": "getAttributes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets user attributes",
                "description": "Returns the attributes from an user by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No User with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "operationId": "updateUserAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an user attribute in batch",
                "description": "Creates or updates the user attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be created or updated",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No User with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "operationId": "deleteUserAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an user attributes in batch",
                "description": "Delete multiple user attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be deleted",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeleteAttributeRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No User with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users/{uid}/attributes/keys": {
            "get": {
                "tags": [
                    "User"
                ],
                "operationId": "readUserAttributesKeys",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets user attributes keys",
                "description": "Returns the keys from user attributes",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes keys retrieved",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "204": {
                        "description": "No user with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users/{uid}/attributes/keys/{key}": {
            "get": {
                "tags": [
                    "User"
                ],
                "operationId": "readUserAttributesByKey",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets user attributes by key",
                "description": "Returns the attributes from an user by its key",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "204": {
                        "description": "No user with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "operationId": "updateUserAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an user attribute",
                "description": "Creates or updates an attribute from the user's attributes array by the user's UID in the path and the attribute key and value in the body If the key is not present in the array, the attribute is created, if the key is present the attribute is updated\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an attribute entry to be created or updated",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No User with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "operationId": "deleteUserAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an user attribute",
                "description": "Deletes an attribute from the user's attributes array by the user's UID in the path and the attribute key in the body\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No User with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users/{uid}/notes": {
            "get": {
                "tags": [
                    "User"
                ],
                "operationId": "getUserNotes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets user notes",
                "description": "Returns the notes from an user by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notes retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/NoteSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No User with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users/{uid}/modifications": {
            "get": {
                "tags": [
                    "User"
                ],
                "operationId": "getUserModifications",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets user modifications",
                "description": "Returns the modifications from an user by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Modifications retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Modification"
                            }
                        }
                    },
                    "204": {
                        "description": "No User with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users/{uid}/login-history": {
            "get": {
                "tags": [
                    "User"
                ],
                "operationId": "getLoginHistory",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets user login history",
                "description": "Returns the login history from an user by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login history retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/LoginHistory"
                            }
                        }
                    },
                    "204": {
                        "description": "No User with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users/{uid}/impersonate": {
            "post": {
                "tags": [
                    "User"
                ],
                "operationId": "impersonateUser",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Impersonates a user",
                "description": "Impersonates a user by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID of the user you want to impersonate",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Impersonation successful",
                        "schema": {
                            "$ref": "#/definitions/ImpersonateResponse"
                        }
                    },
                    "204": {
                        "description": "No User with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "operationId": "stopImpersonateUser",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Stops impersonating an user",
                "description": "Stops impersonating an user by its UID and JWT payload. JWT should be the same as the one created in the POST impersonate route. An JWT obtained from the login route won't work on this route\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID of the user you want to stop impersonating (should match payload)",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Stopped impersonation successful",
                        "schema": {
                            "$ref": "#/definitions/AuthenticationResponse"
                        }
                    },
                    "204": {
                        "description": "No User with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{uid}/impersonate-history": {
            "get": {
                "tags": [
                    "User"
                ],
                "operationId": "getImpersonateHistory",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets user impersonate history",
                "description": "Returns the impersonate history from an user by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Impersonate history retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ImpersonateHistory"
                            }
                        }
                    },
                    "204": {
                        "description": "No User with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users/{uid}/resend-email": {
            "post": {
                "tags": [
                    "User"
                ],
                "operationId": "resendEmail",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    }
                ],
                "summary": "Resend Email",
                "description": "Sends an email to activate or invite a user again\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "Send-Email",
                        "in": "header",
                        "description": "Indicates whether an actual email should be sent or not. For security reasons the default behavior is to not send any email.\n",
                        "type": "string",
                        "enum": [
                            "not-allowed",
                            "allowed"
                        ]
                    },
                    {
                        "name": "Return-Verification-Code",
                        "in": "header",
                        "description": "Indicates whether the user verification code should be returned or not. For security reasons the default behavior is to not return it.",
                        "type": "string",
                        "enum": [
                            "not-allowed",
                            "allowed"
                        ]
                    },
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "emailConfig": {
                                    "$ref": "#/definitions/EmailConfig"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "E-mail sent successfully",
                        "schema": {
                            "$ref": "#/definitions/StandardUserResponse"
                        }
                    },
                    "204": {
                        "description": "User not found"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/{uid}/authorizations": {
            "post": {
                "tags": [
                    "User"
                ],
                "operationId": "readWithAuthorizations",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    }
                ],
                "summary": "Read User with Authorizations",
                "description": "Read User with Authorizations based on ApplicationKey and OrganizationUid\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "applicationKey": {
                                    "type": "string",
                                    "example": "datalab"
                                },
                                "organizationUid": {
                                    "type": "string",
                                    "example": "105f7ec8-c4d8-4287-839d-61f7074d9977"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/UserAuthorizations"
                        }
                    },
                    "204": {
                        "description": "User not found"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users/{uid}/external-ids": {
            "post": {
                "tags": [
                    "User"
                ],
                "operationId": "createUserExternalId",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates a user external ID record",
                "description": "Creates a user external ID record\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "External ID fields to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateUserExternalIdRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and the new external ID",
                        "schema": {
                            "$ref": "#/definitions/CreateUserExternalIdResponse"
                        }
                    },
                    "204": {
                        "description": "No User with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations": {
            "post": {
                "tags": [
                    "Organization"
                ],
                "operationId": "createOrg",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates new organization",
                "description": "Creates a new organization passing organization data Not all organization model fields are required, check its description for reference\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body is itself a JSON describing the organization to be created\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Organization created successfully",
                        "schema": {
                            "$ref": "#/definitions/CreateOrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Missing field at request body or wrong fields"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "readOrgList",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets list of organization",
                "description": "Gets a list of organizations Query parameters can be provided to filter the returned organizations\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "Active",
                            "Inactive",
                            "Pending"
                        ],
                        "description": "Organization status Check \"Try it out\" for possible options"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter organizations list by name Example: name=Org1|Org2 This will get all organizations with Org1 or Org2 as the name\n",
                        "type": "string"
                    },
                    {
                        "name": "sfAccountId",
                        "in": "query",
                        "description": "Filter organizations list by sfAccountId Example: sfAccountId=0016000000ImzzJAAR|0017000019ImzzJBAR This will get all organizations with those sfAccountIds\n",
                        "type": "string"
                    },
                    {
                        "name": "externalId",
                        "in": "query",
                        "description": "Filter organizations list by externalId Example: externalId=003422 This will get all organizations with those externalId (FICE)\n",
                        "type": "string"
                    },
                    {
                        "name": "actCode",
                        "in": "query",
                        "description": "Filter organizations list by actCode Example: actCode=0028 This will get all organizations with those Act College Codes\n",
                        "type": "string"
                    },
                    {
                        "name": "orgType",
                        "in": "query",
                        "description": "Filter organizations list by type Example: orgType=Organization This will get all organizations with type = Organization\n",
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter organizations list by type Example: type=Business This will get all organizations with orgType field pointing to an organization named 'Business'\n",
                        "type": "string"
                    },
                    {
                        "name": "externalSource",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by external ID source"
                    },
                    {
                        "name": "externalValue",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by external ID value"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    },
                    {
                        "name": "simple",
                        "in": "query",
                        "type": "boolean",
                        "description": "If marked as true UMS will return a simple version of each object (without joins or aggregations), defaults to false"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Indicate the field used to order the resulting list Example: fieldOne,fieldTwo(desc) This will return the list sorted by fieldOne (ascending, the default) and then by fieldTwi (descending)\n",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of Organizations",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GetOrganizationsResponse"
                            }
                        },
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of possible searches to be returned (excluding limit and offset)"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "head": {
                "tags": [
                    "Organization"
                ],
                "operationId": "readOrgListHead",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets the header of the list of organization",
                "description": "Gets the header of the list of organizations Query parameters can be provided to filter the returned organizations\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "type": "string",
                        "enum": [
                            "Active",
                            "Inactive",
                            "Pending"
                        ],
                        "description": "Organization status Check \"Try it out\" for possible options"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter organizations list by name Example: name=Org1|Org2 This will get all organizations with Org1 or Org2 as the name and return their metadata in the header\n",
                        "type": "string"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter organizations list by type Example: type=Business This will get all organizations with orgType field pointing to an organization named 'Business' and return their metadata in the header\n",
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for data used to generate the metadata"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data used to generate the metadata"
                    },
                    {
                        "name": "simple",
                        "in": "query",
                        "type": "boolean",
                        "description": "If marked as true UMS will return a simple version of each object (without joins or aggregations), defaults to false"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The header of organizations along with their metadata",
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of possible searches to be returned (excluding limit and offset)"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/organizations/{uid}": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "readOrg",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Finds organization by UID, name, externalId (FICE) or actCode",
                "description": "Returns an organization by the provided UID, organization Name, externalId (FICE) or Act College Code.",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the organization to be returned (name, externalId (FICE) or Act College Code can also be used)",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "simple",
                        "in": "query",
                        "type": "boolean",
                        "description": "If marked as true UMS will return a simple version of the Organization object, defaults to false"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An Organization object",
                        "schema": {
                            "$ref": "#/definitions/Organization"
                        }
                    },
                    "204": {
                        "description": "No organization found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "Organization"
                ],
                "operationId": "updateOrg",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Updates an organization",
                "description": "Updates organization identified by UID Parameters to be updated are provided in the requested body and correspond to the fields described in organization model All fields are optional, but at least one should be provided in the body",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the organization to be modified",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Fields and values to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization updated",
                        "schema": {
                            "$ref": "#/definitions/CreateOrganizationResponse"
                        }
                    },
                    "204": {
                        "description": "Organization not found"
                    },
                    "400": {
                        "description": "Wrong field format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/organizations/{uid}/modules/{moduleUid}/authorize": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "isOrgModAuthorized",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Checks if organization has permission",
                "description": "Checks if organization has permission for a certain module",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization uid Example: ef34d669-8061-4131-84d3-d7e508d784fd",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module uid Example: ef34d669-8061-4131-84d3-d7e508d784fd or Module key Example: datalab.classplanner",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permissions check object",
                        "schema": {
                            "$ref": "#/definitions/AuthorizeResponse"
                        }
                    },
                    "400": {
                        "description": "Wrong field format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/organizations/{uid}/applications/{appUid}/authorize": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "isOrgAppAuthorized",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Checks if organization has permission Application",
                "description": "Checks if organization has permission for a certain application",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization uid Example: ef34d669-8061-4131-84d3-d7e508d784fd",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "appUid",
                        "in": "path",
                        "description": "Application uid Example: ef34d669-8061-4131-84d3-d7e508d784fd or Application key Example: datalab",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permissions check object",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "authorize": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Wrong field format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/organizations/{uid}/attributes": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "readOrgAttributes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets organization attributes",
                "description": "Returns the attributes from an organization by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "Organization"
                ],
                "operationId": "updateOrgAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an organization attribute in batch",
                "description": "Creates or updates the organization attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be created or updated",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No Organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Organization"
                ],
                "operationId": "deleteOrgAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an organization attributes in batch",
                "description": "Delete multiple organization attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be deleted",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeleteAttributeRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No Organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations/{uid}/attributes/keys": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "readOrgAttributesKeys",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets organization attributes keys",
                "description": "Returns the keys from organization attributes",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes keys retrieved",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "204": {
                        "description": "No organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations/{uid}/attributes/keys/{key}": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "readOrgAttributesByKey",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets organization attributes by key",
                "description": "Returns the attributes from an organization by its key",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "204": {
                        "description": "No organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "Organization"
                ],
                "operationId": "updateOrgAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an organization attribute",
                "description": "Creates or updates an attribute from the organization's attributes array by the organization's UID in the path and the attribute key and value in the body If the key is not present in the array, the attribute is created, if the key is present the attribute is updated\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an attribute entry to be created or updated\n",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Organization"
                ],
                "operationId": "deleteOrgAttributes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an organization attribute",
                "description": "Deletes an attribute from the organization's attributes array by the organization's UID in the path and the attribute key in the body\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/DeletedAttribute"
                        }
                    },
                    "204": {
                        "description": "No organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations/{uid}/programs": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "readOrgPrograms",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets organization programs",
                "description": "Returns the programs from an organization by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Programs retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProgramSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "Organization"
                ],
                "operationId": "updateOrgProgram",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an organization program",
                "description": "Creates or updates an program from the organization's programs array by the organization's UID in the path and the program key in the body. If the key is not present in the array, the program is created, if the key is present the program is updated\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an program entry to be created or updated\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProgramRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current program array",
                        "schema": {
                            "$ref": "#/definitions/ProgramResponse"
                        }
                    },
                    "204": {
                        "description": "No organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Organization"
                ],
                "operationId": "deleteOrgProgram",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an organization program",
                "description": "Deletes an program from the organization's programs array by the organization's UID in the path and the program key in the body\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains the program key to be deleted",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProgramRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current program array",
                        "schema": {
                            "$ref": "#/definitions/ProgramResponse"
                        }
                    },
                    "204": {
                        "description": "No organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations/{uid}/notes": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "getOrgNotes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets organization notes",
                "description": "Returns the notes from an organization by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notes retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/NoteSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations/{uid}/modifications": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "getOrgModifications",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets organization modifications",
                "description": "Returns the modifications from an organization by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Modifications retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Modification"
                            }
                        }
                    },
                    "204": {
                        "description": "No organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations/{uid}/authorizations": {
            "post": {
                "tags": [
                    "Organization"
                ],
                "operationId": "readOrgWithAuthorizations",
                "security": [
                    {
                        "AWS": []
                    },
                    {
                        "JWT": []
                    }
                ],
                "summary": "Read Organization with Authorizations",
                "description": "Read Organization with Authorizations based on ApplicationKey\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID (name, externalId (FICE) or Act College Code can also be used)",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "simple",
                        "in": "query",
                        "type": "boolean",
                        "description": "If marked as true UMS will return a simple version of the Organization object, defaults to true"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "applicationKey": {
                                    "type": "string",
                                    "example": "datalab"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization successfully retrieved",
                        "schema": {
                            "$ref": "#/definitions/OrganizationAuthorizations"
                        }
                    },
                    "204": {
                        "description": "Organization not found"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/organizations/{uid}/external-ids": {
            "post": {
                "tags": [
                    "Organization"
                ],
                "operationId": "createOrganizationExternalId",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates an organization external ID record",
                "description": "Creates an organization external ID record\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "External ID fields to be created",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateOrganizationExternalIdRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and new external ID",
                        "schema": {
                            "$ref": "#/definitions/CreateOrganizationExternalIdResponse"
                        }
                    },
                    "204": {
                        "description": "No Organization with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations/{uid}/modules/{moduleKey}/users": {
            "get": {
                "tags": [
                    "Organization"
                ],
                "operationId": "getOrganizationUsersByModule",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Returns users (non-LDAP only by default) have access for the given module key",
                "description": "Returns users (non-LDAP only by default) have access for the given module key\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleKey",
                        "in": "path",
                        "description": "Module key",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "application",
                        "in": "header",
                        "description": "Application key",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "includeLdap",
                        "in": "query",
                        "type": "boolean",
                        "description": "Set to true if you wish to include LDAP users with this permission check"
                    },
                    {
                        "name": "returnFirst",
                        "in": "query",
                        "type": "boolean",
                        "description": "Set to true to return early with the first permitted user"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permitted users retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UserReallySmall"
                            }
                        }
                    }
                }
            }
        },
        "/applications": {
            "post": {
                "tags": [
                    "Application"
                ],
                "operationId": "createApp",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates new application",
                "description": "Creates a new application passing application data Not all application model fields are required, check its description for reference\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body is itself a JSON describing the application to be created\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateApplicationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Application created successfuly",
                        "schema": {
                            "$ref": "#/definitions/CreateApplicationResponse"
                        }
                    },
                    "400": {
                        "description": "Missing field at request body or wrong fields"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "Application"
                ],
                "operationId": "readAppList",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets list of applications",
                "description": "Gets a list of applications Query parameters can be provided to filter the returned applications",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter applications list by name Example: name=App1|App2 This will get all applications with App1 or App2 as the name\n",
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "description": "Filter applications list by key Example: key=Key1|Key2 This will get all applications with Key1 or Key2 as the key\n",
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    },
                    {
                        "name": "simple",
                        "in": "query",
                        "type": "boolean",
                        "description": "If marked as true UMS will return a simple version of each object (without joins or aggregations), defaults to false"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Indicate the field used to order the resulting list Example: fieldOne,fieldTwo(desc) This will return the list sorted by fieldOne (ascending, the default) and then by fieldTwi (descending)\n",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of Applications",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GetApplicationSmall"
                            }
                        },
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of possible searches to be returned (excluding limit and offset)"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "head": {
                "tags": [
                    "Application"
                ],
                "operationId": "readAppListHeader",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets the header of the list of applications",
                "description": "Gets the header of the list of applications Query parameters can be provided to filter the returned applications that generate the metadata",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter applications list by name Example: name=App1|App2 This will get all applications with App1 or App2 as the name and return their metadata in the header\n",
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "description": "Filter applications list by key Example: key=Key1|Key2 This will get all applications with Key1 or Key2 as the key and return their metadata in the header\n",
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for data used to generate the metadata"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data used to generate the metadata"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The header of applications along with their metadata",
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of possible searches to be returned (excluding limit and offset)"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/applications/{uid}": {
            "get": {
                "tags": [
                    "Application"
                ],
                "operationId": "readApp",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Finds application by UID",
                "description": "Returns a single application by its UID (or Key)",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the application to be returned, application key can be also used",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An Application object",
                        "schema": {
                            "$ref": "#/definitions/Application"
                        }
                    },
                    "204": {
                        "description": "No Application found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "Application"
                ],
                "operationId": "updateApp",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Updates an application",
                "description": "Updates application identified by UID Parameters to be updated are provided in the requested body and correspond to the fields described in application model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the application to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Fields and values to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateApplicationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Application update successfully",
                        "schema": {
                            "$ref": "#/definitions/UpdateApplicationResponse"
                        }
                    },
                    "204": {
                        "description": "Application not found"
                    },
                    "400": {
                        "description": "Wrong field format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/applications/{uid}/authorize/{moduleUid}/": {
            "get": {
                "tags": [
                    "Application"
                ],
                "operationId": "isAppAuthorized",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Checks if application has permission",
                "description": "Checks if application has permission for a module",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Uid of the application whose permission will be verified",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Uid identifying the module which the permission belongs",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Permissions check object",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "authorized": {
                                    "type": "boolean"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Wrong field format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/applications/{uid}/attributes": {
            "get": {
                "tags": [
                    "Application"
                ],
                "operationId": "getAppAttributes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets application attributes",
                "description": "Returns the attributes from an application by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Application UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No application with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "Application"
                ],
                "operationId": "updateAppAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an application attribute in batch",
                "description": "Creates or updates the application attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Application UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be created or updated",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No Application with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Application"
                ],
                "operationId": "deleteAppAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an application attributes in batch",
                "description": "Delete multiple application attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Application UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be deleted",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeleteAttributeRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No Application with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/applications/{uid}/attributes/keys": {
            "get": {
                "tags": [
                    "Application"
                ],
                "operationId": "readAppAttributesKeys",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets application attributes keys",
                "description": "Returns the keys from application attributes",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Applications UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes keys retrieved",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "204": {
                        "description": "No application with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/applications/{uid}/attributes/keys/{key}": {
            "get": {
                "tags": [
                    "Application"
                ],
                "operationId": "readAppAttributesByKey",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets application attributes by key",
                "description": "Returns the attributes from an application by its key",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Application UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "204": {
                        "description": "No application with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "Application"
                ],
                "operationId": "updateAppAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an application attribute",
                "description": "Creates or updates an attribute from the application's attributes array by the application's UID in the path and the attribute key and value in the body If the key is not present in the array, the attribute is created, if the key is present the attribute is updated\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Application UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an attribute entry to be created or updated\n",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No application with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Application"
                ],
                "operationId": "deleteAppAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an application attribute",
                "description": "Deletes an attribute from the application's attributes array by the application's UID in the path and the attribute key in the body\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Application UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/DeletedAttribute"
                        }
                    },
                    "204": {
                        "description": "No application with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/applications/{uid}/notes": {
            "get": {
                "tags": [
                    "Application"
                ],
                "operationId": "getAppNotes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets application notes",
                "description": "Returns the notes from an application by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Application UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notes retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/NoteSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No application with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/applications/{uid}/modifications": {
            "get": {
                "tags": [
                    "Application"
                ],
                "operationId": "getAppModifications",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets application modifications",
                "description": "Returns the modifications from an application by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Application UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Modifications retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Modification"
                            }
                        }
                    },
                    "204": {
                        "description": "No application with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/modules": {
            "post": {
                "tags": [
                    "Module"
                ],
                "operationId": "createModule",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates new module",
                "description": "Creates a new module passing module data Not all module model fields are required, check its description for reference\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body is itself a JSON describing the module to be created\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateModuleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Module created successfuly",
                        "schema": {
                            "$ref": "#/definitions/CreateModuleResponse"
                        }
                    },
                    "400": {
                        "description": "Missing field at request body or wrong fields"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "Module"
                ],
                "operationId": "readModuleList",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets list of modules",
                "description": "Gets a list of modules Query parameters can be provided to filter the returned modules",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter modules list by name Example: name=Module1|Module2 This will get all modules with Module1 or Module2 as the name\n",
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "description": "Filter modules list by key Example: key=Key1|Key2 This will get all modules with Key1 or Key2 as the key\n",
                        "type": "string"
                    },
                    {
                        "name": "applicationUid",
                        "in": "query",
                        "description": "Filter modules list by name Example: applicationUid=ef34d669-8061-4131-84d3-d7e508d784fd This will get all modules with applicationUid ef34d669-8061-4131-84d3-d7e508d784fd\n",
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    },
                    {
                        "name": "simple",
                        "in": "query",
                        "type": "boolean",
                        "description": "If marked as true UMS will return a simple version of each object (without joins or aggregations), defaults to false"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "description": "Indicate the field used to order the resulting list Example: fieldOne,fieldTwo(desc) This will return the list sorted by fieldOne (ascending, the default) and then by fieldTwi (descending)\n",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of Modules",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ModuleForList"
                            }
                        },
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of possible searches to be returned (excluding limit and offset)"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "head": {
                "tags": [
                    "Module"
                ],
                "operationId": "readModuleListHead",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets the header of the list of modules",
                "description": "Gets the header of the list of modules Query parameters can be provided to filter the returned modules",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "description": "Filter modules list by name Example: name=Module1|Module2 This will get all modules with Module1 or Module2 as the name and return their metadata in the header\n",
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "description": "Filter modules list by key Example: key=Key1|Key2 This will get all modules with Key1 or Key2 as the key and return their metadata in the header\n",
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for data used to generate the metadata"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data used to generate the metadata"
                    },
                    {
                        "name": "simple",
                        "in": "query",
                        "type": "boolean",
                        "description": "If marked as true UMS will return a simple version of each object (without joins or aggregations), defaults to false"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The header of modules along with their metadata",
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of possible searches to be returned (excluding limit and offset)"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/modules/{uid}": {
            "get": {
                "tags": [
                    "Module"
                ],
                "operationId": "readModule",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Finds module by UID",
                "description": "Returns a single module by its UID (or Key)",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the module to be returned (module key can be also used)",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An Module object",
                        "schema": {
                            "$ref": "#/definitions/Module"
                        }
                    },
                    "204": {
                        "description": "No Module found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "Module"
                ],
                "operationId": "updateModule",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Updates an module",
                "description": "Updates module identified by UID Parameters to be updated are provided in the requested body and correspond to the fields described in module model",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the module to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Fields and values to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateModuleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Module update successfully",
                        "schema": {
                            "$ref": "#/definitions/UpdateModuleResponse"
                        }
                    },
                    "204": {
                        "description": "Module not found"
                    },
                    "400": {
                        "description": "Wrong field format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/modules/{uid}/attributes": {
            "get": {
                "tags": [
                    "Module"
                ],
                "operationId": "getModuleAttributes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets module attributes",
                "description": "Returns the attributes from an module by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No module with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "Module"
                ],
                "operationId": "updateModuleAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an module attribute in batch",
                "description": "Creates or updates the module attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be created or updated",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No Module with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Module"
                ],
                "operationId": "deleteModuleAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an module attributes in batch",
                "description": "Delete multiple module attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be deleted",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeleteAttributeRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No Module with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/modules/{uid}/attributes/keys": {
            "get": {
                "tags": [
                    "Module"
                ],
                "operationId": "readModAttributesKeys",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets module attributes keys",
                "description": "Returns the keys from module attributes",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes keys retrieved",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "204": {
                        "description": "No module with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/modules/{uid}/attributes/keys/{key}": {
            "get": {
                "tags": [
                    "Module"
                ],
                "operationId": "readModAttributesByKey",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets module attributes by key",
                "description": "Returns the attributes from an module by its key",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "204": {
                        "description": "No module with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "Module"
                ],
                "operationId": "updateModuleAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an module attribute",
                "description": "Creates or updates an attribute from the module's attributes array by the module's UID in the path and the attribute key and value in the body If the key is not present in the array, the attribute is created, if the key is present the attribute is updated\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an attribute entry to be created or updated\n",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No module with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Module"
                ],
                "operationId": "deleteModuleAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an module attribute",
                "description": "Deletes an attribute from the module's attributes array by the module's UID in the path and the attribute key in the body\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/DeletedAttribute"
                        }
                    },
                    "204": {
                        "description": "No module with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/modules/{uid}/programs": {
            "get": {
                "tags": [
                    "Module"
                ],
                "operationId": "readModulePrograms",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets module programs",
                "description": "Returns the programs from an module by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Programs retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProgramSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No module with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "Module"
                ],
                "operationId": "updateModuleProgram",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an module program",
                "description": "Creates or updates an program from the module's programs array by the module's UID in the path and the program key in the body. If the key is not present in the array, the program is created, if the key is present the program is updated\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an program entry to be created or updated\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProgramRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current program array",
                        "schema": {
                            "$ref": "#/definitions/ProgramResponse"
                        }
                    },
                    "204": {
                        "description": "No module with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Module"
                ],
                "operationId": "deleteModuleProgram",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an module program",
                "description": "Deletes an program from the module's programs array by the module's UID in the path and the program key in the body\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains the program key to be deleted",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProgramRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current program array",
                        "schema": {
                            "$ref": "#/definitions/ProgramResponse"
                        }
                    },
                    "204": {
                        "description": "No module with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/modules/{uid}/prerequisites": {
            "get": {
                "tags": [
                    "Module"
                ],
                "operationId": "readModulePrerequisites",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets module prerequisites",
                "description": "Returns the prerequisites from an module by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Prerequisites retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProgramSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No module with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "Module"
                ],
                "operationId": "updateModulePrerequisites",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an module prerequisite",
                "description": "Creates or updates an prerequisite from the module's prerequisites array by the module's UID in the path and the prerequisite key in the body. If the key is not present in the array, the prerequisite is created, if the key is present the prerequisite is updated\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an prerequisite entry to be created or updated\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProgramRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current prerequisite array",
                        "schema": {
                            "$ref": "#/definitions/PrerequisitesResponse"
                        }
                    },
                    "204": {
                        "description": "No module with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Module"
                ],
                "operationId": "deleteModulePrerequisites",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an module prerequisite",
                "description": "Deletes an prerequisite from the prerequisites array by the module's UID in the path and the prerequisite key in the body\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains the prerequisite key to be deleted",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProgramRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current prerequisite array",
                        "schema": {
                            "$ref": "#/definitions/PrerequisitesResponse"
                        }
                    },
                    "204": {
                        "description": "No module with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/modules/{uid}/required-attributes": {
            "get": {
                "tags": [
                    "Module"
                ],
                "operationId": "readModuleRequiredAttributes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets module required attributes",
                "description": "Returns the required attributes from an module by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Required attributes retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ProgramSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No module with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "Module"
                ],
                "operationId": "updateModuleRequiredAttributes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an module required attribute",
                "description": "Creates or updates an required attribute from the module's required attributes array by the module's UID in the path and the required attribute key in the body. If the key is not present in the array, the required attribute is created, if the key is present the required attribute is updated\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an required attribute entry to be created or updated\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProgramRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current required attributes array",
                        "schema": {
                            "$ref": "#/definitions/RequiredAttributeResponse"
                        }
                    },
                    "204": {
                        "description": "No module with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Module"
                ],
                "operationId": "deleteModuleRequiredAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an module required attribute",
                "description": "Deletes an required attribute from the required attributes array by the module's UID in the path and the required attribute key in the body\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains the required attribute key to be deleted",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ProgramRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current required attribute array",
                        "schema": {
                            "$ref": "#/definitions/RequiredAttributeResponse"
                        }
                    },
                    "204": {
                        "description": "No module with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/modules/{uid}/notes": {
            "get": {
                "tags": [
                    "Module"
                ],
                "operationId": "getModuleNotes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets module notes",
                "description": "Returns the notes from an module by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Notes retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/NoteSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No module with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/modules/{uid}/modifications": {
            "get": {
                "tags": [
                    "Module"
                ],
                "operationId": "getModuleModifications",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets module modifications",
                "description": "Returns the modifications from an module by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Modifications retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Modification"
                            }
                        }
                    },
                    "204": {
                        "description": "No module with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/notes": {
            "post": {
                "tags": [
                    "Note"
                ],
                "operationId": "createNote",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates new note",
                "description": "Creates a new note passing note data All note model fields are required\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body is itself a JSON describing the note to be created\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateNoteRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Note created successfuly",
                        "schema": {
                            "$ref": "#/definitions/CreateNoteResponse"
                        }
                    },
                    "400": {
                        "description": "Missing field at request body or wrong fields"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/notes/{uid}": {
            "get": {
                "tags": [
                    "Note"
                ],
                "operationId": "readNote",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Finds note by UID",
                "description": "Returns a single note by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of note to return",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/Note"
                        }
                    },
                    "204": {
                        "description": "No note found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "Note"
                ],
                "operationId": "updateNote",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Updates a note",
                "description": "Updates note identified by UID Parameters to be updated are provided in the requested body and correspond to the fields described in note model\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of Note that needs to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fields and values to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateNoteRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Note update successfully",
                        "schema": {
                            "$ref": "#/definitions/UpdateNoteResponse"
                        }
                    },
                    "204": {
                        "description": "Note not found"
                    },
                    "400": {
                        "description": "Wrong field format"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Note"
                ],
                "operationId": "deleteNote",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes a note",
                "description": "Deletes a note from the databse",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Note UID to be delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Note successfully deleted",
                        "schema": {
                            "$ref": "#/definitions/DeleteNoteResponse"
                        }
                    },
                    "204": {
                        "description": "Note not found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/roles": {
            "post": {
                "tags": [
                    "Role"
                ],
                "operationId": "createRelation",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates new role relationship",
                "description": "Creates a new role between two users\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body is itself a JSON describing the role to be created\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RoleBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Role created successfuly",
                        "schema": {
                            "$ref": "#/definitions/CreateRoleResponse"
                        }
                    },
                    "400": {
                        "description": "Missing field at request body or wrong fields"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Role"
                ],
                "operationId": "deleteRelation",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes a role",
                "description": "Deletes a role between two users\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body is itself a JSON describing the role to be deleted\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RoleBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Role deleted",
                        "schema": {
                            "$ref": "#/definitions/DeleteRoleResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/organizations-applications": {
            "post": {
                "tags": [
                    "OrganizationApplication"
                ],
                "operationId": "createOrgApp",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates new Organization Application Relationship",
                "description": "Creates a new relationship between an organization and an application\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body is itself a JSON describing the relationship to be created\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateOrganizationApplicationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Relationship created successfuly",
                        "schema": {
                            "$ref": "#/definitions/CreateOrganizationApplicationResponse"
                        }
                    },
                    "400": {
                        "description": "Missing field at request body or wrong fields"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "OrganizationApplication"
                ],
                "operationId": "readOrgAppList",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets list of organization-application relationships",
                "description": "Gets a list of organization-application relationshps Query parameters can be provided to filter the returned organization-application relationshps\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "organizationUid",
                        "in": "query",
                        "description": "Filter organization-application relationships list by organizationUid Example: organizationUid=44bc5658-e923-4c0b-9400-c638eabef494 This will get all organization-application relationships with organizationUid equals to 44bc5658-e923-4c0b-9400-c638eabef494\n",
                        "type": "string"
                    },
                    {
                        "name": "applicationUid",
                        "in": "query",
                        "description": "Filter organization-application relationships list by applicationUid Example: applicationUid=44bc5658-e923-4c0b-9400-c638eabef494 This will get all organization-application relationships with applicationUid equals to 44bc5658-e923-4c0b-9400-c638eabef494\n",
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of Organization-Application relationships",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GetOrganizationApplicationRelationshipsResponse"
                            }
                        },
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of possible relationships to be returned (excluding limit and offset)"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/organizations-applications/{uid}": {
            "get": {
                "tags": [
                    "OrganizationApplication"
                ],
                "operationId": "readOrgApp",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Finds an organization application relationship by UID",
                "description": "Returns a single organization application relationship by its UID\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the organization application relationship to return",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/OrganizationApplicationRelationship"
                        }
                    },
                    "204": {
                        "description": "No organization application relationship found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "OrganizationApplication"
                ],
                "operationId": "deleteOrgApp",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an organization application relationship",
                "description": "Deletes an organization application relationship from the database\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization application relationship UID to be delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Organization application relationship deleted",
                        "schema": {
                            "$ref": "#/definitions/DeleteOrganizationApplicationResponse"
                        }
                    },
                    "204": {
                        "description": "OrganizationApplication not found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations-applications/{uid}/attributes": {
            "get": {
                "tags": [
                    "OrganizationApplication"
                ],
                "operationId": "getOrgAppAttributes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets an organization application relationship attributes",
                "description": "Returns the attributes from an organization application relationship by its UID\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization application relationship UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No organization application relationship with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "OrganizationApplication"
                ],
                "operationId": "updateOrgAppAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an OrganizationApplication attribute in batch",
                "description": "Creates or updates the OrganizationApplication attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "OrganizationApplication UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be created or updated",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No OrganizationApplication with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "OrganizationApplication"
                ],
                "operationId": "deleteOrgAppAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an OrganizationApplication attributes in batch",
                "description": "Delete multiple OrganizationApplication attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "OrganizationApplication UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be deleted",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeleteAttributeRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No OrganizationApplication with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations-applications/{uid}/attributes/keys": {
            "get": {
                "tags": [
                    "OrganizationApplication"
                ],
                "operationId": "readOrgAppAttributesKeys",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets organizations-application attributes keys",
                "description": "Returns the keys from organizations-application attributes",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "OrganizationApplication UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes keys retrieved",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "204": {
                        "description": "No organizations-application with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations-applications/{uid}/attributes/keys/{key}": {
            "get": {
                "tags": [
                    "OrganizationApplication"
                ],
                "operationId": "readOrgAppAttributesByKey",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets organizations-application attributes by key",
                "description": "Returns the attributes from an organizations-application by its key",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "OrganizationApplication UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "204": {
                        "description": "No organizations-application with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "OrganizationApplication"
                ],
                "operationId": "updateOrgAppAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an organization application relationship attribute",
                "description": "Creates or updates an attribute from the organization application relationship's attributes array by the relationship's UID in the path and the attribute key and value in the body If the key is not present in the array, the attribute is created, if the key is present the attribute is updated\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization application relationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fields and values to be updated",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreateOrganizationApplicationAttributeResponse"
                        }
                    },
                    "204": {
                        "description": "No organization application relationship with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "OrganizationApplication"
                ],
                "operationId": "deleteOrgAppAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an organization application relationship attribute",
                "description": "Deletes an attribute from the organization application relationship's attributes array by the relationship's UID in the path and the attribute key in the body\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "Organization application relationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/DeleteOrganizationApplicationAttributeResponse"
                        }
                    },
                    "204": {
                        "description": "No organization application relationship with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations-applications/{uid}/modules": {
            "get": {
                "tags": [
                    "OrganizationApplicationModule"
                ],
                "operationId": "readOrgAppModuleList",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets list of organization-application-module relationships",
                "description": "Gets a list of organization-application-module relationshps Query parameters can be provided to filter the returned organization-application-module relationshps\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "OrganizationApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "query",
                        "description": "Filter organization-application-module relationships list by moduleUid Example: moduleUid=44bc5658-e923-4c0b-9400-c638eabef494 This will get all organization-application-module relationships with moduleUid equals to 44bc5658-e923-4c0b-9400-c638eabef494\n",
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of organization-Application-Module relationships",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GetOrganizationApplicationModuleRelationshipsResponse"
                            }
                        },
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of possible relationships to be returned (excluding limit and offset)"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/organizations-applications/{uid}/modules/{moduleUid}": {
            "post": {
                "tags": [
                    "OrganizationApplicationModule"
                ],
                "operationId": "createOrgAppModule",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates new OrganizationApplicationModuleRelationship",
                "description": "Creates a new relationship between a module and an organizationApplication\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "OrganizationApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body is itself a JSON describing the relationship to be created\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateOrganizationApplicationModuleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Relationship created successfuly",
                        "schema": {
                            "$ref": "#/definitions/CreateOrganizationApplicationModuleResponse"
                        }
                    },
                    "400": {
                        "description": "Missing field at request body or wrong fields"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "OrganizationApplicationModule"
                ],
                "operationId": "readOrgAppModule",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets an OrganizationApplicationModuleRelationship",
                "description": "Returns an OrganizationApplicationModuleRelationship by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "OrganizationApplicationModuleRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OrganizationApplicationRelationship retrieved",
                        "schema": {
                            "$ref": "#/definitions/OrganizationApplicationModuleRelationship"
                        }
                    },
                    "204": {
                        "description": "No OrganizationApplicationModuleRelationship with provided UID\n"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "OrganizationApplicationModule"
                ],
                "operationId": "updateOrgAppModule",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Updates an OrganizationApplicationModuleRelationship",
                "description": "Updates OrganizationApplicationModuleRelationship identified by UID Parameters to be updated are provided in the requested body and correspond to the fields described in user model Valid user fields not shown in the model will be ignored in update (createAt, lastUpdated, ) All parameters are optional, but at least one parameter must be provided in the request body for the request to succeed The UID can be provided but must match the one provided in path\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "OrganizationApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains the relationship fields to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateOrganizationApplicationModuleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current OrganizationApplicationModule\n",
                        "schema": {
                            "$ref": "#/definitions/CreateOrganizationApplicationModuleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "OrganizationApplicationModule"
                ],
                "operationId": "deleteOrgAppModule",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an OrganizationApplicationModuleRelationship",
                "description": "Deletes an OrganizationApplicationModuleRelationship\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "OrganizationApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result",
                        "schema": {
                            "$ref": "#/definitions/DeleteOrganizationApplicationModuleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations-applications/{uid}/modules/{moduleUid}/attributes": {
            "get": {
                "tags": [
                    "OrganizationApplicationModule"
                ],
                "operationId": "getOrgAppModuleAttributes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets an OrganizationApplicationModuleRelationship attributes",
                "description": "Returns the attributes from an OrganizationApplicationModuleRelationship by its UID\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "OrganizationApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No OrganizationApplicationModuleRelationship with provided UID\n"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "OrganizationApplicationModule"
                ],
                "operationId": "updateOrgAppModuleAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an  UserApplicationModule attribute in batch",
                "description": "Creates or updates the  UserApplicationModule attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be created or updated",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No  UserApplicationModule with provided UIDs"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "OrganizationApplicationModule"
                ],
                "operationId": "deleteOrgAppModuleAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an  UserApplicationModule attributes in batch",
                "description": "Delete multiple  UserApplicationModule attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be deleted",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeleteAttributeRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No  UserApplicationModule with provided UIDs"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/organizations-applications/{uid}/modules/{moduleUid}/attributes/keys/{key}": {
            "put": {
                "tags": [
                    "OrganizationApplicationModule"
                ],
                "operationId": "updateOrgAppModuleAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an OrganizationApplicationModuleRelationship attribute\n",
                "description": "Creates or updates an attribute from the OrganizationApplicationModuleRelationship's attributes array by the relationship's UID in the path and the attribute key and value in the body If the key is not present in the array, the attribute is created, if the key is present the attribute is updated\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "OrganizationApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fields and values to be updated",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreateOrganizationApplicationModuleAttributeResponse"
                        }
                    },
                    "204": {
                        "description": "No OrganizationApplicationModuleRelationship with provided UID\n"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "OrganizationApplicationModule"
                ],
                "operationId": "deleteOrgAppModuleAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an OrganizationApplicationModuleRelationship attribute",
                "description": "Deletes an attribute from the OrganizationApplicationModuleRelationship's attributes array by the relationship's UID in the path and the attribute key in the body\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "OrganizationApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/DeleteOrganizationApplicationModuleAttributeResponse"
                        }
                    },
                    "204": {
                        "description": "No OrganizationApplicationModuleRelationship with provided UID\n"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users-applications": {
            "post": {
                "tags": [
                    "UserApplication"
                ],
                "operationId": "createUserApp",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates new UserApplication Relationship",
                "description": "Creates a new relationship between an user and an organization\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body is itself a JSON describing the relationship to be created\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateUserApplicationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Relationship created successfuly",
                        "schema": {
                            "$ref": "#/definitions/CreateUserApplicationResponse"
                        }
                    },
                    "400": {
                        "description": "Missing field at request body or wrong fields"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "UserApplication"
                ],
                "operationId": "readUserAppList",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets list of user-application relationships",
                "description": "Gets a list of user-application relationshps Query parameters can be provided to filter the returned user-application relationshps\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userUid",
                        "in": "query",
                        "description": "Filter user-application relationships list by userUid Example: userUid=44bc5658-e923-4c0b-9400-c638eabef494 This will get all user-application relationships with userUid equals to 44bc5658-e923-4c0b-9400-c638eabef494\n",
                        "type": "string"
                    },
                    {
                        "name": "applicationUid",
                        "in": "query",
                        "description": "Filter user-application relationships list by applicationUid Example: applicationUid=44bc5658-e923-4c0b-9400-c638eabef494 This will get all user-application relationships with applicationUid equals to 44bc5658-e923-4c0b-9400-c638eabef494\n",
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter User by status. Example status=Active|Pending",
                        "type": "string",
                        "enum": [
                            "Active",
                            "Inactive",
                            "Pending"
                        ]
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter User by status. Example type=User|LdapUser",
                        "type": "string",
                        "enum": [
                            "User",
                            "LdapUser"
                        ]
                    },
                    {
                        "name": "firstName",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by user firstName"
                    },
                    {
                        "name": "lastName",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by user lastName"
                    },
                    {
                        "name": "userName",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by userName"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by email"
                    },
                    {
                        "name": "createdAt",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by createdAt. Example 2020-03-26T17:16:46.872Z"
                    },
                    {
                        "name": "verifiedDate",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by verifiedDate. Example 2020-03-26T17:19:04.723Z"
                    },
                    {
                        "name": "externalSource",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by external ID source"
                    },
                    {
                        "name": "externalId",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by external ID value"
                    },
                    {
                        "name": "searchStr",
                        "in": "query",
                        "type": "string",
                        "description": "Filter users list by searchStr Example: searchStr=Abbott This will get all users with Abbott at some important field (firstName, lastName, userName, etc …)\n"
                    },
                    {
                        "name": "ignore",
                        "in": "query",
                        "type": "string",
                        "description": "List of user fields to ignore on search when passing searchStr parameter Example: ignore=firstName|lastName This will limit the search to userName or email"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of User-Application relationships",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GetUserApplicationRelationshipsResponse"
                            }
                        },
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of possible relationships to be returned (excluding limit and offset)"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users-applications/{uid}": {
            "get": {
                "tags": [
                    "UserApplication"
                ],
                "operationId": "readUserApp",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Finds an UserApplicationRelationship by UID",
                "description": "Returns a single UserApplicationRelationship by its UID\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UID of the UserApplicationRelationship to return",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/UserApplicationRelationship"
                        }
                    },
                    "204": {
                        "description": "No UserApplicationRelationship found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "UserApplication"
                ],
                "operationId": "deleteUserApp",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an UserApplicationRelationship",
                "description": "Deletes an UserApplicationRelationship from the database\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplicationRelationship UID to be delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UserApplicationRelationship deleted",
                        "schema": {
                            "$ref": "#/definitions/DeleteUserApplicationResponse"
                        }
                    },
                    "204": {
                        "description": "UserApplicationRelationship not found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users-applications/{uid}/attributes": {
            "get": {
                "tags": [
                    "UserApplication"
                ],
                "operationId": "getUserAppAttributes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets an UserApplicationRelationship attributes",
                "description": "Returns the attributes from an UserApplicationRelationship by its UID\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No UserApplicationRelationship with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "UserApplication"
                ],
                "operationId": "updateUserAppAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an UserApplication attribute in batch",
                "description": "Creates or updates the UserApplication attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplication UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be created or updated",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No UserApplication with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "UserApplication"
                ],
                "operationId": "deleteUserAppAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an UserApplication attributes in batch",
                "description": "Delete multiple UserApplication attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplication UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be deleted",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeleteAttributeRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No UserApplication with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users-applications/{uid}/attributes/keys": {
            "get": {
                "tags": [
                    "UserApplication"
                ],
                "operationId": "readUserAppAttributesKeys",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets users-application attributes keys",
                "description": "Returns the keys from users-application attributes",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplication UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes keys retrieved",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "204": {
                        "description": "No users-application with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users-applications/{uid}/attributes/keys/{key}": {
            "get": {
                "tags": [
                    "UserApplication"
                ],
                "operationId": "readUserAppAttributesByKey",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets users-application attributes by key",
                "description": "Returns the attributes from an users-application by its key",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplication UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "204": {
                        "description": "No users-application with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "UserApplication"
                ],
                "operationId": "updateUserAppAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an UserApplicationRelationship attribute",
                "description": "Creates or updates an attribute from the UserApplicationRelationship's attributes array by the relationship's UID in the path and the attribute key and value in the body If the key is not present in the array, the attribute is created, if the key is present the attribute is updated\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fields and values to be updated",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreateUserApplicationAttributeResponse"
                        }
                    },
                    "204": {
                        "description": "No UserApplicationRelationship with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "UserApplication"
                ],
                "operationId": "deleteUserAppAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an UserApplicationRelationship attribute",
                "description": "Deletes an attribute from the UserApplicationRelationship's attributes array by the relationship's UID in the path and the attribute key in the body\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/DeleteUserApplicationAttributeResponse"
                        }
                    },
                    "204": {
                        "description": "No UserApplicationRelationship with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users-applications/{uid}/modules": {
            "get": {
                "tags": [
                    "UserApplicationModule"
                ],
                "operationId": "readUserAppModuleList",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets list of user-application-module relationships",
                "description": "Gets a list of user-application-module relationshps Query parameters can be provided to filter the returned user-application-module relationshps\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "query",
                        "description": "Filter user-application-module relationships list by moduleUid Example: moduleUid=44bc5658-e923-4c0b-9400-c638eabef494 This will get all user-application-module relationships with moduleUid equals to 44bc5658-e923-4c0b-9400-c638eabef494\n",
                        "type": "string"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of User-Application-Module relationships",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GetUserApplicationModuleRelationshipsResponse"
                            }
                        },
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of possible relationships to be returned (excluding limit and offset)"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users-applications/{uid}/modules/{moduleUid}": {
            "post": {
                "tags": [
                    "UserApplicationModule"
                ],
                "operationId": "createUserAppModule",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates new UserApplicationModuleRelationship",
                "description": "Creates a new relationship between a module and an UserApplication\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body is itself a JSON describing the relationship to be created\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateUserApplicationModuleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Relationship created successfuly",
                        "schema": {
                            "$ref": "#/definitions/CreateUserApplicationModuleResponse"
                        }
                    },
                    "400": {
                        "description": "Missing field at request body or wrong fields"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "UserApplicationModule"
                ],
                "operationId": "readUserAppModule",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets an UserApplicationModuleRelationship",
                "description": "Returns an UserApplicationModuleRelationship by its UID",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UserApplicationModuleRelationship retrieved",
                        "schema": {
                            "$ref": "#/definitions/UserApplicationModuleRelationship"
                        }
                    },
                    "204": {
                        "description": "No UserApplicationModuleRelationship with provided UID\n"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "UserApplicationModule"
                ],
                "operationId": "updateUserAppModule",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Updates an UserApplicationModuleRelationship",
                "description": "Updates UserApplicationModuleRelationship identified by UID Parameters to be updated are provided in the requested body and correspond to the fields described in user model Valid user fields not shown in the model will be ignored in update (createAt, lastUpdated, ) All parameters are optional, but at least one parameter must be provided in the request body for the request to succeed The UID can be provided but must match the one provided in path\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains the relationship fields to be updated",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateUserApplicationModuleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current ApplicationApplicationModule\n",
                        "schema": {
                            "$ref": "#/definitions/UpdateUserApplicationModuleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "UserApplicationModule"
                ],
                "operationId": "deleteUserAppModule",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an UserApplicationModuleRelationship",
                "description": "Deletes an UserApplicationModuleRelationship\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result",
                        "schema": {
                            "$ref": "#/definitions/DeleteUserApplicationModuleResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users-applications/{uid}/modules/{moduleUid}/attributes": {
            "get": {
                "tags": [
                    "UserApplicationModule"
                ],
                "operationId": "getUserAppModuleAttributes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets an UserApplicationModuleRelationship attributes",
                "description": "Returns the attributes from an UserApplicationModuleRelationship by its UID\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No UserApplicationModuleRelationship with provided UID\n"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "UserApplicationModule"
                ],
                "operationId": "updateUserAppModuleAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an  UserApplicationModule attribute in batch",
                "description": "Creates or updates the  UserApplicationModule attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be created or updated",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No  UserApplicationModule with provided UIDs"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "UserApplicationModule"
                ],
                "operationId": "deleteUserAppModuleAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an  UserApplicationModule attributes in batch",
                "description": "Delete multiple  UserApplicationModule attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be deleted",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeleteAttributeRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No  UserApplicationModule with provided UIDs"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users-applications/{uid}/modules/{moduleUid}/attributes/keys/{key}": {
            "put": {
                "tags": [
                    "UserApplicationModule"
                ],
                "operationId": "updateUserAppModuleAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an UserApplicationModuleRelationship attribute\n",
                "description": "Creates or updates an attribute from the UserApplicationModuleRelationship's attributes array by the relationship's UID in the path and the attribute key and value in the body If the key is not present in the array, the attribute is created, if the key is present the attribute is updated\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fields and values to be updated",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreateUserApplicationModuleAttributeResponse"
                        }
                    },
                    "204": {
                        "description": "No UserApplicationModuleRelationship with provided UID\n"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "UserApplicationModule"
                ],
                "operationId": "deleteUserAppModuleAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an UserApplicationModuleRelationship attribute",
                "description": "Deletes an attribute from the UserApplicationModuleRelationship's attributes array by the relationship's UID in the path and the attribute key in the body\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "UserApplicationRelationship UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "moduleUid",
                        "in": "path",
                        "description": "Module UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/DeleteUserApplicationModuleAttributeResponse"
                        }
                    },
                    "204": {
                        "description": "No UserApplicationModuleRelationship with provided UID\n"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users-organizations": {
            "post": {
                "tags": [
                    "UserOrganization"
                ],
                "operationId": "createUserOrg",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates new UserOrganization Relationship",
                "description": "Creates a new relationship between an user and an organization\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Body is itself a JSON describing the relationship to be created\n",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateUserOrganizationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Relationship created successfuly",
                        "schema": {
                            "$ref": "#/definitions/CreateUserOrganizationResponse"
                        }
                    },
                    "400": {
                        "description": "Missing field at request body or wrong fields"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "get": {
                "tags": [
                    "UserOrganization"
                ],
                "operationId": "readUserOrgList",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets list of user-organization relationships",
                "description": "Gets a list of user-organization relationshps Query parameters can be provided to filter the returned user-organization relationshps\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userUid",
                        "in": "query",
                        "description": "Filter user-organization relationships list by userUid Example: userUid=44bc5658-e923-4c0b-9400-c638eabef494 This will get all user-organizationUid relationships with userUid equals to 44bc5658-e923-4c0b-9400-c638eabef494\n",
                        "type": "string"
                    },
                    {
                        "name": "organizationUid",
                        "in": "query",
                        "description": "Filter user-organization relationships list by organizationUid Example: organizationUid=44bc5658-e923-4c0b-9400-c638eabef494 This will get all user-organization relationships with organizationUid equals to 44bc5658-e923-4c0b-9400-c638eabef494\n",
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter User by status. Example status=Active|Pending",
                        "type": "string",
                        "enum": [
                            "Active",
                            "Inactive",
                            "Pending"
                        ]
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Filter User by status. Example type=User|LdapUser",
                        "type": "string",
                        "enum": [
                            "User",
                            "LdapUser"
                        ]
                    },
                    {
                        "name": "firstName",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by user firstName"
                    },
                    {
                        "name": "lastName",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by user lastName"
                    },
                    {
                        "name": "userName",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by userName"
                    },
                    {
                        "name": "email",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by email"
                    },
                    {
                        "name": "createdAt",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by createdAt. Example 2020-03-26T17:16:46.872Z"
                    },
                    {
                        "name": "verifiedDate",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by verifiedDate. Example 2020-03-26T17:19:04.723Z"
                    },
                    {
                        "name": "searchStr",
                        "in": "query",
                        "type": "string",
                        "description": "Filter users list by searchStr Example: searchStr=Abbott This will get all users with Abbott at some important field (firstName, lastName, userName, etc …)\n"
                    },
                    {
                        "name": "orgType",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by orgType. Example: High School\n"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Size limit for returned array. If no params are passed it will default to 25\n"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Offset for the data to be returned"
                    },
                    {
                        "name": "relationshipType",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by userOrganization type. Example Secondary"
                    },
                    {
                        "name": "externalSource",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by external ID source"
                    },
                    {
                        "name": "externalId",
                        "in": "query",
                        "type": "string",
                        "description": "Filter by external ID value"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "An array of User-Organization relationships",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/GetUserOrganizationRelationshipsResponse"
                            }
                        },
                        "headers": {
                            "total-count": {
                                "type": "integer",
                                "description": "Total of possible relationships to be returned (excluding limit and offset)"
                            },
                            "prev-offset": {
                                "type": "integer",
                                "description": "Offset value to go back one page"
                            },
                            "next-offset": {
                                "type": "integer",
                                "description": "Offset value to go foward one page"
                            },
                            "total-pages": {
                                "type": "integer",
                                "description": "Total of available pages"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/users-organizations/{userUid}/{orgUid}": {
            "get": {
                "tags": [
                    "UserOrganization"
                ],
                "operationId": "readUserOrg",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Finds an UserOrganizationRelationship by UID",
                "description": "Returns a single UserOrganizationRelationship by its UID\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userUid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "orgUid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/UserOrganizationRelationship"
                        }
                    },
                    "204": {
                        "description": "No UserOrganizationRelationship found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "UserOrganization"
                ],
                "operationId": "updateUserOrg",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Updates an UserOrganizationRelationship",
                "description": "Updates a single UserOrganizationRelationship\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userUid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "orgUid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Type to be updated",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": [
                                "type"
                            ],
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "enum": [
                                        "Primary",
                                        "Secondary"
                                    ]
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/UpdateUserOrganizationRelationshipResponse"
                        }
                    },
                    "204": {
                        "description": "No UserOrganizationRelationship found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "UserOrganization"
                ],
                "operationId": "deleteUserOrg",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an UserOrganizationRelationship",
                "description": "Deletes an UserOrganizationRelationship from the database\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userUid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "orgUid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UserOrganizationRelationship deleted",
                        "schema": {
                            "$ref": "#/definitions/DeleteUserOrganizationResponse"
                        }
                    },
                    "204": {
                        "description": "UserOrganizationRelationship not found"
                    },
                    "400": {
                        "description": "Invalid UID supplied"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users-organizations/{userUid}/{orgUid}/attributes": {
            "get": {
                "tags": [
                    "UserOrganization"
                ],
                "operationId": "getUserOrgAttributes",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Gets an UserOrganizationRelationship attributes",
                "description": "Returns the attributes from an UserOrganizationRelationship by its UID\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userUid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "orgUid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Attributes retrieved",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    },
                    "204": {
                        "description": "No UserOrganizationRelationship with provided UID"
                    },
                    "400": {
                        "description": "Invalid UID"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "put": {
                "tags": [
                    "UserOrganization"
                ],
                "operationId": "updateUserOrgAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an UserOrganization attribute in batch",
                "description": "Creates or updates the UserOrganization attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userUid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "orgUid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be created or updated",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No UserOrganization with provided UIDs"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "UserOrganization"
                ],
                "operationId": "deleteUserOrgAttributeBatch",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an UserOrganization attributes in batch",
                "description": "Delete multiple UserOrganization attributes with a batch operation\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userUid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "orgUid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Body contains an array of attributes to be deleted",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DeleteAttributeRequest"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreatedAttribute"
                        }
                    },
                    "204": {
                        "description": "No UserOrganization with provided UIDs"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/users-organizations/{userUid}/{orgUid}/attributes/keys/{key}": {
            "put": {
                "tags": [
                    "UserOrganization"
                ],
                "operationId": "updateUserOrgAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Creates or updates an UserOrganizationRelationship attribute",
                "description": "Creates or updates an attribute from the UserOrganizationRelationship's attributes array by the relationship's UID in the path and the attribute key and value in the body If the key is not present in the array, the attribute is created, if the key is present the attribute is updated\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userUid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "orgUid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Fields and values to be updated",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "value": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/CreateUserOrganizationAttributeResponse"
                        }
                    },
                    "204": {
                        "description": "No UserOrganizationRelationship with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "UserOrganization"
                ],
                "operationId": "deleteUserOrgAttribute",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an UserOrganizationRelationship attribute",
                "description": "Deletes an attribute from the UserOrganizationRelationship's attributes array by the relationship's UID in the path and the attribute key in the body\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userUid",
                        "in": "path",
                        "description": "User UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "orgUid",
                        "in": "path",
                        "description": "Organization UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "key",
                        "in": "path",
                        "description": "Attribute key UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The operation result and current attribute array",
                        "schema": {
                            "$ref": "#/definitions/DeleteUserOrganizationAttributeResponse"
                        }
                    },
                    "204": {
                        "description": "No UserOrganizationRelationship with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/encrypt": {
            "post": {
                "tags": [
                    "Encrypt"
                ],
                "operationId": "encrypt",
                "security": [
                    {
                        "AWS": []
                    }
                ],
                "summary": "Encode or decode a given message",
                "description": "Encode or decode a given message\n",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "message to apply encode/decode function, and the method which should be applied.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/EncryptRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message successfully encoded or decoded",
                        "schema": {
                            "$ref": "#/definitions/EncryptResponse"
                        }
                    }
                }
            }
        },
        "/authorize": {
            "get": {
                "tags": [
                    "Authorization"
                ],
                "operationId": "authorize",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Calculates a full list of permissions on a user-organization-application set",
                "description": "Calculates a full list of permissions on a user-organization-application set\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "organization",
                        "in": "header",
                        "description": "Organization UID",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "application",
                        "in": "header",
                        "description": "Application key",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "simple",
                        "in": "query",
                        "type": "boolean",
                        "description": "If marked as true UMS will return a simple version of each object (without joins or aggregations), defaults to false"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/FullAuthorizationResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        },
        "/external-ids/{uid}": {
            "put": {
                "tags": [
                    "ExternalId"
                ],
                "operationId": "updateExternalId",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Updates an external ID record by UID",
                "description": "Updates an external ID record by UID\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "External ID UID",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "description": "External ID update body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateExternalIdRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/UpdateExternalIdResponse"
                        }
                    },
                    "204": {
                        "description": "No External ID with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            },
            "delete": {
                "tags": [
                    "ExternalId"
                ],
                "operationId": "deleteExternalId",
                "security": [
                    {
                        "JWT": []
                    },
                    {
                        "AWS": []
                    }
                ],
                "summary": "Deletes an external ID record by UID",
                "description": "Deletes an external ID record by UID\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "uid",
                        "in": "path",
                        "description": "External ID UID",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "$ref": "#/definitions/DeleteExternalIdResponse"
                        }
                    },
                    "204": {
                        "description": "No External ID with provided UID"
                    },
                    "400": {
                        "description": "Invalid request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        }
    },
    "definitions": {
        "ForgotPasswordRequest": {
            "required": [
                "credential"
            ],
            "type": "object",
            "properties": {
                "credential": {
                    "type": "string",
                    "example": "admin@nrccua.org"
                },
                "emailConfig": {
                    "$ref": "#/definitions/EmailConfig"
                }
            }
        },
        "ResetPasswordRequest": {
            "type": "object",
            "required": [
                "newPassword"
            ],
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "eabac226-5706-4e7c-812c-00b19e2ddf4b"
                },
                "email": {
                    "type": "string",
                    "example": "admin@nrccua.org"
                },
                "newPassword": {
                    "type": "string",
                    "example": "admin"
                },
                "verificationCode": {
                    "type": "string",
                    "example": "$2a$10$asynLtrxxuZXFgKSYf4Bae.4D8Mm6aG/m/nqORbiByEVpqndy3coi"
                }
            }
        },
        "AuthenticationRequest": {
            "type": "object",
            "required": [
                "userName",
                "password"
            ],
            "properties": {
                "userName": {
                    "type": "string",
                    "example": "admin@nrccua.org"
                },
                "password": {
                    "type": "string",
                    "example": "admin"
                },
                "expiresIn": {
                    "type": "string",
                    "example": "10m"
                },
                "application": {
                    "type": "string",
                    "example": "datalab"
                }
            }
        },
        "Authenticationv2Request": {
            "type": "object",
            "required": [
                "userName",
                "password",
                "application"
            ],
            "properties": {
                "userName": {
                    "type": "string",
                    "example": "admin@nrccua.org"
                },
                "password": {
                    "type": "string",
                    "example": "admin"
                },
                "application": {
                    "type": "string",
                    "example": "datalab"
                },
                "expiresIn": {
                    "type": "string",
                    "example": "10m"
                }
            }
        },
        "CreateApplicationRequest": {
            "type": "object",
            "required": [
                "key",
                "name",
                "url",
                "adminUrl"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "example": "nrccuakey"
                },
                "name": {
                    "type": "string",
                    "example": "nrccua"
                },
                "url": {
                    "type": "string",
                    "example": "https://nrccua.org"
                },
                "adminUrl": {
                    "type": "string",
                    "example": "https://nrccua.org"
                }
            }
        },
        "UpdateApplicationRequest": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "newnrccua"
                },
                "url": {
                    "type": "string",
                    "example": "https://nrccua.org"
                },
                "adminUrl": {
                    "type": "string",
                    "example": "https://nrccua.org"
                }
            }
        },
        "CreateUserRequest": {
            "type": "object",
            "required": [
                "firstName",
                "lastName",
                "email"
            ],
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "LdapUser",
                        "Role",
                        "User"
                    ],
                    "default": "User"
                },
                "firstName": {
                    "type": "string",
                    "example": "UserName"
                },
                "lastName": {
                    "type": "string",
                    "example": "UserLastName"
                },
                "password": {
                    "type": "string",
                    "example": "UserPassword"
                },
                "userName": {
                    "type": "string",
                    "example": "UserUserName"
                },
                "email": {
                    "type": "string",
                    "example": "UserEmail@nrccua.org"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Active",
                        "Inactive",
                        "Pending",
                        "Disabled"
                    ],
                    "default": "Pending"
                },
                "emailConfig": {
                    "$ref": "#/definitions/EmailConfig"
                }
            }
        },
        "UpdateUserRequest": {
            "type": "object",
            "properties": {
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string",
                    "example": "NewUserLastname"
                },
                "userName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Active",
                        "Inactive",
                        "Pending",
                        "Disabled"
                    ]
                }
            }
        },
        "ActivateUserRequest": {
            "type": "object",
            "required": [
                "verificationCode",
                "userName",
                "password"
            ],
            "properties": {
                "verificationCode": {
                    "type": "string",
                    "example": "$2a$10$asynLtrxxuZXFgKSYf4Bae.4D8Mm6aG/m/nqORbiByEVpqndy3coi"
                },
                "userName": {
                    "type": "string",
                    "example": "admin"
                },
                "password": {
                    "type": "string",
                    "example": "p455w0rd"
                }
            }
        },
        "CreateOrganizationRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "OrganizationName"
                },
                "orgParent": {
                    "type": "string"
                },
                "orgType": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "OrgType",
                        "Organization"
                    ],
                    "default": "Organization"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Active",
                        "Inactive",
                        "Pending"
                    ],
                    "default": "Active"
                },
                "sfAccountId": {
                    "type": "string",
                    "example": "0016000000ImzzJAAR"
                },
                "externalId": {
                    "type": "string",
                    "example": "003422"
                },
                "actCode": {
                    "type": "string",
                    "example": "0011"
                }
            }
        },
        "UpdateOrganizationRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "NewOrganizationName"
                },
                "orgParent": {
                    "type": "string",
                    "example": "c6be3f9b-b0b2-4740-b3e0-d7c317db57fe"
                },
                "orgType": {
                    "type": "string",
                    "example": "05692c12-2a29-4a8b-8fc2-95cb18d09fee"
                },
                "sfAccountId": {
                    "type": "string",
                    "example": "0016000000ImzzJAAR"
                },
                "externalId": {
                    "type": "string",
                    "example": "003422"
                },
                "actCode": {
                    "type": "string",
                    "example": "0011"
                }
            }
        },
        "DeleteAttributeRequest": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "example": "tempore"
                }
            }
        },
        "ProgramRequest": {
            "type": "object",
            "example": [
                {
                    "key": "tempore"
                }
            ]
        },
        "DeleteProgramRequest": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string",
                    "example": "tempore"
                }
            }
        },
        "CreateModuleRequest": {
            "type": "object",
            "properties": {
                "applicationUid": {
                    "type": "string",
                    "example": "f7f9155c-9322-431c-b890-8f7388a9d18e"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "example": "Random module description"
                },
                "defaultPermission": {
                    "type": "boolean",
                    "default": true
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                },
                "programs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProgramSmall"
                    }
                },
                "prerequisites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProgramSmall"
                    }
                },
                "requiredAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProgramSmall"
                    }
                }
            }
        },
        "UpdateModuleRequest": {
            "type": "object",
            "properties": {
                "applicationUid": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "defaultPermission": {
                    "type": "boolean"
                }
            }
        },
        "CreateNoteRequest": {
            "type": "object",
            "required": [
                "entityUid",
                "content"
            ],
            "properties": {
                "entityUid": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                }
            }
        },
        "UpdateNoteRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                }
            }
        },
        "RoleBody": {
            "type": "object",
            "properties": {
                "userUid": {
                    "type": "string"
                },
                "roleUid": {
                    "type": "string"
                },
                "roleName": {
                    "type": "string"
                }
            }
        },
        "CreateOrganizationApplicationRequest": {
            "type": "object",
            "properties": {
                "applicationUid": {
                    "type": "string"
                },
                "organizationUid": {
                    "type": "string"
                }
            }
        },
        "DeleteOrganizationApplicationAttributeRequest": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                }
            }
        },
        "CreateOrganizationApplicationModuleRequest": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                },
                "permissionOverwrite": {
                    "type": "boolean"
                }
            }
        },
        "DeleteOrganizationApplicationModuleAttributeRequest": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                }
            }
        },
        "CreateUserApplicationRequest": {
            "type": "object",
            "properties": {
                "userUid": {
                    "type": "string"
                },
                "applicationUid": {
                    "type": "string"
                }
            }
        },
        "DeleteUserApplicationAttributeRequest": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                }
            }
        },
        "CreateUserApplicationModuleRequest": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                },
                "permissionOverwrite": {
                    "type": "boolean"
                }
            }
        },
        "UpdateUserApplicationModuleRequest": {
            "type": "object",
            "properties": {
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                },
                "permissionOverwrite": {
                    "type": "boolean"
                }
            }
        },
        "DeleteUserApplicationModuleAttributeRequest": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                }
            }
        },
        "CreateUserOrganizationRequest": {
            "type": "object",
            "properties": {
                "userUid": {
                    "type": "string"
                },
                "organizationUid": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Primary",
                        "Secondary",
                        "Admin"
                    ],
                    "default": "Primary"
                }
            }
        },
        "DeleteUserOrganizationAttributeRequest": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                }
            }
        },
        "EncryptRequest": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "sticksAndStones"
                },
                "method": {
                    "type": "string",
                    "enum": [
                        "encode",
                        "decode"
                    ],
                    "example": "encode"
                }
            }
        },
        "CreateUserExternalIdRequest": {
            "type": "object",
            "required": [
                "source",
                "externalId"
            ],
            "properties": {
                "organizationUid": {
                    "type": "string",
                    "example": "68c7b07a-9bc5-4bbc-8fba-dedfe79612d0"
                },
                "source": {
                    "type": "string",
                    "example": "hs_id"
                },
                "externalId": {
                    "type": "string",
                    "example": "HS000001"
                }
            }
        },
        "CreateOrganizationExternalIdRequest": {
            "type": "object",
            "required": [
                "source",
                "externalId"
            ],
            "properties": {
                "userUid": {
                    "type": "string",
                    "example": "c02cf331-af3b-4919-95c7-973f0377baa0"
                },
                "source": {
                    "type": "string",
                    "example": "hs_id"
                },
                "externalId": {
                    "type": "string",
                    "example": "HS000001"
                }
            }
        },
        "UpdateExternalIdRequest": {
            "type": "object",
            "properties": {
                "source": {
                    "type": "string",
                    "example": "hs_id"
                },
                "externalId": {
                    "type": "string",
                    "example": "HS000001"
                }
            }
        },
        "AuthenticationResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/User"
                },
                "sessionToken": {
                    "type": "string"
                },
                "actSessionToken": {
                    "type": "string"
                }
            }
        },
        "AuthorizeResponse": {
            "type": "object",
            "properties": {
                "authorize": {
                    "type": "boolean"
                },
                "isDefault": {
                    "type": "boolean"
                }
            }
        },
        "Credentials": {
            "type": "object",
            "properties": {
                "credentials": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string"
                        },
                        "sessionUid": {
                            "type": "string"
                        },
                        "firstName": {
                            "type": "string"
                        },
                        "lastName": {
                            "type": "string"
                        },
                        "userName": {
                            "type": "string"
                        },
                        "email": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        },
                        "status": {
                            "type": "string"
                        },
                        "organizations": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/OrganizationSmall"
                            }
                        },
                        "impersonatingUser": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "ModuleAuthorizationResponse": {
            "type": "object",
            "properties": {
                "allowed": {
                    "type": "boolean"
                },
                "source": {
                    "type": "string",
                    "enum": [
                        "Default",
                        "User",
                        "UserRole",
                        "Organization",
                        "OrgType"
                    ]
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                },
                "isDefault": {
                    "type": "boolean"
                }
            }
        },
        "FullAuthorizationResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/User"
                },
                "organization": {
                    "$ref": "#/definitions/Organization"
                },
                "modulePermissions": {
                    "type": "object",
                    "example": {
                        "datalab.classplanner.filters.acquired": {
                            "allowed": true,
                            "source": "Default",
                            "isDefault": true,
                            "attributes": [
                                {
                                    "key": "ldapAuth",
                                    "value": "standard"
                                },
                                {
                                    "key": "orgOverwriteRequired",
                                    "value": "yes"
                                },
                                {
                                    "key": "orgOverwriteProgramsAllowed",
                                    "value": "yes"
                                }
                            ]
                        }
                    }
                }
            }
        },
        "UpdateApplicationResponse": {
            "type": "object",
            "properties": {
                "application": {
                    "$ref": "#/definitions/Application"
                },
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "CreateApplicationResponse": {
            "type": "object",
            "properties": {
                "application": {
                    "$ref": "#/definitions/Application"
                },
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "StandardUserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/User"
                },
                "verificationCode": {
                    "type": "string",
                    "example": "345d4328cf2433f1ab24e574cf051f79"
                },
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "DeleteUserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "GetOrganizationsResponse": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "2e6dba3f-4916-469d-bb6e-01d2c67b2211"
                },
                "name": {
                    "type": "string",
                    "example": "NitzscheandSons"
                },
                "status": {
                    "type": "string",
                    "example": "Pending"
                },
                "sfAccountId": {
                    "type": "string",
                    "example": "0016000000ImzzJAAR"
                },
                "externalId": {
                    "type": "string",
                    "example": "003422"
                },
                "actCode": {
                    "type": "string",
                    "example": "0011"
                },
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ApplicationReallySmall"
                    }
                },
                "parent": {
                    "$ref": "#/definitions/Parent"
                },
                "group": {
                    "$ref": "#/definitions/Group"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Organization",
                        "OrgType"
                    ]
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                },
                "programs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProgramSmall"
                    }
                },
                "externalIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalId"
                    }
                }
            }
        },
        "CreateOrganizationResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "organization": {
                    "$ref": "#/definitions/Organization"
                }
            }
        },
        "CreateModuleResponse": {
            "type": "object",
            "properties": {
                "module": {
                    "$ref": "#/definitions/Module"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "UpdateModuleResponse": {
            "type": "object",
            "properties": {
                "module": {
                    "$ref": "#/definitions/Module"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "CreateNoteResponse": {
            "type": "object",
            "properties": {
                "note": {
                    "$ref": "#/definitions/Note"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "UpdateNoteResponse": {
            "type": "object",
            "properties": {
                "note": {
                    "$ref": "#/definitions/Note"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "DeleteNoteResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "CreateRoleResponse": {
            "type": "object",
            "properties": {
                "userRole": {
                    "type": "object",
                    "properties": {
                        "userUid": {
                            "type": "string",
                            "example": "bf45a23c-b527-4c5d-b7b8-60250339d265"
                        },
                        "roleUid": {
                            "type": "string",
                            "example": "2333afd5-5a4d-453c-9e6f-8d63f885bb59"
                        },
                        "updatedAt": {
                            "type": "string",
                            "example": "2017-06-26T20:19:50.193Z"
                        },
                        "createdAt": {
                            "type": "string",
                            "example": "2017-06-26T20:19:50.193Z"
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "DeleteRoleResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "CreateOrganizationApplicationResponse": {
            "type": "object",
            "properties": {
                "organizationApplication": {
                    "$ref": "#/definitions/OrganizationApplicationRelationship"
                },
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "GetOrganizationApplicationRelationshipsResponse": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "2a84de84-c706-4573-990f-6ebc5f4d7051"
                },
                "organization": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string",
                            "example": "2e6dba3f-4916-469d-bb6e-01d2c67b2211"
                        },
                        "name": {
                            "type": "string",
                            "example": "NitzscheandSons"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "Organization",
                                "OrgType"
                            ]
                        }
                    }
                },
                "application": {
                    "type": "object",
                    "properties": {
                        "org": {
                            "type": "string",
                            "example": "2e6dba3f-4916-469d-bb6e-01d2c67b2211"
                        },
                        "key": {
                            "type": "string",
                            "example": "nrccuakey"
                        },
                        "name": {
                            "type": "string",
                            "example": "nrccua"
                        }
                    }
                }
            }
        },
        "DeleteOrganizationApplicationResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "CreateOrganizationApplicationAttributeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "DeleteOrganizationApplicationAttributeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "CreateOrganizationApplicationModuleResponse": {
            "type": "object",
            "properties": {
                "organizationApplicationModule": {
                    "$ref": "#/definitions/OrganizationApplicationModuleRelationship"
                },
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "GetOrganizationApplicationModuleRelationshipsResponse": {
            "type": "object",
            "properties": {
                "organizationApplicationUid": {
                    "type": "string",
                    "example": "2333afd5-5a4d-453c-9e6f-8d63f885bb59"
                },
                "permissionOverwrite": {
                    "type": "boolean",
                    "example": true
                },
                "module": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string",
                            "example": "2e6dba3f-4916-469d-bb6e-01d2c67b2211"
                        },
                        "key": {
                            "type": "string",
                            "example": "module.key"
                        },
                        "name": {
                            "type": "string",
                            "example": "Module Name"
                        },
                        "defaultPermission": {
                            "type": "boolean",
                            "example": true
                        }
                    }
                }
            }
        },
        "DeleteOrganizationApplicationModuleResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "CreateOrganizationApplicationModuleAttributeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "DeleteOrganizationApplicationModuleAttributeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "CreateUserApplicationResponse": {
            "type": "object",
            "properties": {
                "userApplication": {
                    "$ref": "#/definitions/UserApplicationRelationship"
                },
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "GetUserApplicationRelationshipsResponse": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "cfb4e709-ff37-4d95-b553-ed3a1cec2062"
                },
                "user": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string",
                            "example": "eabac226-5706-4e7c-812c-00b19e2ddf4b"
                        },
                        "firstName": {
                            "type": "string",
                            "example": "UserName"
                        },
                        "lastName": {
                            "type": "string",
                            "example": "UserLastName"
                        },
                        "userName": {
                            "type": "string",
                            "example": "UserUserName"
                        },
                        "email": {
                            "type": "string",
                            "example": "UserEmail@nrccua.org"
                        },
                        "status": {
                            "type": "string",
                            "example": "Pending"
                        },
                        "verifiedDate": {
                            "type": "string"
                        },
                        "createdAt": {
                            "type": "string",
                            "example": "2017-06-20T16:43:11.378Z"
                        },
                        "updatedAt": {
                            "type": "string",
                            "example": "2017-06-20T16:43:11.378Z"
                        },
                        "roles": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Role"
                            }
                        },
                        "attributes": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        },
                        "externalIds": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ExternalId"
                            }
                        }
                    }
                },
                "application": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string",
                            "example": "2e6dba3f-4916-469d-bb6e-01d2c67b2211"
                        },
                        "key": {
                            "type": "string",
                            "example": "nrccuakey"
                        },
                        "name": {
                            "type": "string",
                            "example": "nrccua"
                        }
                    }
                }
            }
        },
        "DeleteUserApplicationResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "CreateUserApplicationAttributeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "DeleteUserApplicationAttributeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "CreateUserApplicationModuleResponse": {
            "type": "object",
            "properties": {
                "userApplicationModule": {
                    "$ref": "#/definitions/UserApplicationModuleRelationship"
                },
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "GetUserApplicationModuleRelationshipsResponse": {
            "type": "object",
            "properties": {
                "userApplicationUid": {
                    "type": "string",
                    "example": "2333afd5-5a4d-453c-9e6f-8d63f885bb59"
                },
                "permissionOverwrite": {
                    "type": "boolean",
                    "example": true
                },
                "module": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string",
                            "example": "2e6dba3f-4916-469d-bb6e-01d2c67b2211"
                        },
                        "key": {
                            "type": "string",
                            "example": "module.key"
                        },
                        "name": {
                            "type": "string",
                            "example": "Module Name"
                        },
                        "defaultPermission": {
                            "type": "boolean",
                            "example": true
                        }
                    }
                }
            }
        },
        "UpdateUserApplicationModuleResponse": {
            "type": "object",
            "properties": {
                "userApplicationModule": {
                    "$ref": "#/definitions/UserApplicationModuleRelationship"
                },
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "DeleteUserApplicationModuleResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "CreateUserApplicationModuleAttributeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "DeleteUserApplicationModuleAttributeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "CreateUserOrganizationResponse": {
            "type": "object",
            "properties": {
                "userOrganization": {
                    "$ref": "#/definitions/UserOrganizationRelationship"
                },
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "GetUserOrganizationRelationshipsResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string",
                            "example": "2e6dba3f-4916-469d-bb6e-01d2c67b2211"
                        },
                        "firstName": {
                            "type": "string",
                            "example": "UserName"
                        },
                        "lastName": {
                            "type": "string",
                            "example": "UserLastName"
                        },
                        "userName": {
                            "type": "string",
                            "example": "UserUserName"
                        },
                        "email": {
                            "type": "string",
                            "example": "UserEmail@nrccua.org"
                        },
                        "status": {
                            "type": "string",
                            "example": "Active"
                        },
                        "type": {
                            "type": "string",
                            "example": "LdapUser"
                        },
                        "createdAt": {
                            "type": "string",
                            "example": "2017-06-20T16:43:11.378Z"
                        },
                        "verifiedDate": {
                            "type": "string",
                            "example": "2017-06-20T16:43:11.378Z"
                        },
                        "roles": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Role"
                            }
                        },
                        "attributes": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AttributeSmall"
                            }
                        },
                        "externalIds": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ExternalId"
                            }
                        }
                    }
                },
                "organization": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string",
                            "example": "2e6dba3f-4916-469d-bb6e-01d2c67b2211"
                        },
                        "name": {
                            "type": "string",
                            "example": "NitzscheandSons"
                        },
                        "type": {
                            "type": "string",
                            "enum": [
                                "Organization",
                                "OrgType"
                            ]
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Primary",
                        "Secondary",
                        "Admin"
                    ]
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2017-06-26T21:32:28.381Z"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-26T21:32:28.381Z"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "UpdateUserOrganizationRelationshipResponse": {
            "type": "object",
            "properties": {
                "userOrganization": {
                    "$ref": "#/definitions/UserOrganizationRelationship"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "DeleteUserOrganizationResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "CreateUserOrganizationAttributeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "DeleteUserOrganizationAttributeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "ImpersonateResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/User"
                },
                "impersonatingUser": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string",
                            "example": "eabac226-5706-4e7c-812c-00b19e2ddf4b"
                        },
                        "firstName": {
                            "type": "string",
                            "example": "Administrator"
                        },
                        "lastName": {
                            "type": "string",
                            "example": "Administrator"
                        },
                        "userName": {
                            "type": "string",
                            "example": "admin"
                        }
                    }
                },
                "sessionToken": {
                    "type": "string"
                }
            }
        },
        "EncryptResponse": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "object",
                    "properties": {
                        "message": {
                            "type": "string",
                            "example": "decodedMessage"
                        }
                    }
                }
            }
        },
        "CreateUserExternalIdResponse": {
            "type": "object",
            "properties": {
                "externalId": {
                    "$ref": "#/definitions/ExternalId"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "CreateOrganizationExternalIdResponse": {
            "type": "object",
            "properties": {
                "externalId": {
                    "$ref": "#/definitions/ExternalId"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "UpdateExternalIdResponse": {
            "type": "object",
            "properties": {
                "externalId": {
                    "$ref": "#/definitions/ExternalId"
                },
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "DeleteExternalIdResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                }
            }
        },
        "Application": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "11b12690-0207-4311-ae35-5809bc705da9"
                },
                "key": {
                    "type": "string",
                    "example": "nrccuakey"
                },
                "name": {
                    "type": "string",
                    "example": "nrccua"
                },
                "url": {
                    "type": "string",
                    "example": "https://nrccua.org"
                },
                "adminUrl": {
                    "type": "string",
                    "example": "https://nrccua.org"
                },
                "creator": {
                    "$ref": "#/definitions/Creator"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2017-06-21T21:39:33.891Z"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-21T21:39:33.891Z"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                },
                "modules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ModuleSmall"
                    }
                }
            }
        },
        "ApplicationSmall": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "modules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ModuleReallySmall"
                    }
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "ApplicationReallySmall": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "GetApplicationSmall": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "44bc5658-e923-4c0b-9400-c638eabef494"
                },
                "name": {
                    "type": "string",
                    "example": "BoehmandSons"
                },
                "key": {
                    "type": "string",
                    "example": "WindlerandSons"
                },
                "url": {
                    "type": "string",
                    "example": "https://hollis.name"
                },
                "adminUrl": {
                    "type": "string",
                    "example": "https://brody.biz"
                },
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationReallySmall"
                    }
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "eabac226-5706-4e7c-812c-00b19e2ddf4b"
                },
                "type": {
                    "type": "string",
                    "example": "User"
                },
                "firstName": {
                    "type": "string",
                    "example": "Administrator"
                },
                "lastName": {
                    "type": "string",
                    "example": "Administrator"
                },
                "userName": {
                    "type": "string",
                    "example": "admin"
                },
                "email": {
                    "type": "string",
                    "example": "admin@nrccua.org"
                },
                "status": {
                    "type": "string",
                    "example": "Pending"
                },
                "verifiedDate": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-20T16:43:11.378Z"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2017-06-20T16:43:11.378Z"
                },
                "creator": {
                    "$ref": "#/definitions/Creator"
                },
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationSmall"
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Role"
                    }
                },
                "applications": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "uid": {
                                "type": "string"
                            },
                            "key": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            },
                            "modules": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/ModuleReallySmall"
                                }
                            },
                            "attributes": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/AttributeSmall"
                                }
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "Active",
                                    "Inactive",
                                    "PendingApproval"
                                ]
                            }
                        }
                    }
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                },
                "externalIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalId"
                    }
                }
            }
        },
        "UserSmall": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "1e6c6d8e-af30-43ca-a519-395734701eba"
                },
                "firstName": {
                    "type": "string",
                    "example": "McGlynn"
                },
                "lastName": {
                    "type": "string",
                    "example": "Antoinette"
                },
                "userName": {
                    "type": "string",
                    "example": "Micaela.Swift32"
                },
                "email": {
                    "type": "string",
                    "example": "Alize_Connelly@yahoo.com"
                },
                "status": {
                    "type": "string",
                    "example": "Disabled"
                },
                "type": {
                    "type": "string",
                    "example": "LdapUser"
                },
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationSmall"
                    }
                },
                "externalIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalId"
                    }
                }
            }
        },
        "UserReallySmall": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "1e6c6d8e-af30-43ca-a519-395734701eba"
                },
                "userName": {
                    "type": "string",
                    "example": "Sample University-0"
                },
                "firstName": {
                    "type": "string",
                    "example": "McGlynn"
                },
                "lastName": {
                    "type": "string",
                    "example": "Antoinette"
                },
                "email": {
                    "type": "string",
                    "example": "antoinette@nrccua.org"
                },
                "status": {
                    "type": "string",
                    "example": "Active"
                },
                "type": {
                    "type": "string",
                    "example": "LdapUser"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Role"
                    }
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "LoginHistory": {
            "type": "object",
            "properties": {
                "ipAddress": {
                    "type": "string",
                    "example": "::ffff:127.0.0.1"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-26T20:18:34.558Z"
                }
            }
        },
        "ImpersonateHistory": {
            "type": "object",
            "properties": {
                "impersonatorUserUid": {
                    "type": "string",
                    "example": "2e6dba3f-4916-469d-bb6e-01d2c67b2211"
                },
                "ipAddress": {
                    "type": "string",
                    "example": "::ffff:127.0.0.1"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-26T20:18:34.558Z"
                }
            }
        },
        "UserAuthorizations": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "eabac226-5706-4e7c-812c-00b19e2ddf4b"
                },
                "type": {
                    "type": "string",
                    "example": "User"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "lastName": {
                    "type": "string",
                    "example": "Arm"
                },
                "userName": {
                    "type": "string",
                    "example": "john-arm"
                },
                "email": {
                    "type": "string",
                    "example": "john-arm@nrccua.org"
                },
                "status": {
                    "type": "string",
                    "example": "Active"
                },
                "verifiedDate": {
                    "type": "string",
                    "example": "2020-11-04T17:53:48.470Z"
                },
                "creator": {
                    "$ref": "#/definitions/Creator"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-20T16:43:11.378Z"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2017-06-20T16:43:11.378Z"
                },
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrganizationSmall"
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Role"
                    }
                },
                "application": {
                    "$ref": "#/definitions/UserApplication"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "UserApplicationModule": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "e8e3d610-4211-450f-b44b-1b0aa4a31283"
                },
                "key": {
                    "type": "string",
                    "example": "datalab.research.covid-19-student-impact"
                },
                "name": {
                    "type": "string",
                    "example": "COVID-19 Student Impact"
                },
                "permission": {
                    "type": "boolean",
                    "example": true
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "UserApplication": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "11b12690-0207-4311-ae35-5809bc705da9"
                },
                "key": {
                    "type": "string",
                    "example": "nrccuakey"
                },
                "name": {
                    "type": "string",
                    "example": "nrccua"
                },
                "url": {
                    "type": "string",
                    "example": "https://nrccua.org"
                },
                "adminUrl": {
                    "type": "string",
                    "example": "https://nrccua.org"
                },
                "creator": {
                    "$ref": "#/definitions/Creator"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2017-06-21T21:39:33.891Z"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-21T21:39:33.891Z"
                },
                "modules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserApplicationModule"
                    }
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "Organization": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "2e6dba3f-4916-469d-bb6e-01d2c67b2211"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Organization",
                        "OrgType"
                    ]
                },
                "name": {
                    "type": "string",
                    "example": "NitzscheandSons"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Active",
                        "Inactive",
                        "Pending"
                    ],
                    "example": "Pending"
                },
                "sfAccountId": {
                    "type": "string",
                    "example": "0016000000ImzzJAAR"
                },
                "externalId": {
                    "type": "string",
                    "example": "003422"
                },
                "actCode": {
                    "type": "string",
                    "example": "0011"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-21T16:36:08.039Z"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2017-06-21T16:36:08.039Z"
                },
                "programs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProgramSmall"
                    }
                },
                "group": {
                    "$ref": "#/definitions/Group"
                },
                "parent": {
                    "$ref": "#/definitions/Parent"
                },
                "creator": {
                    "$ref": "#/definitions/Creator"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserReallySmall"
                    }
                },
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ApplicationSmall"
                    }
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                },
                "externalIds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ExternalId"
                    }
                }
            }
        },
        "OrganizationSmall": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "e93d3ce1-5cf8-4d2f-98e3-d31e03bf2730"
                },
                "name": {
                    "type": "string",
                    "example": "Sample University"
                },
                "fice": {
                    "type": "string",
                    "example": "SAMPLE"
                },
                "stateCode": {
                    "type": "string",
                    "example": "MO"
                }
            }
        },
        "OrganizationReallySmall": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "e93d3ce1-5cf8-4d2f-98e3-d31e03bf2730"
                },
                "name": {
                    "type": "string",
                    "example": "Sample University"
                }
            }
        },
        "OrganizationAuthorizations": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "2e6dba3f-4916-469d-bb6e-01d2c67b2211"
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Organization",
                        "OrgType"
                    ]
                },
                "name": {
                    "type": "string",
                    "example": "NitzscheandSons"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Active",
                        "Inactive",
                        "Pending"
                    ],
                    "example": "Pending"
                },
                "sfAccountId": {
                    "type": "string",
                    "example": "0016000000ImzzJAAR"
                },
                "externalId": {
                    "type": "string",
                    "example": "003422"
                },
                "actCode": {
                    "type": "string",
                    "example": "0011"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-21T16:36:08.039Z"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2017-06-21T16:36:08.039Z"
                },
                "programs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProgramSmall"
                    }
                },
                "group": {
                    "$ref": "#/definitions/Group"
                },
                "parent": {
                    "$ref": "#/definitions/Parent"
                },
                "creator": {
                    "$ref": "#/definitions/Creator"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/UserReallySmall"
                    }
                },
                "application": {
                    "$ref": "#/definitions/UserApplication"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "NoteSmall": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "25223517-9516-42b3-ae5f-413677d2a888"
                },
                "content": {
                    "type": "string",
                    "example": "Numquam facere est perferendis quo."
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-20T18:48:45.212Z"
                },
                "creator": {
                    "$ref": "#/definitions/Creator"
                }
            }
        },
        "Note": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "25223517-9516-42b3-ae5f-413677d2a888"
                },
                "content": {
                    "type": "string",
                    "example": "Numquam facere est perferendis quo."
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-20T18:48:45.212Z"
                },
                "createdBy": {
                    "type": "string"
                },
                "entityUid": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "Creator": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "bf7883eb-7070-42bf-b706-9917f0ff6f47"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                }
            }
        },
        "Modification": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "4bb7304b-9374-49ed-b361-12034908172e"
                },
                "modification": {
                    "type": "object"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-20T18:48:45.682Z"
                },
                "modifier": {
                    "$ref": "#/definitions/Modifier"
                }
            }
        },
        "Modifier": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "55ee6a37-7395-4a99-a623-7a53815b7103"
                },
                "firstName": {
                    "type": "string",
                    "example": "Administrator"
                },
                "lastName": {
                    "type": "string",
                    "example": "Administrator"
                }
            }
        },
        "DeletedAttribute": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "CreatedAttribute": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "AttributeSmall": {
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "example": "tempore"
                },
                "value": {
                    "type": "object"
                }
            }
        },
        "ProgramSmall": {
            "type": "object",
            "required": [
                "key"
            ],
            "properties": {
                "key": {
                    "type": "string",
                    "example": "tempore"
                }
            }
        },
        "ProgramResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "programs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProgramSmall"
                    }
                }
            }
        },
        "PrerequisitesResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "prerequisites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProgramSmall"
                    }
                }
            }
        },
        "RequiredAttributeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Success"
                },
                "requiredAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProgramSmall"
                    }
                }
            }
        },
        "Module": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "defaultPermission": {
                    "type": "boolean"
                },
                "creator": {
                    "$ref": "#/definitions/Creator"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "programs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProgramSmall"
                    }
                },
                "prerequisites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProgramSmall"
                    }
                },
                "requiredAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProgramSmall"
                    }
                },
                "application": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string"
                        },
                        "key": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "ModuleForList": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "application": {
                    "type": "object",
                    "properties": {
                        "uid": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "ModuleReallySmall": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "permissionOverwrite": {
                    "type": "boolean"
                },
                "attributesOverwrite": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "ModuleSmall": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "defaultPermission": {
                    "type": "boolean"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                },
                "programs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProgramSmall"
                    }
                },
                "prerequisites": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProgramSmall"
                    }
                },
                "requiredAttributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ProgramSmall"
                    }
                }
            }
        },
        "Role": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "bf45a23c-b527-4c5d-b7b8-60250339d265"
                },
                "roleName": {
                    "type": "string",
                    "example": "Administrator"
                }
            }
        },
        "OrganizationApplicationRelationship": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "1c249f44-8859-4f73-856b-6ab18b9d61ba"
                },
                "applicationUid": {
                    "type": "string",
                    "example": "c02cf331-af3b-4919-95c7-973f0377baa0"
                },
                "organizationUid": {
                    "type": "string",
                    "example": "68c7b07a-9bc5-4bbc-8fba-dedfe79612d0"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2017-06-26T21:32:28.381Z"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-26T21:32:28.381Z"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "OrganizationApplicationModuleRelationship": {
            "type": "object",
            "properties": {
                "moduleUid": {
                    "type": "string",
                    "example": "6070aa52-3454-42a9-9461-efa02fb6d82a"
                },
                "organizationApplicationUid": {
                    "type": "string",
                    "example": "d313f1eb-b9e7-48a3-8e2f-95006efd02a6"
                },
                "permissionOverwrite": {
                    "type": "boolean"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2017-06-27T18:18:25.912Z"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-27T18:18:25.912Z"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "UserApplicationRelationship": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "1e6c6d8e-af30-43ca-a519-395734701eba"
                },
                "userUid": {
                    "type": "string",
                    "example": "a03e2576-9a33-4eda-aa47-b1a4893f33b2"
                },
                "applicationUid": {
                    "type": "string",
                    "example": "c02cf331-af3b-4919-95c7-973f0377baa0"
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "Active",
                        "Inactive",
                        "PendingApproval"
                    ]
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2017-06-26T21:32:28.381Z"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-26T21:32:28.381Z"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "UserApplicationModuleRelationship": {
            "type": "object",
            "properties": {
                "moduleUid": {
                    "type": "string",
                    "example": "6070aa52-3454-42a9-9461-efa02fb6d82a"
                },
                "userApplicationUid": {
                    "type": "string",
                    "example": "d313f1eb-b9e7-48a3-8e2f-95006efd02a6"
                },
                "permissionOverwrite": {
                    "type": "boolean"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2017-06-27T18:18:25.912Z"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-27T18:18:25.912Z"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                }
            }
        },
        "UserOrganizationRelationship": {
            "type": "object",
            "properties": {
                "userUid": {
                    "type": "string",
                    "example": "c02cf331-af3b-4919-95c7-973f0377baa0"
                },
                "organizationUid": {
                    "type": "string",
                    "example": "68c7b07a-9bc5-4bbc-8fba-dedfe79612d0"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2017-06-26T21:32:28.381Z"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-26T21:32:28.381Z"
                },
                "attributes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/AttributeSmall"
                    }
                },
                "type": {
                    "type": "string",
                    "enum": [
                        "Primary",
                        "Secondary",
                        "Admin"
                    ]
                }
            }
        },
        "Group": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "Parent": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "EmailConfig": {
            "type": "object",
            "properties": {
                "clientUrl": {
                    "type": "string",
                    "example": "https://datalab.encoura.org"
                },
                "templateId": {
                    "type": "object",
                    "properties": {
                        "invitationEmail": {
                            "type": "string",
                            "example": "encoura-dl-new-user"
                        },
                        "welcomeEmail": {
                            "type": "string",
                            "example": ""
                        },
                        "forgotPasswordEmail": {
                            "type": "string",
                            "example": "encoura-dl-forgot-password"
                        },
                        "passwordChangedEmail": {
                            "type": "string",
                            "example": "encourage-apollo-password-changed-notification-test"
                        }
                    }
                }
            }
        },
        "ExternalId": {
            "type": "object",
            "properties": {
                "uid": {
                    "type": "string",
                    "example": "1769a5f2-3f8d-4aca-adb1-717328dd575a"
                },
                "userUid": {
                    "type": "string",
                    "example": "c02cf331-af3b-4919-95c7-973f0377baa0"
                },
                "organizationUid": {
                    "type": "string",
                    "example": "68c7b07a-9bc5-4bbc-8fba-dedfe79612d0"
                },
                "source": {
                    "type": "string",
                    "example": "hs_id"
                },
                "externalId": {
                    "type": "string",
                    "example": "HS000001"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2017-06-26T21:32:28.381Z"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2017-06-26T21:32:28.381Z"
                }
            }
        }
    }
}
